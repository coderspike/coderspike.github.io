<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>spike</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-25T04:17:27.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS沙盒</title>
    <link href="http://yoursite.com/2016/08/25/iOS/iOS%E6%B2%99%E7%9B%92/"/>
    <id>http://yoursite.com/2016/08/25/iOS/iOS沙盒/</id>
    <published>2016-08-25T03:34:36.000Z</published>
    <updated>2016-08-25T04:17:27.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/bc254b75jw1f75vdl7oqbj20ap0bp74g.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/bc254b75jw1f75vdkmxefj20cg0baaae.jpg&quot; alt=&quot;img2&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *path = NSHomeDirectory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上面的代码得到的是应用程序目录的路径，在该目录下有三个文件夹：Documents、Library、temp以及一个.app包！该目录下就是应用程序的沙盒，应用程序只能访问该目录下的文件夹。但在ios8中已经开放访问（extension）extension是ios8新开放的一种对几个固定系统区域的拓展机制，它可以在一定程度上弥补ios的沙盒机制对应用间的通信限制。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1、Documents 目录：您应该将所有的应用程序数据文件写入到这个目录下。这个目录用于存储用户数据。该路径可通过配置实现iTunes共享文件。可被iTunes备份。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、Library 目录：这个目录下有两个子目录：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。该路径下的文件夹，除Caches以外，都会被iTunes备份。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。该路径下的文件不会被iTunes备份。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取相关路径&quot;&gt;&lt;a href=&quot;#获取相关路径&quot; class=&quot;headerlink&quot; title=&quot;获取相关路径&quot;&gt;&lt;/a&gt;获取相关路径&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;获取目录路径的方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取沙盒主目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *homeDir = &lt;span class=&quot;built_in&quot;&gt;NSHomeDirectory&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取Documents目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *docDir = [&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) firstObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取Library的目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *libDir = [&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSLibraryDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) lastObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取Caches目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cachesDir = [&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSCachesDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) firstObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取tmp目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *tmpDir =  &lt;span class=&quot;built_in&quot;&gt;NSTemporaryDirectory&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取应用程序程序包中资源文件路径的方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] bundlePath]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *imagePath = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:&lt;span class=&quot;string&quot;&gt;@&quot;apple&quot;&lt;/span&gt; ofType:&lt;span class=&quot;string&quot;&gt;@&quot;png&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *appleImage = [[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; alloc] initWithContentsOfFile:imagePath];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实际使用&quot;&gt;&lt;a href=&quot;#实际使用&quot; class=&quot;headerlink&quot; title=&quot;实际使用&quot;&gt;&lt;/a&gt;实际使用&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *path = [&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;).lastObject stringByAppendingPathComponent:&lt;span class=&quot;string&quot;&gt;@&quot;student.db&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FMDatabase *db = [[FMDatabase alloc] initWithPath:path];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/bc254b75jw1f75vdl7oqbj20ap0bp74g.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/
    
    </summary>
    
      <category term="概念讲解" scheme="http://yoursite.com/categories/%E6%A6%82%E5%BF%B5%E8%AE%B2%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://yoursite.com/2016/08/15/Java/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/08/15/Java/工厂模式/</id>
    <published>2016-08-15T07:31:30.000Z</published>
    <updated>2016-08-15T10:36:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中，我们首先介绍了“创建型”设计模式中的一种 ——“简单工厂模式”，而“简单工厂模式”又具体分为两类，一类是只带有一个产品对象的最简模式，另一类是带有一个抽象产品对象的模式。而今天我们要讲的是一种更加抽象的“创建型”设计模式——“工厂模式”。&lt;br&gt;可以说，“工厂模式”是基于“简单工厂模式”抽象出来的一种更加“抽象化”的设计模式，它把所有“类实例化”（包括“工厂”和“产品”）的过程全部放到了子类当中去实现，而父类则负责定义创建对象的公共接口。“工厂模式”的一部分结构仍与“简单工厂模式”类似，只是相对于“简单工厂模式”而言，“工厂模式”没有了固定的核心工厂类，所有的“工厂”也需要由客户实现并实例化之后才能使用。&lt;br&gt;“工厂类”作为核心类在“工厂模式”中变成了一个抽象的“工厂”角色，这样处于父类的“核心工厂类”便仅仅负责实现具体工厂子类必须实现的接口，而这样进一步进行抽象的好处就是该模式可以在不修改具体工厂角色的情况下“引进”新的“产品”。下面给出了工厂模式的UML类图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.yhspy.com/view/blog/images/blog-main-body_578d7a2d9266c052903549.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看得出来，相对于之前的“简单工厂模式”，在“工厂模式”中我们又增加一个抽象的“工厂类”，在该类中负责定义一些子类“工厂”所必须实现的通用接口。可以结合下面给出的示例代码加以理解。&lt;/p&gt;
&lt;h3 id=&quot;父类抽象角色：&quot;&gt;&lt;a href=&quot;#父类抽象角色：&quot; class=&quot;headerlink&quot; title=&quot;父类抽象角色：&quot;&gt;&lt;/a&gt;父类抽象角色：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;AbstractFactory.java&lt;br&gt;AbstractProduct.java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AbstractFactory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通用的抽象工厂父类，负责定义一些子类工厂需要的接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; AbstractProduct &lt;span class=&quot;title&quot;&gt;createProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;!--? extends AbstractProduct--&amp;gt; product)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AbstractProduct.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抽象产品类，封装了产品本身的属性以及方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;子类抽象角色&quot;&gt;&lt;a href=&quot;#子类抽象角色&quot; class=&quot;headerlink&quot; title=&quot;子类抽象角色&quot;&gt;&lt;/a&gt;子类抽象角色&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ConcreteFactoryA.java&lt;br&gt;ConcreteFactoryB.java&lt;br&gt;ConcreteProductA.java&lt;br&gt;ConcreteProductB.java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteFactoryA.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteFactoryA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 工厂子类，继承自父类工厂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AbstractProduct &lt;span class=&quot;title&quot;&gt;createProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;!--? extends AbstractProduct--&amp;gt; product)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct p = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = (AbstractProduct) Class.forName(product.getName()).newInstance();		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated catch block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteFactoryB.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteFactoryB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 工厂子类，继承自父类工厂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AbstractProduct &lt;span class=&quot;title&quot;&gt;createProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;!--? extends AbstractProduct--&amp;gt; product)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct p = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = (AbstractProduct) Class.forName(product.getName()).newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//加价&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p.setPrice(p.getPrice() * &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated catch block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteProductA.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 子类产品，继承自父类产品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;10.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price = price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteProductB.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 子类产品，继承自父类产品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;9.9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price = price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;客户角色（实体化工厂并生产产品）&quot;&gt;&lt;a href=&quot;#客户角色（实体化工厂并生产产品）&quot; class=&quot;headerlink&quot; title=&quot;客户角色（实体化工厂并生产产品）&quot;&gt;&lt;/a&gt;客户角色（实体化工厂并生产产品）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Client.java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Client.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 客户角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractFactory factoryA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcreteFactoryA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractFactory factoryB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcreteFactoryB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct productAFormFactoryA = factoryA.createProduct(ConcreteProductA.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct productAFormFactoryB = factoryB.createProduct(ConcreteProductA.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct productBFormFactoryB = factoryB.createProduct(ConcreteProductB.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(productAFormFactoryA.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(productAFormFactoryB.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(productBFormFactoryB.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中，我们首先介绍了“创建型”设计模式中的一种 ——“简单工厂模式”，而“简单工厂模式”
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://yoursite.com/2016/08/15/Java/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/08/15/Java/简单工厂模式/</id>
    <published>2016-08-15T05:49:59.000Z</published>
    <updated>2016-08-15T07:31:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;“简单工厂模式” 又叫做 “静态工厂方法”，它是由一个工厂对象决定创建出哪一种产品类的实例。若要进行详细区分的话，可以分为两种：1、只有一个产品对象的简单工厂模式；2、带有一个抽象产品的简单工厂模式。下面给出了这两种具体简单工厂模式的UML类图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.yhspy.com/view/blog/images/blog-main-body_578b4b1723735204774993.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Factory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Factory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// “工厂”类直接返回一个“产品”的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Product &lt;span class=&quot;title&quot;&gt;createProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Product();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Client.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// “客户”类使用“工厂”类来生产“产品”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Factory factory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Factory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 调用“工厂”的生产方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Product product = factory.createProduct();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(product.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Product.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// “产品”类，负责包装产品的所有信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;9.9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;带有一个抽象产品的简单工厂模式&quot;&gt;&lt;a href=&quot;#带有一个抽象产品的简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;带有一个抽象产品的简单工厂模式&quot;&gt;&lt;/a&gt;带有一个抽象产品的简单工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基于前一种模式，只要我们稍加改进便会变为另一种类型的“简单工厂模式”，这里我们将具体的“产品”变为抽象的“产品”，即所有的具体产品均继承自抽象产品类型。这样在“工厂”内部，我们便可以根据“客户”不同的需求来创建不同的“产品”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.yhspy.com/view/blog/images/blog-main-body_578b5b8aadb3e185248223.png&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Factory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Factory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; AbstractProduct &lt;span class=&quot;title&quot;&gt;createProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 根据客户的选择，生产不同的“产品”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key == &lt;span class=&quot;string&quot;&gt;&quot;ConcreteProductA&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcreteProductA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcreteProductB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Client.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Factory factory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Factory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 客户选择“生产”的产品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ConcreteProductA productA = (ConcreteProductA) factory.createProduct(&lt;span class=&quot;string&quot;&gt;&quot;ConcreteProductA&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AbstractProduct productB = factory.createProduct(&lt;span class=&quot;string&quot;&gt;&quot;ConcreteProductB&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(productA.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(productB.getPrice());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AbstractProduct.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抽象出的产品接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteProductA.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 具体产品类A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;9.9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteProductB.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractProduct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 具体产品类B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteProductB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;10.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;“简单工厂模式” 又叫做 “静态工厂方法”，它是由一个工厂对象决定创建出哪一种产品
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://yoursite.com/2016/08/13/Java/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/08/13/Java/建造者模式/</id>
    <published>2016-08-13T08:21:44.000Z</published>
    <updated>2016-08-15T01:59:48.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;“创建型”设计模式的一种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;我们来设计一个游戏场景中的“房屋”。对于一个“房屋”这个结构来说，它主要包括“地板，墙壁，窗户，门，天花板”这五个基本的部分，并且对于任意一个房屋来说，都是含有这五个基本的组成部分的。同时，我们在构建房子的过程中也是按照一定的顺序来进行的，比如先建造地板和墙壁，最后建造天花板。在这整个构建房屋的过程中，其构建的步骤和顺序是基本相同且不变的（比如先建造地板后建造天花板这个顺序）。而相对房屋中某个具体的组件而言（比如门），选用哪种样式，哪种规格的门便需要进行一番商议了，对于一个房屋构建过程中的这部分具体组件的构建我们称其是易变的。&lt;br&gt;在上述的场景中我们可以发现，一个房屋的基本组成结构和构建的顺序是基本不变的，但是对于每一个独立的“组件”而言，又有着不同的组成形式。对于这样的场景，我们便可以使用“建造者模式”来进行构建。&lt;br&gt;在软件系统中，有时面临着“一个复杂对象”的创建工作，该复杂对象通常由各个部分的子对象用一定的算法构成。这个复杂对象的各个部分经常面临着剧烈变化。但是将它们组合在一起的算法却相对稳定。而“建造者模式”就是为了解决该类问题而存在的，它将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.yhspy.com/view/blog/images/blog-main-body_5794870cd5e99846451854.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“建造者模式”将一个复杂任务中相对稳定不变的部分放到了“Director”中，而“Builder”则规定了每一个具体组件需要遵循的标准，再这个标准之上可以对各个“组件”进行任意的改造。多个“Builder”类聚合成了“Director”类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// House.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;House&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 房屋类的属性和方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; doorStyleNum = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; floorStyleNum = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; wallStyleNum = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDoor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.doorStyleNum = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFloor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.floorStyleNum = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setWall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.wallStyleNum = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Builder.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抽象的构建器类，记得包含返回实例的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildFloor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildDoor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildWall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; House &lt;span class=&quot;title&quot;&gt;getHouse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteBuilder.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteBuilder&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 具体的构建器类，记得包含返回实例的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    House house = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcreteBuilder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.house = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; House();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildFloor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.house.setFloor(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildDoor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.house.setDoor(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildWall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.house.setWall(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; House &lt;span class=&quot;title&quot;&gt;getHouse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.house;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Director.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Director&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; House &lt;span class=&quot;title&quot;&gt;createHouse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Builder builder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 工头类，负责制定工程整体的施工顺序，初期制定好后期基本没事干，全部交由工人去具体实施&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.buildFloor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.buildDoor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.buildWall();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.getHouse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Client.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 客户类，让工人们按照工头的旨意去造房子，但工人们都各具自己的特色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        House house = Director.createHouse(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcreteBuilder());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(house.doorStyleNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(house.floorStyleNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(house.wallStyleNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;对于“建造者模式”的总结：工头：“我这里制订了整个工程的具体步骤，但具体每个步骤找谁去做，由客户们选择。”，客户1：“第一个步骤我想让小强工人去做，第二个…”，客户2：“第一个步骤我想让小明工人去做，第二个…”。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;“创建型”设计模式的一种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用场景&quot;&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>吃很重要</title>
    <link href="http://yoursite.com/2016/08/13/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E5%90%83%E5%BE%88%E9%87%8D%E8%A6%81/"/>
    <id>http://yoursite.com/2016/08/13/读书生活/吃很重要/</id>
    <published>2016-08-13T04:26:57.000Z</published>
    <updated>2016-08-13T07:14:00.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;菠萝排骨&quot;&gt;&lt;a href=&quot;#菠萝排骨&quot; class=&quot;headerlink&quot; title=&quot;菠萝排骨&quot;&gt;&lt;/a&gt;菠萝排骨&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;排骨，切块&lt;br&gt;菠萝，切条&lt;br&gt;辅料：&lt;br&gt;红酒&lt;br&gt;辣椒，切丁&lt;br&gt;大葱，切葱花&lt;br&gt;西红柿沙司，加油略炒&lt;br&gt;盐&lt;br&gt;做法：&lt;br&gt;1.将排骨块加入红酒腌制15分钟。&lt;br&gt;2.在锅里放底油，等到油面起烟，下入辣椒丁、葱花爆香，再下入排骨。&lt;br&gt;3.炸至排骨表皮金黄时放入菠萝和炒过的西红柿沙司，再撒盐出锅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;清炖狮子头&quot;&gt;&lt;a href=&quot;#清炖狮子头&quot; class=&quot;headerlink&quot; title=&quot;清炖狮子头&quot;&gt;&lt;/a&gt;清炖狮子头&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料&lt;br&gt;五花肉&lt;br&gt;辅料&lt;br&gt;葱，切段，一半切末&lt;br&gt;姜，切末&lt;br&gt;盐&lt;br&gt;料酒&lt;br&gt;白胡椒粉&lt;br&gt;枸杞&lt;br&gt;莲藕，切丁&lt;br&gt;白菜&lt;br&gt;鸡汤&lt;br&gt;油菜心，煮熟&lt;br&gt;做法&lt;br&gt;1.将五花肉去皮切碎，用刀剁成石榴子大小的粒。把枸杞浸泡开，葱姜末打成汁。&lt;br&gt;2.在肉馅中加入莲藕碎丁，调入盐、料酒、白胡椒粉拌匀。加葱姜水搅拌均匀，再逐渐加入清水顺同一方向搅拌，然后抱团、上劲儿。&lt;br&gt;3.取一沙锅，在锅底铺入一层白菜，将调好的肉馅攒揉成大丸子放入。再加足量清水，加入葱段调入少许盐、料酒。&lt;br&gt;4.倒入鸡汤小火慢炖两个小时。&lt;br&gt;5.撇去浮油，将肉丸放入另一锅鸡汤加煮熟的油菜心即成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;扁豆焖面&quot;&gt;&lt;a href=&quot;#扁豆焖面&quot; class=&quot;headerlink&quot; title=&quot;扁豆焖面&quot;&gt;&lt;/a&gt;扁豆焖面&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料&lt;br&gt;四季豆，掰段&lt;br&gt;五花肉，切片&lt;br&gt;拉面，煮熟&lt;br&gt;辅料&lt;br&gt;蒜，切末&lt;br&gt;红辣椒，切碎&lt;br&gt;大葱，切葱花&lt;br&gt;白糖&lt;br&gt;生抽&lt;br&gt;老抽&lt;br&gt;盐&lt;br&gt;花椒油1勺&lt;br&gt;做法&lt;br&gt;1.锅中加入适量油烧到四成热，放入葱花和一半蒜末炒出香味，然后放入五花肉片翻炒并调入生抽、老抽、白糖、盐，随后倒入豆角炒匀。&lt;br&gt;2.倒入水没过豆角，然后加盖用中火焖至汤汁烧开，把面条散开均匀地铺在豆角上。&lt;br&gt;3.盖上锅盖，用中小火慢慢焖，5分钟后打开锅盖，用筷子翻动面条使味道均匀，再盖上锅盖继续焖，直到锅中水分快要收干，撒上剩余的蒜末、辣椒、葱花，淋入花椒油或香油，拌匀即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参枣粥&quot;&gt;&lt;a href=&quot;#参枣粥&quot; class=&quot;headerlink&quot; title=&quot;参枣粥&quot;&gt;&lt;/a&gt;参枣粥&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;原料·人参3克，红枣、莲子各10颗，大米100克，冰糖适量。 做法· 将大米洗净，与人参、莲子、红枣同放锅内，加水煮粥，粥熟后放入冰糖溶化即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;胡萝卜炒口蘑&quot;&gt;&lt;a href=&quot;#胡萝卜炒口蘑&quot; class=&quot;headerlink&quot; title=&quot;胡萝卜炒口蘑&quot;&gt;&lt;/a&gt;胡萝卜炒口蘑&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt; 水发口蘑250克，胡萝卜200克，葱段、姜丝、蒜末各适量。&lt;br&gt; 辅料：&lt;br&gt; 酱油、盐、味精、胡椒粉、白糖、水淀粉、植物油、高汤各适量。&lt;br&gt;做法 ：&lt;br&gt;1．口蘑、胡萝卜洗净，切成片，分别焯烫熟，过凉沥干。&lt;br&gt;2．热锅温油，下葱段、姜丝、蒜末炒出香味，放口蘑片和胡萝卜片炒匀，加酱油、盐、胡椒粉、白糖、高汤烧5分钟，起锅前加味精调味，用水淀粉勾芡收汁即可。 功效解析 胡萝卜有清热解毒、降气止咳、健脾和胃、补肝明目、壮阳补肾等功效。口蘑热量少，营养多，除基本的膳食纤维、蛋白质和多种维生素外，还含有铁、钾、硒、铜等。两者搭配，能降肝火、去烦躁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;羊肉萝卜汤&quot;&gt;&lt;a href=&quot;#羊肉萝卜汤&quot; class=&quot;headerlink&quot; title=&quot;羊肉萝卜汤&quot;&gt;&lt;/a&gt;羊肉萝卜汤&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;羊肉,白萝卜一根&lt;br&gt;萝卜切块，焯水，去萝卜的涩味&lt;br&gt;乘着萝卜焯水的时间，姜去皮，切片；蒜剥皮洗净&lt;br&gt;小葱切碎&lt;br&gt;辅料：&lt;br&gt;油&lt;br&gt;盐&lt;br&gt;葱&lt;br&gt;姜&lt;br&gt;大蒜&lt;br&gt;做法：&lt;br&gt;生羊肉过水，断生，去血沫&lt;br&gt;过好水的羊肉放入加水的汤煲中，加姜蒜、料酒，大火煮开。&lt;br&gt;加入萝卜，盖盖，小火炖煮30分钟。&lt;br&gt;出锅加盐、鸡粉和小葱调味，就得了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;糖醋排骨&quot;&gt;&lt;a href=&quot;#糖醋排骨&quot; class=&quot;headerlink&quot; title=&quot;糖醋排骨&quot;&gt;&lt;/a&gt;糖醋排骨&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;猪小排&lt;br&gt;辅料：&lt;br&gt;料酒1汤勺&lt;br&gt;盐3克&lt;br&gt;酱油2汤勺（1汤勺为15毫升容量的勺）&lt;br&gt;米醋3汤勺（1汤勺为15毫升容量的勺）&lt;br&gt;白糖4汤勺（1汤勺为15毫升容量的勺）&lt;br&gt;姜片&lt;br&gt;做法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;猪小排冼净，晾干水份备用&lt;/li&gt;
&lt;li&gt;锅内倒少量油，烧热之后，爆香姜片&lt;/li&gt;
&lt;li&gt;放入排骨，一直煸炒到排骨变色后，表面金黄微焦&lt;/li&gt;
&lt;li&gt;此时就可以放入黄金比例中的调料了，顺序是：先放一汤勺料酒，接着两汤勺酱油，三汤勺米醋最后四汤勺白糖，炒匀&lt;/li&gt;
&lt;li&gt;再倒入能没过排骨的开水，调中小火焖20分钟&lt;/li&gt;
&lt;li&gt;20分钟后调入盐，开大火收汁，收到汁浓色亮时，撒入芝麻点缀即可出锅&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;香煎鸡翅&quot;&gt;&lt;a href=&quot;#香煎鸡翅&quot; class=&quot;headerlink&quot; title=&quot;香煎鸡翅&quot;&gt;&lt;/a&gt;香煎鸡翅&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;鸡翅&lt;br&gt;辅料：&lt;br&gt;蒜、葱&lt;br&gt;盐、鸡精、酱油、花椒&lt;br&gt;做法:&lt;br&gt;鸡翅洗净划两刀，用盐、鸡精、酱油、花椒和蒜末腌制备用&lt;br&gt;油锅热油，鸡翅肉厚的一面先煎，注意火候，先大火定型，再中火煎熟，翻面继续以同样的方式煎，保证鸡翅外焦里嫩&lt;br&gt;把油锅里多余的油倒出，将腌制鸡翅剩余的的汁水倒入锅中翻炒&lt;br&gt;出锅摆盘、撒葱花&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;土豆炖豆角&quot;&gt;&lt;a href=&quot;#土豆炖豆角&quot; class=&quot;headerlink&quot; title=&quot;土豆炖豆角&quot;&gt;&lt;/a&gt;土豆炖豆角&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;土豆，豆角&lt;br&gt;辅料：&lt;br&gt;黄豆酱&lt;br&gt;大蒜&lt;br&gt;油&lt;br&gt;葱花&lt;br&gt;做法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;锅内放油，加葱花榨锅，然后加两勺大酱榨香&lt;/li&gt;
&lt;li&gt;下豆角翻炒，让每根都均匀裹上大酱&lt;/li&gt;
&lt;li&gt;加水，没过豆角，下土豆块，盖锅盖中火焖&lt;/li&gt;
&lt;li&gt;水快干时，开锅盖尝尝味道，如果不够味，再淋勺大酱&lt;/li&gt;
&lt;li&gt;下蒜片，大火翻炒收汁&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;菠萝排骨&quot;&gt;&lt;a href=&quot;#菠萝排骨&quot; class=&quot;headerlink&quot; title=&quot;菠萝排骨&quot;&gt;&lt;/a&gt;菠萝排骨&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主料：&lt;br&gt;排骨，切块&lt;br&gt;菠萝，切条&lt;br&gt;辅料：&lt;br&gt;红酒&lt;br&gt;辣椒，切丁&lt;br&gt;大葱
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>断舍离</title>
    <link href="http://yoursite.com/2016/08/12/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E6%96%AD%E8%88%8D%E7%A6%BB/"/>
    <id>http://yoursite.com/2016/08/12/读书生活/断舍离/</id>
    <published>2016-08-12T01:08:01.000Z</published>
    <updated>2016-08-12T10:33:54.000Z</updated>
    
    <content type="html">&lt;p style=&quot;border: 5px groove #A2B5CD;padding:3px&quot;&gt;&lt;br&gt;“断舍离”是从根本上反思自己与物品的关系，对物品进行简化、取舍，为人们省出整理的时间、空间、劳力和精力。&lt;br&gt; 断舍离的主角并不是物品，而是自己，而时间轴永远都是现在。选择物品的窍门，不是“能不能用”，而是“我要不要用”，这一点必须铭刻在心。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;什么是断舍离？&quot;&gt;&lt;a href=&quot;#什么是断舍离？&quot; class=&quot;headerlink&quot; title=&quot;什么是断舍离？&quot;&gt;&lt;/a&gt;什么是断舍离？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过收拾物品来了解自己，整理自己内心的混沌，让人生更舒适的行为技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px;font-weight:bold;color:#00008B;&quot;&gt;&lt;br&gt;断=断绝不需要的东西&lt;br&gt;舍=舍弃多余的废物&lt;br&gt;离=脱离对物品的执着&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何去做？&quot;&gt;&lt;a href=&quot;#如何去做？&quot; class=&quot;headerlink&quot; title=&quot;如何去做？&quot;&gt;&lt;/a&gt;如何去做？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;断舍离与一般整理收纳术的最大区别就在于，断舍离并非绝对要以把房间弄干净为目的，而是要通过收拾的过程了解并喜欢上真实的自己，实现自我肯定感.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-筛选物品带来的自我感觉&quot;&gt;&lt;a href=&quot;#1-筛选物品带来的自我感觉&quot; class=&quot;headerlink&quot; title=&quot;1.筛选物品带来的自我感觉&quot;&gt;&lt;/a&gt;1.筛选物品带来的自我感觉&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;要得到“这种东西与当下的我很相称，对当下的我来说是必需品”这样的判断，人就必须要清楚了解自己。通过不断地筛选物品的训练，当下的自我就会越来越鲜明地呈现在自己的眼前，人也就能以此判断出准确的自我形象。一个人所使用的物品，能够反映出自我形象。认识到了自我形象，反过来就会开始想要把现在用的东西替换掉了。&lt;br&gt;一旦开始使用某件物品，自己就会和那件东西逐渐相称，看东西的视角也会在不知不觉中发生变化。允许自己使用高级的东西，这种机制一旦运行起来，看待自己的方式就从过去的减分法变成了加分法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;◀️了解自我形象，提高对物品的判断力--&amp;gt;通过物品提升自我形象和品位--&amp;gt;只留下与当下的自己相称的物品&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;反过来看，这些物品是否是自己真正需要？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️不断生产出新东西，很多诱惑。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;礼品、奖品，赠品，商品邮购目录，信件，广告宣传单，包装纸/盒，一次性筷子、勺子、湿纸巾等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️捡便宜心理和折扣的陷阱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们会在不知不觉中掉进折扣的陷阱，完全忘记了“东西是不是适合自己的品位”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;是否由此产生了很多“破烂”？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 不用的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;漫不经心地保存或放着不管的东西，甚至是已经忘了它的存在的东西。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 还在用的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;虽然在用，但并不喜欢，所以就随便用着，会乱放，毫不珍惜地乱用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 充满回忆的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️是否真正需要？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-夺回被占据的空间和能量&quot;&gt;&lt;a href=&quot;#2-夺回被占据的空间和能量&quot; class=&quot;headerlink&quot; title=&quot;2.夺回被占据的空间和能量&quot;&gt;&lt;/a&gt;2.夺回被占据的空间和能量&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一旦开始着手收拾了，首先就要面对物品杂乱的现状。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自己居住的地方一直以来竟堆积了那么多垃圾和废物，到底在这些废物身上浪费了多少时间、空间和管理维护的能量，真是不可知。除此之外，恐怕也没少花钱。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最初的阶段是舍，要彻底地筛选物品。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“把这个东西送给用得上它的人吧”、“这东西就算留下来也没有任何人会用它”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;依靠这类形式做出明确的选择。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如此反复下去，身边就会只留下适量的物品，让你“自己能够掌控”。包括你能掌控所有在你身边的物品的位置，以及确保它们能够物尽其用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;到这个阶段，你家终于从“仓库”变为“住所”，在这以前，你的家到处充斥着用不着的破烂儿，就算你把它们收拾地再整齐，也没有任何意义。实施收纳术，应该从这个阶段之后开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;和自己喜欢的东西在一起。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;让身边的物品保持优胜劣汰的自然循环，既留下适度的量，又确保留下的都是精挑细选过的，那么就会将物品的丢弃程度降到最低。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这样一来，你的居住空间里放着的，都是自己最重要的东西了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这就是不收拾的收拾法的最终形态。换句话说，这已经是一个连收纳物都不需要的“自在空间”了，对你来说最为舒适自在。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;扔掉家里的一件垃圾，这个简单的动作就能磨砺你的内在智慧。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过有意识的选择，让物品自然而然地回归到它应该在的地方，回归到需要它的地方。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-实践&quot;&gt;&lt;a href=&quot;#3-实践&quot; class=&quot;headerlink&quot; title=&quot;3.实践&quot;&gt;&lt;/a&gt;3.实践&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.大中小三分法（不断重复三分法）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.提高收拾动机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️重视健康及安全&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从生存的基本场所做起。吃饭、睡觉、排泄的场所，比如厨房、卧室、厕所、浴室、洗脸台等等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️希望能作用于心理深层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;即使打扫干净也没人会发现，但自己知道并总是在意的场所。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️重视运气&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要想让家庭整体运气上升的话就选玄关，希望能先提升自己的运气的话就选卧室。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.物品形态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只需一个动作：拿出物品只有打开柜门，取出物品两个动作，会减少物品归位的压力。【也就是排除造成惰性的阻碍】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自立：让收纳工具里的东西不管任何时候都能“立起来”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自由：方便选择物品。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自在：立不起来的物品要卷起来，自在的放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每次主义：需要的时候再买。【不要捡便宜和囤货，着眼当下，只购买当季、新鲜的物品】&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-变化&quot;&gt;&lt;a href=&quot;#4-变化&quot; class=&quot;headerlink&quot; title=&quot;4.变化&quot;&gt;&lt;/a&gt;4.变化&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;◀️自动整理：因为断舍离之后达到了“需要、合适、舒服”的状态，所以维护住所和生活的舒适有序变成了理所当然、自动化的事。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️利用物品不断提升自己。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️通过留下的物品审视自己。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;试着使用高于自我形象的物品：每天在用的东西非常容易作用于潜意识，使用高品质的物品将潜意识的自我形象也提高了。用物品帮助自己变成想要的样子。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️断舍离并非提倡节约的生活：强调当季的新鲜物品。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀️更多看不见的变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.通过断舍离自我肯定、恢复自信，确定自己本身的价值观。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.通过断舍离消除“碍事”的东西，减轻心理压力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.接受来自未知世界的支援：运气。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.从“拥有”的观念解放出来：尽情享受与物品的短暂相遇,新陈代谢。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p style=&quot;border: 5px groove #A2B5CD;padding:3px&quot;&gt;&lt;br&gt;“断舍离”是从根本上反思自己与物品的关系，对物品进行简化、取舍，为人们省出整理的时间、空间、劳力和精力。&lt;br&gt; 断舍离的主角并不是物品，而是自己，而时间轴永远都是现在。选
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>写给大家看的设计书</title>
    <link href="http://yoursite.com/2016/08/11/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/"/>
    <id>http://yoursite.com/2016/08/11/读书生活/写给大家看的设计书/</id>
    <published>2016-08-11T02:53:00.000Z</published>
    <updated>2016-08-15T05:49:30.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;四大基本原则-CRAP&quot;&gt;&lt;a href=&quot;#四大基本原则-CRAP&quot; class=&quot;headerlink&quot; title=&quot;四大基本原则-CRAP&quot;&gt;&lt;/a&gt;四大基本原则-CRAP&lt;/h3&gt;&lt;h3 id=&quot;亲密性&quot;&gt;&lt;a href=&quot;#亲密性&quot; class=&quot;headerlink&quot; title=&quot;亲密性&quot;&gt;&lt;/a&gt;亲密性&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;彼此相关的项应当靠近，归组在一起。如果多个项相互之间存在很近的亲密性，它们就会成为一个视觉单元，而不是多个孤立的元素。这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;亲密性原则是指： 将相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样一来，相关的项将被看做凝聚为一体的一个组，将不再是彼此无关的片段。物理位置的接近就意味存在着关联。亲密性的根本目的是实现组织性。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要有意识地注意你是怎样阅读的，你的视线怎样移动： 从哪里开始；沿着怎样的路径；到哪里结束；读完之后，接下来看哪里？整个过程应当是一个合理的过程，有确定的开始，而且要有确定的结束。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如何实现？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;微微眯起眼睛，统计你的眼睛停顿的次数来数一数页面上有多少个元素。如果页面上的项超过 3~5 个（当然这取决于具体情况），就要看看哪些孤立的元素可以归在一组建立更近的亲密性，使之成为一个视觉单元。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要避免的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要仅仅因为有空白就把元素放在角落或者中央；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;避免一个页面上有太多鼓励的元素；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要在元素之间留出同样大小的空白，除非各组同属于一个子集。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;标题、子标题、图标标题、图片能否归入其相关材料？在这个问题上一定要非常清楚（哪怕有一点含糊都要尽量避免）。在有很近亲密性的元素之间建立关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同属一组的元素之间不要建立关系！如果元素彼此无关，要把它们分开。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对齐&quot;&gt;&lt;a href=&quot;#对齐&quot; class=&quot;headerlink&quot; title=&quot;对齐&quot;&gt;&lt;/a&gt;对齐&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;任何东西都不能在页面上随意安放。 每个元素都应当与页面上的另一个元素有某种视觉联系。建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对齐原则是指：任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;居中对其会创建一种更正式、更稳重的外观。这种外观显得更为中规中矩，但通常也很乏味。大多数看起来精巧的设计都没有采用居中对齐。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;页面上只使用一种文本对齐，所有文本都左对齐，或右对齐，或者全部居中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有时，你可能喜欢在同一个页面上同时使用右对齐或者左对齐文本，不过一定要确保让这些文本以某种方式对齐！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*找到一条明确的对齐线，并坚持以它为基准。*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果设计中的对齐很明确，那么可以有意识地打破对齐，而且一定要表现出这是有意的，技巧就在于，打破常规对齐时不要怯弱，一定要干脆一些。要么全部采用一种方式，要么全部不采用这种方式。千万不要保守。在打破规则之前必须清楚规则是什么。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对齐的根本目的设计使页面统一且有条理。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重复&quot;&gt;&lt;a href=&quot;#重复&quot; class=&quot;headerlink&quot; title=&quot;重复&quot;&gt;&lt;/a&gt;重复&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;让设计中的视觉要去在整个作品中重复出现。可以重复颜色、形状、材质 、空间关系、线宽、字体、大小和图片，等等。 增加条理性，加强统一性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;重复原则：设计的某些方面需要在整个作品中重复。读者能看到的任何方面都可以作为重复元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;新手要把重复的概念更进一步，把无意的重复变为有意，利用重复将一系列出版物从视觉上系为一体。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重复不知识自然的一致，这是一种统一设计各个部分的有意识的行为。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设计中视觉原速度额重复可以将作品中的各部分连在一起，从而统一并增强整个作品,否则这些部分知识彼此孤立的单元。重复不仅对只有一页的作品很有用，对于多页文档的设计更显重要（一致性）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重复的目的就是统一，并增强视觉效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如何做呢，需要把现有的一致性更向前推进一步。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要避免太多地重复一个元素，重复太多会让人讨厌。要注意对比的价值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对比的基本思想是，要避免页面上的元素太过相似。如果元素（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让它们截然不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;要想实现有效的对比，对比就必须强烈，千万不要畏畏缩缩。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果两个项不完全相同，就应当使之不同，而且应当是截然不同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对比的根本目的一是增强页面的效果，另一个有助于信息的组织。不要犹豫，如果你想形成对比，就加大力度。不要将一种粗线与一种更粗的线进行对比。不要讲棕色文本与黑色标题建立对比。要避免使用两种或多种类似的字体。如果各个项不完全一样，干脆让它截然相反！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;四大基本原则-CRAP&quot;&gt;&lt;a href=&quot;#四大基本原则-CRAP&quot; class=&quot;headerlink&quot; title=&quot;四大基本原则-CRAP&quot;&gt;&lt;/a&gt;四大基本原则-CRAP&lt;/h3&gt;&lt;h3 id=&quot;亲密性&quot;&gt;&lt;a href=&quot;#亲密性&quot; class=&quot;he
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS代码风格</title>
    <link href="http://yoursite.com/2016/08/09/%E5%85%B6%E4%BB%96/iOS%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>http://yoursite.com/2016/08/09/其他/iOS代码风格/</id>
    <published>2016-08-09T10:06:01.000Z</published>
    <updated>2016-08-09T10:06:59.000Z</updated>
    
    <content type="html">&lt;h5 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;===多用字面量语法，少用与之等价的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;推荐：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//字面量令代码中更为整洁 NSNumber * someNumber = @1; NSArray   * someArray = @[@&amp;quot;1&amp;quot;,@&amp;quot;2&amp;quot;]; NSDictionary * someDictionary = @&amp;#123;@&amp;quot;one&amp;quot;:@1,@&amp;quot;two&amp;quot;:@2&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//取值 NSString * one = someArray[0]; NSNumber * oneNumber = someDictionary[@&amp;quot;one&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===多用类型常量，少用#define预处理指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define YANG_ANIMATION_DURATION 0.5  // 转换为static const NSTimeInterval yangAnimationDuration = 0.3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当然我们用到更多的是在编译单元之外的&amp;quot;全局符号表&amp;quot;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// .m 文件中 NSString * const LoginMethod =  @&amp;quot;loginRequestHandler&amp;quot;;  // .h 文件中 UIKIT_EXTERN NSString * const LoginMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要用预处理指令定义常量。 这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换操作，即使有人重新定义了常量值，编译器也不会产生，导致应用程序中的常量值不一致。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在实现文件中使用 static const 来定义“只在编译单元内可见的常量”；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;头文件中使用 UIKIT_EXTERN来声明全局常量，并在相关实现文件中定义其值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===用枚举表示状态、选项、状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当使用 enum 的时候，建议使用新的固定的基础类型定义，因它有更强大的的类型检查和代码补全。 SDK 现在有一个宏来鼓励和促进使用固定类型定义 - NS_ENUM()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef NS_ENUM(NSUInteger, YangMachineState) &amp;#123;      YangMachineStateNone,      YangMachineStateIdle,      YangMachineStateRunning,      YangMachineStatePaused&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在处理枚举类型的switch 语句中不要实现default分支。这样的话，假如新枚举之后编译器就会提示我们开发者：switch 语句并未处理所有枚举。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===推荐的代码书写方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!error) &amp;#123;    return success;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!error)    return success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!error) return success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)someMethod &amp;#123;  if (![someOther boolValue]) &amp;#123;      return;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Do something important&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)someMethod &amp;#123;  if ([someOther boolValue]) &amp;#123;    //Do something important  &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([myValue isEqual:@42]) &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([@42 isEqual:myValue]) &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (someObject) &amp;#123; ...if (![someObject boolValue]) &amp;#123; ...if (!someObject) &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (someObject == YES) &amp;#123; ... // Wrongif (myRawValue == YES) &amp;#123; ... // Never do this.if ([someObject boolValue] == NO) &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)someMethod &amp;#123;  if (![someOther boolValue]) &amp;#123;      return;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Do something important&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)someMethod &amp;#123;  if ([someOther boolValue]) &amp;#123;    //Do something important  &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL nameContainsSwift  = [sessionName containsString:@&amp;quot;Swift&amp;quot;];BOOL isCurrentYear      = [sessionDateCompontents year] == 2014;BOOL isSwiftSession     = nameContainsSwift &amp;amp;&amp;amp; isCurrentYear;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (isSwiftSession) &amp;#123;    // Do something very cool&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = a &amp;gt; b ? x : y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = a &amp;gt; b ? x = c &amp;gt; d ? c : d : y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = object ? : [self createObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = object ? object : [self createObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Case Statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case的几种形式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (condition) &amp;#123;    case 1:        // ...        break;    case 2: &amp;#123;        // ...        // Multi-line example using braces        break;       &amp;#125;    case 3:        // ...        break;    default:         // ...        break;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (condition) &amp;#123;    case 1:    case 2:        // code executed for values 1 and 2        break;    default:         // ...        break;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;When using an enumerated type for a switch, default is not needed. For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (menuType) &amp;#123;    case ZOCEnumNone:        // ...        break;    case ZOCEnumValue1:        // ...        break;    case ZOCEnumValue2:        // ...        break;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIButton *settingsButton;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIButton *setBut;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const NSTimeInterval fadeOutTime = 0.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static NSString * const ZOCCacheControllerDidClearCacheNotification = @&amp;quot;ZOCCacheControllerDidClearCacheNotification&amp;quot;;static const CGFloat ZOCImageThumbnailHeight = 50.0f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define CompanyName @&amp;quot;Apple Inc.&amp;quot;#define magicNumber 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Methods:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setExampleText:(NSString *)text image:(UIImage *)image;- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;- (id)viewWithTag:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setT:(NSString *)text i:(UIImage *)image;- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;- (id)taggedView:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;- (instancetype)initWith:(int)width and:(int)height;  // Never do this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;init methods should be structured like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&amp;#123;    self = [super init]; // call the designated initializer    if (self) &amp;#123;        // Custom initialization    &amp;#125;    return self;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Designated and Secondary Initializers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation ZOCEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTitle:(NSString *)title                         date:(NSDate *)date                     location:(CLLocation *)location&amp;#123;    self = [super init];    if (self) &amp;#123;        _title    = title;        _date     = date;        _location = location;    &amp;#125;    return self;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTitle:(NSString *)title                         date:(NSDate *)date&amp;#123;    return [self initWithTitle:title date:date location:nil];&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTitle:(NSString *)title&amp;#123;    return [self initWithTitle:title date:[NSDate date] location:nil];&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A typical example is whether you create a UIViewController subclass overriding initWithNibName:bundle::&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation ZOCViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&amp;#123;    // call to the superclass designated initializer    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];    if (self) &amp;#123;        // Custom initialization    &amp;#125;    return self;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Let&amp;apos;s see an example of the correct way to implement this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation ZOCNewsViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithNews:(ZOCNews *)news&amp;#123;    // call to the immediate superclass&amp;apos;s designated initializer    self = [super initWithNibName:nil bundle:nil];    if (self) &amp;#123;        _news = news;    &amp;#125;    return self;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Override the immediate superclass&amp;apos;s designated initializer- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&amp;#123;    // call the new designated initializer    return [self initWithNews:nil];&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedInstance&amp;#123;   static id sharedInstance = nil;   static dispatch_once_t onceToken = 0;   dispatch_once(&amp;amp;onceToken, ^&amp;#123;      sharedInstance = [[self alloc] init];   &amp;#125;);   return sharedInstance;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The use of dispatch_once(), which is synchronous, replaces the following, yet obsolete, idiom:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedInstance&amp;#123;    static id sharedInstance;    @synchronized(self) &amp;#123;        if (sharedInstance == nil) &amp;#123;            sharedInstance = [[MyClass alloc] init];        &amp;#125;    &amp;#125;    return sharedInstance;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString* text;NSString * text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.backgroundColor = [UIColor orangeColor];[UIApplication sharedApplication].delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view setBackgroundColor:[UIColor orangeColor]];UIApplication.sharedApplication.delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Property Declaration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, readwrite, copy) NSString *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In order to achieve a public getter and a private setter, you can declare the public property as readonly and re-declare the same property in the the class extension as readwrite:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass : NSObject@property (nonatomic, readonly) NSObject *object@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass ()@property (nonatomic, readwrite, strong) NSObject *object@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Private Properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface ZOCViewController ()@property (nonatomic, strong) UIView *bannerView;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Lazy Loading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSDateFormatter *)dateFormatter &amp;#123;  if (!_dateFormatter) &amp;#123;    _dateFormatter = [[NSDateFormatter alloc] init];        NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&amp;quot;en_US_POSIX&amp;quot;];        [dateFormatter setLocale:enUSPOSIXLocale];        [dateFormatter setDateFormat:@&amp;quot;yyyy-MM-dd&amp;apos;T&amp;apos;HH:mm:ss.SSSSS&amp;quot;];  &amp;#125;  return _dateFormatter;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A complete pattern for the isEqual* method should be as so:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isEqual:(id)object &amp;#123;    if (self == object) &amp;#123;      return YES;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (![object isKindOfClass:[ZOCPerson class]]) &amp;#123;      return NO;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return [self isEqualToPerson:(ZOCPerson *)object];&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isEqualToPerson:(Person *)person &amp;#123;    if (!person) &amp;#123;        return NO;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL namesMatch = (!self.name &amp;amp;&amp;amp; !person.name) ||                       [self.name isEqualToString:person.name];    BOOL birthdaysMatch = (!self.birthday &amp;amp;&amp;amp; !person.birthday) ||                           [self.birthday isEqualToDate:person.birthday];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return haveEqualNames &amp;amp;&amp;amp; haveEqualBirthdays;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSDate (ZOCTimeExtensions)- (NSString *)zoc_timeAgoShort;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSDate (ZOCTimeExtensions)- (NSString *)timeAgoShort;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSDate : NSObject &amp;lt;NSCopying, NSSecureCoding&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (readonly) NSTimeInterval timeIntervalSinceReferenceDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSDate (NSDateCreation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)date;+ (instancetype)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;+ (instancetype)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti;+ (instancetype)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;+ (instancetype)dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate *)date;// ...@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Beautifying the code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (user.isHappy) &amp;#123;    //Do something&amp;#125;else &amp;#123;    //Do something else&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (user.isHappy)&amp;#123;  //Do something&amp;#125; else &amp;#123;  //Do something else&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[UIView animateWithDuration:1.0                 animations:^&amp;#123;                     // something                 &amp;#125;                 completion:^(BOOL finished) &amp;#123;                     // something                 &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Preferred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[UIView animateWithDuration:1.0 animations:^&amp;#123;    // something &amp;#125; completion:^(BOOL finished) &amp;#123;    // something&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSURL *url = (&amp;#123;    NSString *urlString = [NSString stringWithFormat:@&amp;quot;%@/%@&amp;quot;, baseURLString, endpoint];    [NSURL URLWithString:urlString];&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;warning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (float)divide:(float)dividend by:(float)divisor&amp;#123;    #warning Dude, don&amp;apos;t compare floating point numbers like this!    if (divisor != 0.0) &amp;#123;        return (dividend / divisor);    &amp;#125;    else &amp;#123;        return NAN;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发流程</title>
    <link href="http://yoursite.com/2016/08/09/iOS/iOS%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/08/09/iOS/iOS开发流程/</id>
    <published>2016-08-09T07:28:26.000Z</published>
    <updated>2016-08-09T09:17:07.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是证书&quot;&gt;&lt;a href=&quot;#什么是证书&quot; class=&quot;headerlink&quot; title=&quot;什么是证书&quot;&gt;&lt;/a&gt;什么是证书&lt;/h3&gt;&lt;p&gt;由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书&lt;/p&gt;
&lt;h3 id=&quot;什么时候需要证书&quot;&gt;&lt;a href=&quot;#什么时候需要证书&quot; class=&quot;headerlink&quot; title=&quot;什么时候需要证书&quot;&gt;&lt;/a&gt;什么时候需要证书&lt;/h3&gt;&lt;p&gt;只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名&lt;/p&gt;
&lt;h3 id=&quot;证书如何获得&quot;&gt;&lt;a href=&quot;#证书如何获得&quot; class=&quot;headerlink&quot; title=&quot;证书如何获得&quot;&gt;&lt;/a&gt;证书如何获得&lt;/h3&gt;&lt;p&gt;首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 provisioning portal 提交公钥后换取, 后续证书在使用时会验证本地私钥&lt;br&gt;1在Mac系统中进入”钥匙窜访问”,选择“钥匙串访问”-“证书助理”-“从证书颁发机构请求证书”,将相关请求文件保存到桌面。已做后续上传之用。&lt;br&gt;2.在production处点击添加，导入刚才生成的文件，会生成相应的证书，下载到桌面双击安装。重新回到开发者中心Member Center,在“Identifiers”-“App IDs”中创建一个应用对应的App ID，当前使用的是Explicit App ID。&lt;br&gt;3.在Provisioning Profiles中添加一个与刚刚创建的AppID相应的Profile，选择“In House”（此处类型可根据需要选择）创建的Provisioning File选择刚刚创建的App ID:&lt;br&gt;创建并生成Profile后，下载到本地，双击打开，添加到资料库中,然后&lt;br&gt;4.Xcode在Build Phases中找到Code Signing，把Provisioning File设置刚才创建描述文件.在Coding Signing Identity选择Distribution：然后在xcode中选择product –archive进行导出ipa文件，导出以后可进行安装。&lt;/p&gt;
&lt;h3 id=&quot;我生成的私钥如何共享给团队成员&quot;&gt;&lt;a href=&quot;#我生成的私钥如何共享给团队成员&quot; class=&quot;headerlink&quot; title=&quot;我生成的私钥如何共享给团队成员&quot;&gt;&lt;/a&gt;我生成的私钥如何共享给团队成员&lt;/h3&gt;&lt;p&gt;在 Keychain Access 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 p12 证书后就完整包含了证书和私钥&lt;/p&gt;
&lt;h3 id=&quot;各流程中证书的需求情况&quot;&gt;&lt;a href=&quot;#各流程中证书的需求情况&quot; class=&quot;headerlink&quot; title=&quot;各流程中证书的需求情况&quot;&gt;&lt;/a&gt;各流程中证书的需求情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模拟器调试&lt;/p&gt;
&lt;p&gt; 不需要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;真机调试&lt;/p&gt;
&lt;p&gt;  描述文件(Provisioning Profiles)&lt;/p&gt;
&lt;p&gt;  开发者证书(ios_development.cer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打包和发布&lt;/p&gt;
&lt;p&gt;  描述文件(Provisioning Profiles)&lt;/p&gt;
&lt;p&gt;  可用于发布的开发者证书(ios_distribution.cer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息推送后端服务&lt;/p&gt;
&lt;p&gt;  apns 证书&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发中常见的证书及相关文件介绍&quot;&gt;&lt;a href=&quot;#开发中常见的证书及相关文件介绍&quot; class=&quot;headerlink&quot; title=&quot;开发中常见的证书及相关文件介绍&quot;&gt;&lt;/a&gt;开发中常见的证书及相关文件介绍&lt;/h3&gt;&lt;p&gt;CSR(certificate request) 文件&lt;br&gt;用于换取证书的公钥文件, 实际是在本地基于 RSA 加密得到配对的密钥, 私钥存于 Keychain Access 用于签名, 公钥作为换取证书的凭证&lt;/p&gt;
&lt;p&gt;开发者证书&lt;br&gt;由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种&lt;br&gt;cer 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 p12 文件&lt;/p&gt;
&lt;p&gt;生成方法&lt;br&gt;在 开发者中心 “certificates” 面板中添加 certificate 并上传刚刚生成的 CSR 文件, 获取 ios_development.cer&lt;/p&gt;
&lt;h3 id=&quot;几种常见的分发途径&quot;&gt;&lt;a href=&quot;#几种常见的分发途径&quot; class=&quot;headerlink&quot; title=&quot;几种常见的分发途径&quot;&gt;&lt;/a&gt;几种常见的分发途径&lt;/h3&gt;&lt;p&gt;ad-hoc&lt;br&gt;打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&amp;amp;url=&lt;a href=&quot;https://example.com/manifest.plist&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://example.com/manifest.plist&lt;/a&gt;) 完成安装,最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道.&lt;/p&gt;
&lt;p&gt;in-house&lt;br&gt;针对企业内部用户进行分发, 相比 ad-hoc 无安装量上限&lt;br&gt;iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装 &lt;a href=&quot;https://support.apple.com/en-us/HT204245&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://support.apple.com/en-us/HT204245&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TestFlight&lt;br&gt;仅支持 iOS8.0 以上, 不需要对设备 udid 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 TestFlight 客户端&lt;br&gt;这种方式非常便于推送应用更新和收集测试信息&lt;/p&gt;
&lt;p&gt;导出 ipa 包, 越狱安装&lt;br&gt;如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 itools 等第三方工具安装&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是证书&quot;&gt;&lt;a href=&quot;#什么是证书&quot; class=&quot;headerlink&quot; title=&quot;什么是证书&quot;&gt;&lt;/a&gt;什么是证书&lt;/h3&gt;&lt;p&gt;由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>观呼吸</title>
    <link href="http://yoursite.com/2016/08/09/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E8%A7%82%E5%91%BC%E5%90%B8/"/>
    <id>http://yoursite.com/2016/08/09/读书生活/观呼吸/</id>
    <published>2016-08-09T01:49:08.000Z</published>
    <updated>2016-08-09T03:48:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从现在开始坚持一个月时间，每天练习最少5分钟，你会发现的注意力会有明显的变化。&lt;/p&gt;
&lt;p&gt;自从你开始了你的瑜伽练习之后，你就会知道一点，那就是瑜伽呼吸。很多人都知道，在练习瑜伽时要集中注意力，观察自己的呼吸，都明白呼吸在瑜伽练习中的地位，可是，如何能做到这一点，如何能在练习中集中自己的注意力，观察自己的呼吸呢，这是很多人的难题？&lt;/p&gt;
&lt;p&gt;呼吸是我们人类最基础的本能，没有呼吸就没有生命。然而，现代生活的快节奏和压力，让不正确的呼吸方法影响着我们的健康和身心。&lt;/p&gt;
&lt;p&gt;初学瑜伽的人很难将呼吸和冥想维持在一个小时以上，这就说明要想控制自己的身心是一件非常困难的事。&lt;/p&gt;
&lt;p&gt;很普遍的现象是，多数人在练习冥想和呼吸时，思绪四处飘荡。我在练习瑜伽时将近有一年的时间处于这种状态，练习时很难集中自己的注意力，练习的效果不明显。在这个过程中，我有意思地去练习，坚持到现在，已经逐步地改善，懂得了如何去观察自己的呼吸，让瑜伽呼吸成了一件很自然的调节自己的方式。&lt;/p&gt;
&lt;p&gt;其实方法并不难，首先，在练习之初，你可以在一天24小时中不同的时候去观察自己的呼吸，哪怕1分钟或更短，只要开始去做，你就会发现变化的。你每天去观察，将观察日常化。&lt;/p&gt;
&lt;p&gt;怎样的呼吸是很自然的，知道自己的情绪和精神状态，你会发现，你身心状态的不同，你的呼吸是有变化的，激动紧张的时候，你的呼吸是急促的，首先你只要去注意不同状态下的呼吸，你就会意识到你自己的心理、精神和身体的变化，如果遇上这样的状况，你只需停下来，引导自己放慢呼吸速度，让呼吸开始变得平稳有节奏，自我调节身心，那么，你已经开始学会了观察了，难点在于，你要意思到自己的不良状态，当你意思到以后，你已经大大地进了一步。&lt;/p&gt;
&lt;p&gt;其次，你就可以开始有意思地逐步练习，方法很多：&lt;/p&gt;
&lt;p&gt;1、最简单的方法，你只要找一个舒适的姿势，闭上眼睛，缓慢地呼吸，完全放松，让自己的呼吸自然就好，这个方法是让你养成一个良好的呼吸方法。&lt;/p&gt;
&lt;p&gt;2、数数是最常见的方法之一：以一个呼吸为单位，一呼一吸为一个单位，吸气为5下，那么呼气也为5下，你在心里默数，每天坚持练习，时间不用很长，随着你练习的深入，你可以将呼吸放慢，做到10下，以后逐步做到呼气比吸气稍长点。坚持练习，你会发现美妙的变化的。&lt;/p&gt;
&lt;p&gt;3、开始好奇地观察你的呼吸，去观察你身体的哪些部位能感觉到呼吸（鼻孔？喉咙？胸部，腹部？），感觉气体如何进入到你的身体？感觉呼吸的深度？呼吸流畅吗？感觉腹部的起伏。&lt;/p&gt;
&lt;p&gt;4、可以开始更深的观察，去感觉你的呼吸的质量，是顺畅还是困难？是浅还是深？观察的时候要有耐心，你只要大概的了解就好，不要强迫自己，不要担心自己的方式是否正确，你只要观察，让呼吸自然有节奏就好。&lt;/p&gt;
&lt;p&gt;5、去观察吸气和呼气的不同，吸气是饱满的，呼气是深长的，我还遇到过一种现象，有的学员问我，我怎么在练习瑜伽呼吸以后，腹部变大了，这是因为在练习的时候，只注意了吸气，她的吸气是饱满扩张的，而却忘了呼气的深长，没有达到底端，呼气时收缩腹部，尽量排空体内的气体，要注意观察吸气和呼气的长短。&lt;/p&gt;
&lt;p&gt;6、感觉一吸一呼之间的身体的放松，让自己沉静在缓慢深长的呼吸中，停止了纷乱的思绪。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从现在开始坚持一个月时间，每天练习最少5分钟，你会发现的注意力会有明显的变化。&lt;/p&gt;
&lt;p&gt;自从你开始了你的瑜伽练习之后，你就会知道一点，那就是瑜伽呼吸。很多人都知道，在练习瑜伽时要集中注意力，观察
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS-事件</title>
    <link href="http://yoursite.com/2016/08/08/iOS/iOS-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/08/08/iOS/iOS-事件/</id>
    <published>2016-08-08T11:02:47.000Z</published>
    <updated>2016-08-09T01:03:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;事件分类&quot;&gt;&lt;a href=&quot;#事件分类&quot; class=&quot;headerlink&quot; title=&quot;事件分类&quot;&gt;&lt;/a&gt;事件分类&lt;/h3&gt;&lt;p&gt;对于 iOS 设备用户来说，他们操作设备的方式主要有三种：触摸屏幕、晃动设备、通过遥控设施控制设备。对应的事件类型有以下三种：&lt;/p&gt;
&lt;p&gt;触屏事件（Touch Event）&lt;br&gt;运动事件（Motion Event）&lt;br&gt;远端控制事件（Remote-Control Event）&lt;/p&gt;
&lt;h3 id=&quot;响应者链&quot;&gt;&lt;a href=&quot;#响应者链&quot; class=&quot;headerlink&quot; title=&quot;响应者链&quot;&gt;&lt;/a&gt;响应者链&lt;/h3&gt;&lt;p&gt;当发生事件响应时，必须知道由谁来响应事件。在 iOS 中，由响应者链来对事件进行响应。&lt;/p&gt;
&lt;p&gt;所有事件响应的类都是 UIResponder 的子类，响应者链是一个由不同对象组成的层次结构，其中的每个对象将依次获得响应事件消息的机会。当发生事件时，事件首先被发送给第一响应者，第一响应者往往是事件发生的视图，也就是用户触摸屏幕的地方。事件将沿着响应者链一直向下传递，直到被接受并做出处理。一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件被交由它处理，如果它不处理，事件就会被传递给它的视图控制器对象 ViewController（如果存在），然后是它的父视图（superview）对象（如果存在），以此类推，直到顶层视图。接下来会沿着顶层视图（top view）到窗口（UIWindow 对象）再到程序（UIApplication 对象）。如果整个过程都没有响应这个事件，该事件就被丢弃。一般情况下，在响应者链中只要由对象处理事件，事件就停止传递。&lt;/p&gt;
&lt;p&gt;一个典型的事件响应路线如下：&lt;/p&gt;
&lt;p&gt;First Responser –&amp;gt; The Window –&amp;gt; The Application –&amp;gt; nil（丢弃）&lt;br&gt;我们可以通过 [responder nextResponder] 找到当前 responder 的下一个 responder，持续这个过程到最后会找到 UIApplication 对象。&lt;/p&gt;
&lt;p&gt;通常情况下，我们在 First Responder （一般也就是用户当前触控的 View ）这里就会响应请求，进入下面的事件分发机制。&lt;/p&gt;
&lt;h3 id=&quot;事件分发&quot;&gt;&lt;a href=&quot;#事件分发&quot; class=&quot;headerlink&quot; title=&quot;事件分发&quot;&gt;&lt;/a&gt;事件分发&lt;/h3&gt;&lt;p&gt;第一响应者（First responder）指的是当前接受触摸的响应者对象（通常是一个 UIView 对象），即表示当前该对象正在与用户交互，它是响应者链的开端。响应者链和事件分发的使命都是找出第一响应者。&lt;/p&gt;
&lt;p&gt;iOS 系统检测到手指触摸 (Touch) 操作时会将其打包成一个 UIEvent 对象，并放入当前活动 Application 的事件队列，单例的 UIApplication 会从事件队列中取出触摸事件并传递给单例的 UIWindow 来处理，UIWindow 对象首先会使用 hitTest:withEvent:方法寻找此次 Touch 操作初始点所在的视图(View)，即需要将触摸事件传递给其处理的视图，这个过程称之为 hit-test view。&lt;/p&gt;
&lt;p&gt;hitTest:withEvent:方法的处理流程如下:&lt;/p&gt;
&lt;p&gt;首先调用当前视图的 pointInside:withEvent: 方法判断触摸点是否在当前视图内；&lt;br&gt;若返回 NO, 则 hitTest:withEvent: 返回 nil，若返回 YES, 则向当前视图的所有子视图 (subviews) 发送 hitTest:withEvent: 消息，所有子视图的遍历顺序是从最顶层视图一直到到最底层视图，即从 subviews 数组的末尾向前遍历，直到有子视图返回非空对象或者全部子视图遍历完毕；&lt;br&gt;若第一次有子视图返回非空对象，则 hitTest:withEvent: 方法返回此对象，处理结束；&lt;br&gt;如所有子视图都返回空，则 hitTest:withEvent: 方法返回自身 (self)。&lt;br&gt;一个示例性的代码实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *touchView = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ([self pointInside:point withEvent:event] &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (!self.hidden) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       self.userInteractionEnabled &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (self.alpha &amp;gt;= 0.01f)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (UIView *subView in self.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subview convertPoint:point fromView:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            UIView *subTouchView = [subView hitTest:subPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (subTouchView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                touchView = subTouchView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        touchView = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return touchView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;p&gt;如果最终 hit-test 没有找到第一响应者，或者第一响应者没有处理该事件，则该事件会沿着响应者链向上回溯，如果 UIWindow 实例和 UIApplication 实例都不能处理该事件，则该事件会被丢弃（这个过程即上面提到的响应值链）；&lt;br&gt;hitTest:withEvent: 方法将会忽略隐藏 (hidden=YES) 的视图，禁止用户操作 (userInteractionEnabled=NO) 的视图，以及 alpha 级别小于 0.01(alpha&amp;lt;0.01)的视图。如果一个子视图的区域超过父视图的 bound 区域(父视图的 clipsToBounds 属性为 NO，这样超过父视图 bound 区域的子视图内容也会显示)，那么正常情况下对子视图在父视图之外区域的触摸操作不会被识别, 因为父视图的 pointInside:withEvent: 方法会返回 NO, 这样就不会继续向下遍历子视图了。当然，也可以重写 pointInside:withEvent: 方法来处理这种情况。&lt;br&gt;我们可以重写 hitTest:withEvent: 来达到某些特定的目的。&lt;br&gt;CYLTabBarController是一个支持自定义 Tab 控件的开源项目。在 TabBar 当中，为了支持 TabBar 按钮大小超过 TabBar Frame 范围时也可以响应，它的实现就是重载了 hitTest 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Capturing touches on a subview outside the frame of its superview&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!self.clipsToBounds &amp;amp;&amp;amp; !self.hidden &amp;amp;&amp;amp; self.alpha &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (UIView *subview in self.subviews.reverseObjectEnumerator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CGPoint subPoint = [subview convertPoint:point fromView:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            UIView *result = [subview hitTest:subPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (result != nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到和上面的示例代码的差距，主要就在于取消了 pointInside 函数的检测，让我们可以捕获到当前 Frame 范围以外的子 View 的触控事件。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件分类&quot;&gt;&lt;a href=&quot;#事件分类&quot; class=&quot;headerlink&quot; title=&quot;事件分类&quot;&gt;&lt;/a&gt;事件分类&lt;/h3&gt;&lt;p&gt;对于 iOS 设备用户来说，他们操作设备的方式主要有三种：触摸屏幕、晃动设备、通过遥控设施控制设备。对应的事件类型有以下三种
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>实例方法、类方法、Category、Protocol</title>
    <link href="http://yoursite.com/2016/08/08/iOS/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E3%80%81Category%E3%80%81Protocol/"/>
    <id>http://yoursite.com/2016/08/08/iOS/实例方法、类方法、Category、Protocol/</id>
    <published>2016-08-08T07:57:34.000Z</published>
    <updated>2016-08-11T01:54:00.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;实例方法&quot;&gt;&lt;a href=&quot;#实例方法&quot; class=&quot;headerlink&quot; title=&quot;实例方法&quot;&gt;&lt;/a&gt;实例方法&lt;/h3&gt;&lt;p&gt;以-开头的方法是实例方法。它属于类的某一个或某几个实例对象，即类对象必须实例化后才可以使用的方法.&lt;/p&gt;
&lt;h3 id=&quot;类方法&quot;&gt;&lt;a href=&quot;#类方法&quot; class=&quot;headerlink&quot; title=&quot;类方法&quot;&gt;&lt;/a&gt;类方法&lt;/h3&gt;&lt;p&gt;以+开头的方法是类方法。Objc中的类方法类似Java中的static静态方法，它是属于类本身的方法，不属于类的某一个实例对象，所以不需要实例化类，用类名即可使用.所以我们使用类方法一般有两种情况：&lt;br&gt;创建一些事物，比如特殊格式的字符串等。&lt;br&gt;作为工具方法，比如返回常数等。&lt;br&gt;OC 中的方法只要声明在 @interface里，就可以认为都是公有的。&lt;/p&gt;
&lt;h3 id=&quot;Category&quot;&gt;&lt;a href=&quot;#Category&quot; class=&quot;headerlink&quot; title=&quot;Category&quot;&gt;&lt;/a&gt;Category&lt;/h3&gt;&lt;p&gt;它可以让我们动态的在已经存在的类中添加新的行为，即方法。对类进行扩展时不需要访问其源码，也不需要创建子类。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Deck.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deck&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)randomDrawCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是类Deck的声明文件，其中包含一个实例方法randomDrawCard，如果我们想在不修改原始类、不增加子类的情况下，为该类增加一个drawCardFromTop方法，只需要定义两个文件Deck+DrawCardFromTop.h和Deck+DrawCardFromTop.m，在声明文件和实现文件中用()把Category的名称括起来即可，声明文件如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Deck+DrawCardFromTop.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Deck.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deck&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;DrawCardFromTop&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实现文件如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Deck+DrawCardFromTop.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Deck+DrawCardFromTop.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deck&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;DrawCardFromTop&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//TODO.....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DrawCardFromTop是Category的名称。这里一般使用约定俗成的习惯，将声明文件和实现文件统一采用”原类名+Category名”的方式命名。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用也非常简单，引入Category的声明文件，然后正常调用即可：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Deck+DrawCardFromTop.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Deck *deck = [[Deck alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card *card = [deck drawCardFromTop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Extension&quot;&gt;&lt;a href=&quot;#Extension&quot; class=&quot;headerlink&quot; title=&quot;Extension&quot;&gt;&lt;/a&gt;Extension&lt;/h3&gt;&lt;p&gt;Extension 可以认为是一种匿名的 Category， Extension 与 Category 有如下几点显著的区别：&lt;br&gt;使用 Extension 必须有原有类的源码&lt;br&gt;Extension 可以在类中添加新的属性和实例变量，Category 不可以（注：在 Category 中实际上可以通过运行时添加新的属性）&lt;br&gt;Extension 里添加的方法必须要有实现（没有实现编译器会给出警告）&lt;br&gt;Extension 很常见的用法，是用来给类添加私有的变量和方法，用于在类的内部使用。例如在 interface 中定义为 readonly 类型的属性，在实现中添加 extension，将其重新定义为 readwrite，这样我们在类的内部就可以直接修改它的值，然而外部依然不能调用 setter 方法来修改。示例代码如下（来自苹果官方文档）:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XYZPerson.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XYZPerson&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *uniqueIdentifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XYZPerson.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XYZPerson&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *uniqueIdentifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XYZPerson&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Protocol&quot;&gt;&lt;a href=&quot;#Protocol&quot; class=&quot;headerlink&quot; title=&quot;Protocol&quot;&gt;&lt;/a&gt;Protocol&lt;/h3&gt;&lt;p&gt;OC是单继承的，OC中的类可以实现多个 protocol 来实现类似 C++ 中多重继承的效果。&lt;/p&gt;
&lt;p&gt;Protocol 类似 Java 中的 interface，定义了一个方法列表，这个方法列表中的方法可以使用 @required， @optional 标注，以表示该方法是否是客户类必须要实现的方法。 一个 protocol 可以继承其他的 protocol 。&lt;/p&gt;
&lt;p&gt;@protocol TestProtocol&lt;nsobject&gt; // NSObject也是一个 Protocol，这里即继承 NSObject 里的方法&lt;br&gt;-(void)Print;&lt;br&gt;@end&lt;/nsobject&gt;&lt;/p&gt;
&lt;p&gt;@interface B : NSObject&lt;testprotocol&gt;&lt;br&gt;-(void)Print; // 默认方法是@required的，即必须实现&lt;br&gt;@end&lt;br&gt;Delegate（委托）是 Cocoa 中常见的一种设计模式，其实现依赖于 protocol 这个语言特性。&lt;/testprotocol&gt;&lt;/p&gt;
&lt;p&gt;简单来说，Protocol不属于任何一个类，它只是一个方法列表，任何类都可以对其中声明的方法进行实现。这种设计模式一般称为代理模式（delegation）。你可以通过Protocol定义各种行为，在不同的场景采用不同的实现方式。在iOS和OS X开发中，Apple采用了大量的代理模式来实现MVC中View和Controller的解耦。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Protocol有两种声明的方式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在单独的声明文件（.h文件）中声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在某个类的声明的文件中声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上两种方式视具体情况而定，但是在代码规范上都是一致的：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// HandleDeckDelegate.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HandleDeckDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)ShuffleDeck;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)CuttingDeck;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上述代码中有两个关键字，&lt;span class=&quot;keyword&quot;&gt;@required&lt;/span&gt;和&lt;span class=&quot;keyword&quot;&gt;@optional&lt;/span&gt;，表示如果要实现这个协议，那么ShuffleDeck方法是必须要实现的，CuttingDeck则是可选的，如果不注明，那么方法默认是&lt;span class=&quot;keyword&quot;&gt;@required&lt;/span&gt;的，必须实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么如何实现这个Protocol呢，很简单，创建一个普通的Objective-C类，如果Protocol使用单独的.h文件声明，那么在该类的.h声明文件中引入包含Protocol的.h文件，如果Protocol是声明在一个相关类中，那么就需要引入该类的.h文件。之后声明采用这个Protocol即可：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Deck.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;HandleDeckDelegate.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deck&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;HandleDeckDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)randomDrawCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用尖括号（&amp;lt;…&amp;gt;）括起来的HandleDeckDelegate就是我们创建的Protocol。如果要采用多个Protocol，可以在尖括号内引入多个Protocol名称，并用逗号隔开即可。例如&amp;lt;HandleDeckDelegate,xxxDelegate&amp;gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Deck.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Card.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deck&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//TODO.....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)ShuffleDeck&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//TODO.....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于CuttingDeck方法是可选的，所以我们只实现了ShuffleDeck。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用场景&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objective-C里的Protocol和Java语言中的接口很类似，如果一些类之间没有继承关系，但是又具备某些相同的行为，则可以使用Protocol来描述它们的关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同的类，可以遵守同一个Protocol，在不同的场景下注入不同的实例，实现不同的功能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要注意的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据约定，框架中后缀为Delegate的都是Protocol，例如&lt;span class=&quot;built_in&quot;&gt;UIApplicationDelegate&lt;/span&gt;，&lt;span class=&quot;built_in&quot;&gt;UIWebViewDelegate&lt;/span&gt;等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Protocol本身是可以继承的，比如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你要实现B，那么methodA和methodB都需要实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Protocol是与任何类都无关的，任何类都可以实现定义好的Protocol，如果我们想知道某个类是否实现了某个Protocol，那么我们可以用conformsToProtocol方法进行判断：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[obj conformsToProtocol:&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ProcessDataDelegate&lt;/span&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结&lt;br&gt;Protocol最常用的就是委托代理模式，Cocoa框架中大量采用了这种模式实现数据和UI的分离。例如UIView产生的所有事件，都是通过委托的方式交给Controller完成。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实例方法&quot;&gt;&lt;a href=&quot;#实例方法&quot; class=&quot;headerlink&quot; title=&quot;实例方法&quot;&gt;&lt;/a&gt;实例方法&lt;/h3&gt;&lt;p&gt;以-开头的方法是实例方法。它属于类的某一个或某几个实例对象，即类对象必须实例化后才可以使用的方法.&lt;/p&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
  <entry>
    <title>清醒思考的艺术</title>
    <link href="http://yoursite.com/2016/08/08/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://yoursite.com/2016/08/08/读书生活/清醒思考的艺术/</id>
    <published>2016-08-08T00:57:18.000Z</published>
    <updated>2016-08-09T01:02:00.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.幸存偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于日常生活中更容易看到成功、看不到失败，你会系统性地高估成功的希望。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[每位成功的作家背后都有100个作品卖不出去的作家，每个作品卖不出去的作家背后又有100个找不到出版社的作者，每个找不到出版社的作者背后又有数百个抽屉里沉睡着刚动笔的手稿的写作爱好者。而我们总是听到成功者的故事，认识不到作家的成功概率有多小。摄影师、企业家、艺术家、运动员、建筑师、诺贝尔奖得主、电视制作人和选美冠军的情况也是一样。媒体没兴趣去刨挖失败者的墓地，这事也不归他们负责。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.游泳选手身材错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;游泳选手之所以成为出色的游泳选手，是因为他们拥有这样的身材，他们的身材是一种选择标准，而不是他们运动的结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[模特儿天生丽质，因此才被选来拍化妆品广告，而不是化妆品让人漂亮。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.过度自信效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请对所有预测持怀疑态度，筹划任何事情都从悲观的角度出发。这样你才会真正有机会，更现实一些地判断形势。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.从众心理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.纠缠于沉没成本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你已经投资了什么并不重要，唯一重要的是现在的形势及你对未来的评估。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[电影很糟糕。1小时后我对妻子耳语说：“走吧，我们回家吧。”她回答：“肯定不行，我们不能白花30欧元买电影票。”“这算不上什么理由。”我抗议说，“30欧元已经花掉了，你在纠缠于沉没成本。”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;股市投资人经常成为沉没成本的受害者。他们在决定是否出售股票时常以买入价作为参照。当股价高于买入价时，就卖掉股票；如果股价低于买入价，就抱住不卖。这是不理智的，绝不可以让买入价处处扮演角色。唯一有效的是股市未来的前景（和可选投资未来的行情）。每个人都会出错，特别是在股市里。纠缠于沉没成本的不幸，其关键就是：你投资一只股票亏的钱越多，你越是抱紧它不放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;为什么会有这种荒谬行为呢？因为人类想努力表现得坚韧，坚韧是我们发出的可信信号。我们害怕矛盾。如果我们决定中断一个项目，我们就在制造矛盾：承认从前的想法与今天不同。继续执行一个无意义的项目是在推迟这一疼痛认识。那样我们就显得更坚韧。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.互惠偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我帮你，你帮我。在一开始就该拒绝别人的小恩小惠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[先赠予，再索取，这种温和的敲诈，在经济界广为流行。难怪超市中经常会有人让你免费品尝食物。先让你品尝，你就会感觉亏欠，很快就会购买。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某位美女在夜店不让别人请她喝饮料：“因为我不想要这种跟他上床的潜在义务。”这样做很明智。如果下回在超市里有人主动跟你搭讪，让你品尝葡萄酒、奶酪、火腿或橄榄，你就知道你为什么最好是拒绝他了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.确认偏误之一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;确认偏误是所有思维错误之父——它倾向于这样诠释新信息，让它们与我们现有的理论、世界观和信念相兼容。也就是过滤掉与我们的现有观点相矛盾的新信息。遇到「特殊情况」这个词，要格外小心，有意识地寻找反驳证据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[这里再举几个例子。我们大家都被迫就世界、生活、经济、投资、事业等提出种种理论。没有假设不行，可一种理论越是模糊，确认偏误就越强。谁在生活中抱有“人是善良的”想法，他会找到这一理论的足够证明；谁在生活中抱有“人是邪恶的”想法，他同样也能找到足够证明。慈善家和愤世嫉俗者，双方都将过滤掉反驳证据（相反的证据），得到支撑他们世界观的大量证明。 占星学家和经济学家的行事原则也是一样。他们的说法如此含糊，它们像磁铁一样吸引证明，例如“接下来的几星期你会经历悲伤的瞬间”、“中期看，美元存在贬值压力”。什么叫作中期？什么是贬值压力？与什么比会贬值——黄金、日元、比索、小麦、柏林克罗伊兹贝格区的房产还是咖喱烤肠的价格？ 宗教信念和哲学信念因其含糊性更是确认偏误的杰出温床，它在这里疯狂地滋生。信徒们一步步看到神存在的证明。神不直接现身——除了向沙漠里和偏僻山村里的文盲现身，从不出现在法兰克福或纽约这样的都市里——这表明确认偏误是多么强大，就连最有力的异议也被过滤掉了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.确认偏误之二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请你与确认偏误作斗争。请你写下你的信条——有关世界观、投资、婚姻、健康预防措施、节食、成功策略的，然后寻找反驳证据。干掉自己最心爱的理论，这是一桩艰苦的工作，但作为聪明人士，你不会躲避的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[很多写文章的作者（或记者）为了支持其观点，就会去找出几个“确认证据”，而他不会努力去挖掘反驳证据，所以说很多成功指南的书籍也是这样写出来的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;确认偏误是所有思维错误之父——它倾向于这样诠释新信息，让它们与我们现有的理论、世界观和信念相兼容。换句话说：我们过滤掉与我们的现有观点相矛盾（因此被称作反驳证据，不过它缺少合适的德语表达）的新信息。这是危险的。赫胥黎说过：“事实不因为被忽视而消失。”但我们恰恰是这么做的。投资大师沃伦·巴菲特也知道这一点，“人类最擅长这样过滤新信息，使现有解释仍然成立”。很可能，巴菲特之所以这么成功，就是因为他了解确认偏误的危险，于是强迫自己换位思考。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9.权威偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对权威的批判性越强，你就越自由，就越相信自己有更多的能力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[不管什么时候遇到一位专家，我都会设法向他挑战。请你也这么做。你对权威的批判性越强，你就越自由，就越相信自己有更多的能力。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.对比效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事物的价值该是怎么样就是怎么样，不因为和其他事物对比而改变。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[你在学生时代可能做过以下实验：你拿来两只桶，在第一只桶里倒进温水，在第二只桶里倒进冰水。你先将右手插进冰水里一分钟，然后将两只手同时插进温水里。你有什么感觉？左手感觉水是温的，右手却感觉水是烫的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;希德和哈利的故事与水的试验都是建立在对比效应的基础上：当我们同时面对某种难看、便宜、小的东西时，我们就会判断出另一种东西更漂亮、更贵、更大。我们很难作出绝对的判断。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对比效应是常见的思维错误之一。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;没有对比效应，就完全无法想象打折生意。一种从100欧元降到70欧元的产品，会显得比一直就卖70欧元的产品更便宜。而事实上最初的价格根本无关紧要。不久前一位投资者对我说：“这只股票便宜，因为它只有最高价的50%。”我轻轻摇摇头。股票价格永远不会“低”或“高”。它是怎么样就是怎么样，唯一值得考虑的是它从这一刻起是会涨还是会跌。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们就像鸟儿听到枪声一样会对对比做出反应。我们扑翅飞起，很快行动起来。不利的一面是，我们发觉不到逐渐发生的小变化。魔术师能够偷走你的表，是因为他对你身体的另一部位使劲用力，让你根本注意不到你手腕上的轻微接触。我们同样不会注意我们的钱是如何消失的。它的价值不断下跌，但我们发觉不到，因为通货膨胀是逐渐发生的。假如它以无情的税收形式让我们承担——原则上是这样的——我们就会发怒。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11.现成偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们根据现成的例子在想象世界，但外界现实的某种东西不会因为我们更容易想到而出现得更频繁。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[由于现成偏误，我们的脑子里总有一张错误的风险卡。于是我们系统性地高估了因飞机坠毁、汽车事故或谋杀而遇难的风险。我们低估了因为糖尿病或胃癌这样不太能引起轰动的方式死亡的风险。炸弹袭击要比我们认为的少得多，抑郁症则要常见得多。壮观、华丽或大声的一切，我们都高估了它们出现的概率。而无声、无形的一切，我们都低估了它们出现的概率。因为我们的大脑更容易接受壮观、华丽或大声的东西。我们的大脑是剧本式思维的，而不是量化思维的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某种东西重复出现，我们的大脑就很容易重新提取它。它并不一定是真的。纳粹领导人不就是经常重复“犹太人问题”，直到大众坚信存在一个严肃的问题吗？你只需要足够经常地重复“不明飞行物”、“生命能量”或“轮回”这些词，人们就会相信它们。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12.「在好转之前会先恶化」的陷阱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是确认偏误的一种变体，真正有效的措施会在短时间内就被看出成效，而不是被人顾左右而言他。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[“在好转之前会先恶化”的陷阱是确认偏误的一种变体。使用这个花招大大有利于一个对专业一窍不通或对事情没有把握的专业人员。如果情况继续走下坡路，就证明了他的预言是正确的。如果情况意外地回升了，客户开心，专业人员则可以将好转归功于他的能力。不管怎样——他总是对的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假设你将成为一名州长，但你对如何领导这个州一窍不通。你会怎么做呢？你预言将有“艰难的几年”，要求你的同胞们“勒紧裤腰带”，你许诺等“清洗”、“除渣”、“改组”的“棘手阶段”结束后形势就会好转。而你有意不涉及：低谷会有多长、多深。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;宗教为这一策略的成功提供了最好的证据。据说，在天堂降临地球之前，世界必须毁灭。灾难、大洪荒、火灾、死亡——它们必然会发生。信徒们会认为情形的任何恶化都是证明了预言，而每一好转都是上天的馈赠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结论：如果有人说：“在好转之前会先恶化”，你脑子里就应该敲响警钟。不过请小心：确实有那样的情形，先是再次下滑然后回升。事业的转换可能会耗费时间，会造成停发工资。一个企业的重组也需要一定的时间。但所有这些情况，人们很快就能看出措施是否有效。里程碑是明确的，是可以检测的。请你望着里程碑，而不是望着天空。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13.故事偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用故事扭曲和简化现实，它们排斥不合适编进故事的一切。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[这也就是为什么在广告中，经常会讲述一则感人的故事，而不是理性地罗列产品优点。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14.事后诸葛亮偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事后回顾时一切都显得是可以理解的、不可避免的。但是世界是不可预测的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15.司机的知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;真正有知识的人知道他们知道什么，也知道他们不知道什么。而「半瓶水」的人却从不会说出「我不知道」四个字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[你为什么不可以把新闻播音员说的话当真,知识有两种：一种是真知识，来自那些投入大量时间和思考以获得知识的人们，这种人如果来到他的“能力范围”之外，他要么什么也不说，要么就说“我不知道”； &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一种就是司机的知识，按芒格故事里的意思，司机是指那些装得好像他们知道的人。他们会模仿别人表演，他们也可能拥有动听的声音或具有说服力的形象。但他们传播的知识是空洞的，他们高谈阔论地挥霍着华丽词汇。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请你不要信任司机的知识。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16.控制错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 你实际控制的少于你以为的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [控制错觉就是相信我们能够控制或影响某种我们客观上无法控制或影响的东西。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在赌博时用左手大力地扔出骰子？真的管用吗？ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在曼哈顿横穿街道时，人们会按一个红绿灯按钮。事实上他们按的是一个不起作用的按钮。事实证明，这样他们就能更好地忍受在红绿灯前的等待。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17.激励过敏倾向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人们是对激励做出反应，而不是对激励背后的目的做出反应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[鼓励捉到死老鼠的政策却让人们养殖老鼠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一则小笑话：投资大师查理走进一家渔具店，突然在一个支架前停下，拿 起一只一闪一闪、引人注目 的颜料钱包鱼饵，问店主：”请问，鱼类真的会喜欢这种东西吗？“店主笑笑：”查理，这玩意儿我们可不是卖给鱼的。“]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18.回归均值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;极端成绩与不太极端的成绩总是来回交替，有些措施可能并不真实有效，只是自然波动而已。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[医生、顾问、教练及心理治疗师的作用令人怀疑 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;极端成绩与不太极端的成绩总是来回交替，有些措施可能并不真实有效，只是自然波动而已。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;去年业绩不好，请了个顾问，今年业绩恢复正常了，是不是真的起作用了？还是回归均值在起作用？]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19.公地悲剧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;凡好处归个人而成本由集体承担的地方，就潜伏着公地悲剧。一处公共场所，希望通过教育、启蒙等手段来呼吁社会责任感来解决公地问题是不可能的。解决方法是公地私有化或加强管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[凡好处归个人而成本由集体承担的地方，就潜伏着公地悲剧。一处公共场所，希望通过教育、启蒙等手段来呼吁社会责任感来解决公地问题是不可能的。解决方法是公地私有化或加强管理。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20.结果偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们倾向于以结果判断决定——而不是当时作决定的过程。结果差并不一定意味着当时所作的决定不对，反之亦然。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[“成功猴”的故事说明：我们倾向于以结果判断决定——而不是当时作决定的过程。这种错误又叫史学家错误。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21.选择的悖论&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;过多的选择会降低生活质量。选择范围太大会导致无所适从，也导致做出更差的决定以及不满。请寻找适合自己标准的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[在端详面前的众多选项之前，仔细考虑你真正想要什么，请你写下你的标准，并务必遵守它们。永远作不出完美的选择，适合你的才是最好的。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22.讨喜偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某人越讨喜，我们就越倾向于从这个人那儿买东西或者帮助他。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[所谓的传销（通过朋友销售）之所以管用，靠的就是讨喜偏误。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;复制&amp;quot;是销售的标准技巧，销售者设法复制对方的手势、语言和表情。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你在判断一笔生意时应该坚持不受卖方影响。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.禀赋效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们感觉我们拥有的东西比我们没有拥有的更有价值。不要抱着某种东西不放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[请将你拥有的视作&amp;quot;宇宙&amp;quot;临时留给你的某种东西。要知道你拥有的一切随时又会被拿走。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.奇迹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不可思议的意外事件的发生没什么可吃惊的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25.团体迷思&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一群聪明的人作出愚蠢的决定可能是因为成员错误以为自己的意见是正确的共识。无论何时，都要讲出自己的看法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26.忽视概率偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们是对一件事的预期强度做出反应，而不是对它的概率。我们缺少对概率的直觉理解。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27.零风险偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;风险越大，其中包含的感情成分越多，降低风险对我们的安慰就越小，这也就让我们过高地评价零风险.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[请你告别零风险的想象，学会怀着&amp;quot;没有什么是安全的&amp;quot;想法生活。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28.稀少性谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们对稀少性的典型反应时丧失清晰思考的能力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[因此请你仅按价格和作用来判断一样东西，而不要在乎它是否稀少。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29.忽视基本概率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重视统计规律，也就是基本概率。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30.赌徒谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;独立事件不存在平衡的力量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[赌徒谬误：一架飞机上同时有两枚炸弹的概率几乎为0，所以只要我带一颗，其他人就不可能带了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31.锚定效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;估计评定时，我们会选取某种熟悉的东西作为锚，然后从这开始判断方向。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32.归纳法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过以前的经验理论来估计现在的情形，然而没有什么事物是肯定的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33.规避损失&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;损失要比同样多的收益比我们的影响更大。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果你想说服某人，请不要用可能的收益做论据，而要说他这样做可以规避一种可能的损失。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人们害怕失去某种东西的想法要比获得某种同等价值的东西的想法强烈。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34.社会性懈怠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;团队在一起的时候，每个人的效率会比单独的时候低。尽可能通过彰显个人效率，来缓和团队的弊病。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35.指数增长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们容易理解线性增长却对指数增长没什么感觉，所以不要相信直觉，求助于计算器会是好方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[我们很容易就能理解线性增长，但我们对指数（或按百分比计算的）增长没有感觉。为什么？因为过去的进化没有让我们为此作好准备。我们祖先的经验大多是线性的。谁花费双倍的时间采摘，谁就会带回家双倍的莓果；谁同时将两只猛犸而不是一只驱逐到地渊上方，谁有肉吃的时间就会是双倍。石器时代几乎没有人遇到过指数增长的例子，但今天不同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有一位政治家说：“交通事故的数量每年递增7%。”老实说，我们无法直观地理解这意味着什么。 因此，请你使用一个窍门：计算倍增时间。请用数字70除以增长的百分比。在上述情况下，倍增时间为70÷7=10（年）。于是这位政治家的意思是：“交通事故的数量每10年翻一倍。”这相当令人警惕。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另一个例子：“物价上涨5%。”任何人听到这种说法，心里都会想：“不严重，5%又有什么大不了的。”让我们迅速计算一下倍增时间：70÷5=14（年）。14年后1欧元的价值只剩下了一半——对于所有有储蓄的人来说，这都是一件坏事。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假设你是一位新闻记者，接到一个统计，你所在城市登记在册的狗的数量逐年增长10%。你会给你的文章取个什么样的标题呢？肯定不是“养狗许可证数量每年上升10%”，这没人会理会。而是：“养狗成灾：仅仅7年，狗屎翻倍！”]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36.赢家的诅咒&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拍卖的赢家大多是事实上的输家。拍卖时的最高报价经常是系统性地过高。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37.基本特征谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;系统性地高估人的影响，在解释某些东西时低估情境因素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38.错误的因果关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;相互关系不等于因果关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[相关关系不等于因果关系。错误的因果关系几乎每天都将我们引入歧途。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;德国的出生率下降曲线和仙鹤配偶数量下降曲线惊人的相似，这是一个纯属巧合的相关关系，肯定不是因果关系。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39.光环效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们让某一个方面照花了眼睛，并由此推及全貌。这让我们看不到真实的特征，我们需要排除醒目的特征。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[想想评委转过身来听歌手的声音就是为了避免这种效应]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40.替代途径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有同样可能发生但没有发生的事情，而这些事可能将你拖入毁灭。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41.预测的错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;许多预测没有成本且大多是错的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[预言未来的人有两种：一种是一无所知的人，另一种是不知道他们自己一无所知的人。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42.关联谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;越有说服力的故事越会误导人。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43.框架效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视表达方式的不同，我们会对同样的事情做出不同的反应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44.行动偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;即使毫无用处，也要采取行动。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果情况不明，请你不要采取任何行动，直到你能更好地分析形势。你要克制自己。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45.不作为偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;放弃引起的损害主观看起来更无害。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果你不是答案的一部分，你就是问题的一部分]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46.自利偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;成功归于自己，失败归于外因。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47.享乐适应症&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们工作、升迁，给自己购买更多漂亮的东西，但我们不会变得更幸福。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[一个人升职后在平均3个月后的幸福感又与先前一样了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（1）避免长期难以适应的负面效应，例如往返交通、噪音、慢性疲累等；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）对物质的东西只期待短期效果，例如汽车、房屋、分红、中彩票、得金奖等；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）持续的正面效应主要与你如何利用你的时间有关，要设法让自己得到尽可能多的自由时间和自主权，做你最爱做的事情。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48.自我选择偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要惊讶有你存在。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[一家公司想查明每个家庭平均有多少部电话（包括座机和手机）。在分析调查结果时，他们居然对没有一个家庭声称没有电话而感到吃惊。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49.联想偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经验有时让人变蠢。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[被烫过的猫永远不会再坐到热灶台上去——这是对的；但它也永远不会再坐到冷灶台上去了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50.新手的运气&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假如开始时一切顺利，请务必多加小心。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51.认知失调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事后做出别的解释，让自己感觉好一点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[关于狐狸的&amp;quot;酸葡萄&amp;quot;的故事。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我买的股票虽然眼下有点弱，但极具潜力，这是一种极不理性的自欺欺人，只能用认知失调来解释。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52.双曲贴现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个决定离现在越近，我们的「情感利息」就越多。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.幸存偏误&lt;/span&gt;&lt;br&gt;&lt;span cla
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>@property</title>
    <link href="http://yoursite.com/2016/08/06/iOS/property/"/>
    <id>http://yoursite.com/2016/08/06/iOS/property/</id>
    <published>2016-08-06T00:14:10.000Z</published>
    <updated>2016-08-08T01:33:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;gt;&lt;br&gt;@Property是声明属性的语法，它可以快速方便的为实例变量创建存取器，并允许我们通过点语法使用存取器。&lt;br&gt;存取器（accessor）：指用于获取和设置实例变量的方法。用于获取实例变量值的存取器是getter，用于设置实例变量值的存取器是setter。&lt;/p&gt;
&lt;h3 id=&quot;修饰词&quot;&gt;&lt;a href=&quot;#修饰词&quot; class=&quot;headerlink&quot; title=&quot;修饰词&quot;&gt;&lt;/a&gt;修饰词&lt;/h3&gt;&lt;p&gt;assign、weak、strong、retain、copy、nonatomic、atomic、readonly、readwrite&lt;/p&gt;
&lt;h4 id=&quot;assign&quot;&gt;&lt;a href=&quot;#assign&quot; class=&quot;headerlink&quot; title=&quot;assign&quot;&gt;&lt;/a&gt;assign&lt;/h4&gt;&lt;p&gt;1.这个修饰词是直接赋值的意思 , 整型/浮点型等数据类型都用这个词修饰 .&lt;br&gt;2.如果没有使用 weak strong retain copy 修饰 , 那么默认就是使用 assign 了. ( 它们之间是有你没我的关系 )&lt;br&gt;3.当然其实对象也可以用 assign 修饰 , 只是对象的计数器不会+1 . ( 与 strong 的区别 )&lt;br&gt;4.如果用来修饰对象属性 , 那么当对象被销毁后指针是不会指向 nil 的 . 所以会出现野指针错误 . ( 与weak的区别 )&lt;br&gt;assign（默认）：assign用于值类型，如int、float、double和NSInteger，CGFloat等表示单纯的复制。还包括不存在所有权关系的对象，比如常见的delegate。&lt;/p&gt;
&lt;h4 id=&quot;weak-ARC-对象&quot;&gt;&lt;a href=&quot;#weak-ARC-对象&quot; class=&quot;headerlink&quot; title=&quot;weak ( ARC )(对象)&quot;&gt;&lt;/a&gt;weak ( ARC )(对象)&lt;/h4&gt;&lt;p&gt;1.弱指针是针对对象的修饰词 , 就是说它不能修饰基本数据类型(int float) .&lt;br&gt;2.weak 修饰的引用计数器不会+1 , 也就是直接赋值 .&lt;br&gt;3.弱引用是为打破循环引用而生的 .&lt;br&gt;4.它最被人所喜欢的原因是 它所指向的对象如果被销毁 , 它会指向 nil . 从而不会出现野指针错误 .&lt;br&gt;在setter方法中，需要对传入的对象不进行引用计数加1的操作。&lt;br&gt;简单来说，就是对传入的对象没有所有权，当该对象引用计数为0时，即该对象被释放后，用weak声明的实例变量指向nil，即实例变量的值为0。weak关键字是IOS5引入的，IOS5之前是不能使用该关键字的。delegate 和 Outlet 一般用weak来声明。&lt;/p&gt;
&lt;h4 id=&quot;strong-ARC-对象&quot;&gt;&lt;a href=&quot;#strong-ARC-对象&quot; class=&quot;headerlink&quot; title=&quot;strong ( ARC )(对象)&quot;&gt;&lt;/a&gt;strong ( ARC )(对象)&lt;/h4&gt;&lt;p&gt;1.直接赋值并且对象的引用计数器 +1 .&lt;br&gt;2.在 ARC 里替代了 retain 的作用 .&lt;br&gt;strong是在IOS引入ARC的时候引入的关键字，是retain的一个可选的替代。表示实例变量对传入的对象要有所有权关系，即强引用。strong跟retain的意思相同并产生相同的代码，但是语意上更好更能体现对象的关系。&lt;/p&gt;
&lt;h4 id=&quot;retain-MRC&quot;&gt;&lt;a href=&quot;#retain-MRC&quot; class=&quot;headerlink&quot; title=&quot;retain ( MRC )&quot;&gt;&lt;/a&gt;retain ( MRC )&lt;/h4&gt;&lt;p&gt;1.release 旧对象( 旧对象计数器 -1 ) , retain 新对象( 新对象计数器 +1 ) , 然后指向新对象 .&lt;br&gt;2.在set方法里面是这样的 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; if (_dog)
{ 
  [_dog release]; 
} 
_dog = [dog retain];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;copy-ARC-MRC&quot;&gt;&lt;a href=&quot;#copy-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;copy ( ARC/MRC )&quot;&gt;&lt;/a&gt;copy ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.copy 在 MRC 时是这样做的 release 旧对象( 旧对象的引用计数器 -1 ) , copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象 .（新对象是指最终指向的那个对象，不管深拷贝还是浅拷贝）&lt;/p&gt;
&lt;p&gt;1.1在set方法里面是这样的 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (_dog) 
{ 
[_dog release]; 
} 
_dog = [dog copy];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.copy 在 ARC 时是这么干的 copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象 .&lt;/p&gt;
&lt;p&gt;2.1在set方法里面是这样的 :&lt;br&gt;_dog = [dog copy];&lt;br&gt;3.使用注意 :&lt;br&gt;3.1 修饰的属性本身要不可变的 . 例如 NSMutableArray 采用 copy 修饰 , 添加元素表面上可以 一到运行就崩溃了 , 因为 copy 过后实际上成了NSArray了 . 那么此时，需要用到mutablecopy。&lt;br&gt;3.2 遵守 NSCopying 协议的对象使用 .&lt;br&gt;与strong类似，但区别在于实例变量是对传入对象的副本拥有所有权，而非对象本身。&lt;/p&gt;
&lt;h4 id=&quot;nonatomic-ARC-MRC&quot;&gt;&lt;a href=&quot;#nonatomic-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;nonatomic ( ARC/MRC )&quot;&gt;&lt;/a&gt;nonatomic ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.不对set方法加锁 .&lt;br&gt;2.性能好&lt;br&gt;3.线程不安全&lt;br&gt;nonatomic跟atomic刚好相反。表示非原子的，可以被多个线程访问。它的效率比atomic快。但不能保证在多线程环境下的安全性，在单线程和明确只有一个线程访问的情况下广泛使用。&lt;/p&gt;
&lt;h4 id=&quot;atomic-ARC-MRC&quot;&gt;&lt;a href=&quot;#atomic-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;atomic ( ARC/MRC )&quot;&gt;&lt;/a&gt;atomic ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.原子属性就是对生成的 set 方法加互斥锁 @synchronized(锁对象) .&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@synchronized(self) { _delegate = delegate;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.需要消耗系统资源 .&lt;br&gt;3.互斥锁是利用线程同步实现的 , 意在保证同一时间只有一个线程调用 set 方法 .&lt;br&gt;4.其实还有 get 方法 , 要是同时 set 和 get 一起调用还是会有问题的 . 所以即使用了 atomic 修饰 还是不够安全 .&lt;/p&gt;
&lt;p&gt;atomic（默认）：atomic意为操作是原子的，意味着只有一个线程访问实例变量。atomic是线程安全的，至少在当前的存取器上是安全的。它是一个默认的特性，但是很少使用，因为比较影响效率，这跟ARM平台和内部锁机制有关。&lt;/p&gt;
&lt;h4 id=&quot;readonly-只读&quot;&gt;&lt;a href=&quot;#readonly-只读&quot; class=&quot;headerlink&quot; title=&quot;readonly (只读)&quot;&gt;&lt;/a&gt;readonly (只读)&lt;/h4&gt;&lt;p&gt;1.让 Xcode 只生成get方法 .&lt;br&gt;2.不想把暴露的属性被人随便替换时 , 可以使用 .&lt;br&gt;readonly： readonly表示只有getter没有setter。&lt;/p&gt;
&lt;h4 id=&quot;readwrite-读写-默认&quot;&gt;&lt;a href=&quot;#readwrite-读写-默认&quot; class=&quot;headerlink&quot; title=&quot;readwrite (读写)(默认)&quot;&gt;&lt;/a&gt;readwrite (读写)(默认)&lt;/h4&gt;&lt;p&gt;1.让 Xcode 生成get/set方法 .&lt;br&gt;2.不用 readonly 修饰时 , 默认就是 readwrite .&lt;br&gt;readwrite（默认）：readwrite是默认值，表示该属性同时拥有setter和getter。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;gt;&lt;br&gt;@Property是声明属性的语法，它可以快速方便的为实例变量创建存取器，并允许我们通过点语法使用存取器。&lt;br&gt;存取器（accessor）：指用于获取和设置实例变量的方法。用于获取实例变量值的存取器是getter，用于设置实例变量值的存取器是setter。
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="http://yoursite.com/2016/08/05/JavaScript/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/08/05/JavaScript/JavaScript基础/</id>
    <published>2016-08-05T13:10:44.000Z</published>
    <updated>2016-08-10T06:31:18.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基本特性&quot;&gt;&lt;a href=&quot;#基本特性&quot; class=&quot;headerlink&quot; title=&quot;基本特性&quot;&gt;&lt;/a&gt;基本特性&lt;/h3&gt;&lt;p&gt;1、脚本语言&lt;br&gt;JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序的运行过程中进行解释执行。&lt;br&gt;2、基于对象&lt;br&gt;JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。JavaScript 中的几乎所有事务都是对象：字符串、数字、数组、日期、函数，等等。&lt;br&gt;3、简单&lt;br&gt;JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。&lt;br&gt;4、动态性&lt;br&gt;JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。&lt;br&gt;5、跨平台性&lt;br&gt;JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持&lt;/p&gt;
&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。&lt;br&gt;1.js变量声明提前&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope = &lt;span class=&quot;string&quot;&gt;&quot;global&quot;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   alert(scope);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope = &lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(scope);&lt;span class=&quot;comment&quot;&gt;//local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上代码说明:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;作用域里的变量&lt;span class=&quot;title&quot;&gt;scope&lt;/span&gt;遮盖了上层作用域变量&lt;span class=&quot;title&quot;&gt;scope&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;javascript&lt;/span&gt;是没有块级作用域的,只有函数作用域。&lt;span class=&quot;title&quot;&gt;JavaScript&lt;/span&gt; 变量的生存期,&lt;span class=&quot;title&quot;&gt;JavaScript&lt;/span&gt; 变量的生命期从它们被声明的时间开始。局部变量会在函数运行以后被删除,全局变量会在页面关闭后被删除。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.在&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;作用域内，变量&lt;span class=&quot;title&quot;&gt;v&lt;/span&gt;的声明被提升了。所以最初的代码相当于：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;v&lt;/span&gt; = &quot;&lt;span class=&quot;title&quot;&gt;global&lt;/span&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope; &lt;span class=&quot;comment&quot;&gt;//declaration hoisting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(scope)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scope = &lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(scope)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.不用var声明为全局变量&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope = &lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(scope);&lt;span class=&quot;comment&quot;&gt;//local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JS原型&quot;&gt;&lt;a href=&quot;#JS原型&quot; class=&quot;headerlink&quot; title=&quot;JS原型&quot;&gt;&lt;/a&gt;JS原型&lt;/h3&gt;&lt;p&gt;(1) 所有的函数都有一个prototype属性，这个属性引用了一个对象，这个对象就是原型对象，也简称原型。&lt;/p&gt;
&lt;p&gt;(2)函数的prototype属性&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;函数的prototype属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.prototype); &lt;span class=&quot;comment&quot;&gt;//[object Object]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(3)prototype的constructor属性&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.prototype.constructor); &lt;span class=&quot;comment&quot;&gt;//function Foo()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(4)对象的&lt;strong&gt;proto&lt;/strong&gt;属性&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype =  &amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.__proto__ === Foo.prototype); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.name); &lt;span class=&quot;comment&quot;&gt;//xxx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(5)原型链&lt;br&gt;访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着&lt;strong&gt;proto&lt;/strong&gt;这条链向上找，这就是原型链。&lt;br&gt;(6)区分一个属性是不是从原型里找到的&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype =  &amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj. hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj. hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(7) 函数对象有隐式原型吗？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.__proto__); &lt;span class=&quot;comment&quot;&gt;//function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.__proto__.constructor); &lt;span class=&quot;comment&quot;&gt;//function Function() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（8）Fuction创造一切&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/bc254b75gw1f6j9aobtmej20t00oudjf.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;(9)所有对象都有原型链&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;str&quot;&lt;/span&gt;.__proto__.constructor);&lt;span class=&quot;comment&quot;&gt;//function String() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).__proto__.constructor);&lt;span class=&quot;comment&quot;&gt;//function Number() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.__proto__.constructor);&lt;span class=&quot;comment&quot;&gt;//function anonymous() &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(10)利用原型对象对原生对象进行扩展&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.suolve =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;length&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length &amp;gt; length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,length)+&lt;span class=&quot;string&quot;&gt;&quot;……&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		 &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;猜猜结果？&quot;&lt;/span&gt;.suolve(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//猜猜……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;通用写法&quot;&gt;&lt;a href=&quot;#通用写法&quot; class=&quot;headerlink&quot; title=&quot;通用写法&quot;&gt;&lt;/a&gt;通用写法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name,age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,dept;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name || &lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//xxx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name &amp;amp;&amp;amp; &lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;javascript里的反射&quot;&gt;&lt;a href=&quot;#javascript里的反射&quot; class=&quot;headerlink&quot; title=&quot;javascript里的反射&quot;&gt;&lt;/a&gt;javascript里的反射&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;name:&lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt;,age:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 alert(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     alert(obj[p]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// name xxx age 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用立即执行函数对代码进行隔离&quot;&gt;&lt;a href=&quot;#使用立即执行函数对代码进行隔离&quot; class=&quot;headerlink&quot; title=&quot;使用立即执行函数对代码进行隔离&quot;&gt;&lt;/a&gt;使用立即执行函数对代码进行隔离&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;主要是用于隔离作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... all vars and functions are in this scope only&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// still maintains access to all globals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数中的变量并不会影响到外面的作用域中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currTime = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; time = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; year  = time.getFullYear()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; month = time.getMonth()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; date  = time.getDate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hour  = time.getHours()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; min   = time.getMinutes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sec   = time.getSeconds()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; year + &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; + month + &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; + date + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + hour + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + min + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(currTime);  &lt;span class=&quot;comment&quot;&gt;//2016/7/6 17:0:27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关于闭包和立即执行函数&quot;&gt;&lt;a href=&quot;#关于闭包和立即执行函数&quot; class=&quot;headerlink&quot; title=&quot;关于闭包和立即执行函数&quot;&gt;&lt;/a&gt;关于闭包和立即执行函数&lt;/h3&gt;&lt;p&gt;匿名函数和闭包没有直接关系。能用匿名函数实现闭包的地方，一定也能用命名函数实现。&lt;br&gt;闭包的本质在于“闭”和“包”，即把一些变量封闭起来，使其它程序访问不到，同时把这个封闭的东西打成包甩出来，让大家可以直接用这个包（函数）。最典型的实现之一是对象（或类）的私有成员，如&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 这是一个封闭在 MyClass 中的局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 这是一个甩出来的“包”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 这是另一个甩出来的“包”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 这保证了 _name 的第一个字母和空格后的第一个字母是大写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 而且因为闭包的原因，_name 不可能被 MyCLass() 外的程序访问到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 也就保证了上述命名规则的无例外执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       _name = name.replace(&lt;span class=&quot;regexp&quot;&gt;/^.|\s./g&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.setName(&lt;span class=&quot;string&quot;&gt;&quot;james fancy&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p.getName());   &lt;span class=&quot;comment&quot;&gt;// James Fancy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;匿名函数通常只是用于给成员赋值，比如上例中的 getName 和 setName；也有可能用于立即执行函数，比如你的那段代码，这会将全局变量局部化，避免全局污染。&lt;br&gt;闭包常常会和匿名函数一起使用，但他们之间并没有密不可分的关系。&lt;br&gt;IIFE主要目的是做的一些封装，防止污染，以及保证内部变量的安全&lt;br&gt;闭包严格来说，是一个函数执行之后，返回另外一个函数，返回的函数有前一个函数的内部变量的引用可能会用在IIFE里面，通过返回的函数来提供内部变量的一些操作。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以拆解为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包是对函数中变量作用域的构成方式的一种表述，具体表现为一个函数中可以访问不在其作用域范围内但在其外层函数作用域中存在的变量，这个外层函数作用域的顶层为全局作用域&lt;/p&gt;
&lt;p&gt;匿名函数从字面理解就是没有命名的函数，如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;立即执行函数是指声明完之后便直接执行的函数，因此通常这类函数也不需要命名，如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包通常指在函数内部再定义一个函数，由于作用域的关系，外部函数无法访问内部函数的变量，而内部函数可以访问外部函数的变量，此时如果外部函数将内部函数返回，便形成了闭包，如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prop = &lt;span class=&quot;string&quot;&gt;&#39;outer&#39;&lt;/span&gt;;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(prop); &lt;span class=&quot;comment&quot;&gt;// outer&lt;/span&gt;
  }
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以，也可以把任何函数理解为一个闭包，因为每个函数都可以访问外部函数或者全局的变量，但是外部函数或全局无法访问函数内部的变量，也就可以理解为是一个闭包。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本特性&quot;&gt;&lt;a href=&quot;#基本特性&quot; class=&quot;headerlink&quot; title=&quot;基本特性&quot;&gt;&lt;/a&gt;基本特性&lt;/h3&gt;&lt;p&gt;1、脚本语言&lt;br&gt;JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>喵两只</title>
    <link href="http://yoursite.com/2016/07/10/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E5%96%B5%E4%B8%A4%E5%8F%AA/"/>
    <id>http://yoursite.com/2016/07/10/读书生活/喵两只/</id>
    <published>2016-07-10T09:23:06.000Z</published>
    <updated>2016-08-04T07:19:28.000Z</updated>
    
    <content type="html">&lt;p&gt;家里有喵两只，老大名为七喜，老二唤作大白。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;老大型若小虎，老二全身白毛，老大高冷却胆小，老二傻呆还粘人，在不自愿的情况下被迫养之，怎奈随着铲屎量的增加，感情却也日渐深厚。每到夜晚，老大必定嚎之，知其狂思母喵，却怎奈何并无适龄母喵相配，大概过些时日也要阉之，思此不觉伤感，但每逢嚎叫之时，我也必定出手殴之，或以妙鲜包哄之，大抵如此。每逢清晨，老二粘人尤甚，跳上床来，又舔又蹭，嗷嗷声如二三岁的孩童。烦感之时，将其揪起放在地上，二三分钟不到，呼噜声又在耳边响起，媳妇与我都感到无奈却也好笑。转念回想，两个小家伙陪伴我们也已很多时日，也因闹着玩被抓伤，被老二传染了毛癣，也被老大掉的毛弄得不厌其烦。可分别两日心里也不觉会想念。感情的事大都难说，烦感还是喜爱有时候自己也说不清楚。日子继续过，依旧每日喂饭，铲屎，希望两个家伙健康成长。&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw1024/bc254b75gw1f5oz242plcj20ow0ion2u.jpg&quot; alt=&quot;七喜&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw1024/bc254b75jw1f5oyxapm1aj21420qojvj.jpg&quot; alt=&quot;大白&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016-7-10周日下午于家中&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;家里有喵两只，老大名为七喜，老二唤作大白。&lt;br&gt;
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>获取iOS设备唯一标识</title>
    <link href="http://yoursite.com/2016/07/07/iOS/%E8%8E%B7%E5%8F%96iOS%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/"/>
    <id>http://yoursite.com/2016/07/07/iOS/获取iOS设备唯一标识/</id>
    <published>2016-07-07T07:04:26.000Z</published>
    <updated>2016-08-04T07:49:44.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;之前碰到过获取设备唯一标识的情况，很多方法都已经作废了，转载一篇文章，很好的总结了能用的方法。(自己还未测试)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ximu.site/uuid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;IDFA&quot;&gt;&lt;a href=&quot;#IDFA&quot; class=&quot;headerlink&quot; title=&quot;IDFA&quot;&gt;&lt;/a&gt;IDFA&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全名：advertisingIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取代码：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #import &amp;lt;AdSupport/AdSupport.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：iOS6.0及以后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：直译就是广告id， 在同一个设备上的所有App都会取到相同的值，是苹果专门给各广告提供商用来追踪用户而设的，用户可以在 设置|隐私|广告追踪 里重置此id的值，或限制此id的使用，故此id有可能会取不到值，但好在Apple默认是允许追踪的，而且一般用户都不知道有这么个设置，所以基本上用来监测推广效果，是戳戳有余了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：由于idfa会出现取不到的情况，故绝不可以作为业务分析的主id，来识别用户。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;IDFV&quot;&gt;&lt;a href=&quot;#IDFV&quot; class=&quot;headerlink&quot; title=&quot;IDFV&quot;&gt;&lt;/a&gt;IDFV&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全名：identifierForVendor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取代码： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：iOS6.0及以后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：顾名思义，是给Vendor标识用户用的，每个设备在所属同一个Vender的应用里，都有相同的值。其中的Vender是指应用提供商，但准确点说，是通过BundleID的反转的前两部分进行匹配，如果相同就是同一个Vender，例如对于com.taobao.app1, com.taobao.app2 这两个BundleID来说，就属于同一个Vender，共享同一个idfv的值。和idfa不同的是，idfv的值是一定能取到的，所以非常适合于作为内部用户行为分析的主id，来标识用户，替代OpenUDID。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：如果用户将属于此Vender的所有App卸载，则idfv的值会被重置，即再重装此Vender的App，idfv的值和之前不同。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h2&gt;&lt;p&gt;我们可以获取到UUID，然后把UUID保存到KeyChain里面。&lt;/p&gt;
&lt;p&gt;这样以后即使APP删了再装回来，也可以从KeyChain中读取回来。使用group还可以可以保证同一个开发商的所有程序针对同一台设备能够获取到相同的不变的UDID。&lt;/p&gt;
&lt;p&gt;但是刷机或重装系统后uuid还是会改变。&lt;/p&gt;
&lt;h3 id=&quot;把下面两个类文件放到你的项目中&quot;&gt;&lt;a href=&quot;#把下面两个类文件放到你的项目中&quot; class=&quot;headerlink&quot; title=&quot;把下面两个类文件放到你的项目中&quot;&gt;&lt;/a&gt;把下面两个类文件放到你的项目中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KeychainItemWrapper.h文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;********************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface KeychainItemWrapper : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *keychainItemData;        // The actual keychain item data backing store.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *genericPasswordQuery;    // A placeholder for the generic keychain item query used to locate the item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, retain) NSMutableDictionary *keychainItemData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, retain) NSMutableDictionary *genericPasswordQuery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Designated initializer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setObject:(id)inObject forKey:(id)key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)objectForKey:(id)key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Initializes and resets the default generic keychain item data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)resetKeychainItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KeychainItemWrapper.h文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;********************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KeychainItemWrapper.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Security/Security.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;These are the default constants and their respective types,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;available for the kSecClassGenericPassword Keychain Item class:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrAccessGroup            -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrCreationDate        -       CFDateRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrModificationDate    -        CFDateRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrDescription            -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrComment                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrCreator                -       CFNumberRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrType                -        CFNumberRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrLabel                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrIsInvisible            -       CFBooleanRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrIsNegative            -       CFBooleanRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrAccount                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrService                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrGeneric                -       CFDataRef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;See the header file Security/SecItem.h for more details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface KeychainItemWrapper (PrivateMethods)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The decision behind the following two methods (secItemFormatToDictionary and dictionaryToSecItemFormat) was  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to encapsulate the transition between what the detail view controller was expecting (NSString *) and what the  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keychain API expects as a validly constructed container class.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Updates the item in the keychain, or adds it if it doesn&amp;apos;t exist.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)writeToKeychain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation KeychainItemWrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@synthesize keychainItemData, genericPasswordQuery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self = [super init])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert(account != nil || service != nil, @&amp;quot;Both account and service are nil.  Must specifiy at least one.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Begin Keychain search setup. The genericPasswordQuery the attributes kSecAttrAccount and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // kSecAttrService are used as unique identifiers differentiating keychain items from one another&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        genericPasswordQuery = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:account forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:service forKey:(id)kSecAttrService];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The keychain access group attribute determines if this item can be shared&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // amongst multiple apps whose code signing entitlements contain the same keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Use the proper search constants, return only the attributes of the first match.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *outDictionary = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;amp;outDictionary) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Stick these default values into keychain item if nothing found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [self resetKeychainItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //Adding the account and service identifiers to the keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:account forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:service forKey:(id)kSecAttrService];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // load the saved data from Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [outDictionary release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self = [super init])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Begin Keychain search setup. The genericPasswordQuery leverages the special user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // defined attribute kSecAttrGeneric to distinguish itself between other generic Keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // items which may be included by the same application.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        genericPasswordQuery = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:identifier forKey:(id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The keychain access group attribute determines if this item can be shared&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // amongst multiple apps whose code signing entitlements contain the same keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Use the proper search constants, return only the attributes of the first match.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *outDictionary = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;amp;outDictionary) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Stick these default values into keychain item if nothing found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [self resetKeychainItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Add the generic attribute and the keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:identifier forKey:(id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // load the saved data from Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [outDictionary release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [genericPasswordQuery release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super dealloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setObject:(id)inObject forKey:(id)key &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (inObject == nil) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id currentObject = [keychainItemData objectForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (![currentObject isEqual:inObject])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [keychainItemData setObject:inObject forKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self writeToKeychain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)objectForKey:(id)key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [keychainItemData objectForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)resetKeychainItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OSStatus junk = noErr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!keychainItemData) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.keychainItemData = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else if (keychainItemData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *tempDictionary = [self dictionaryToSecItemFormat:keychainItemData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        junk = SecItemDelete((CFDictionaryRef)tempDictionary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( junk == noErr || junk == errSecItemNotFound, @&amp;quot;Problem deleting current dictionary.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Default attributes for keychain item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrLabel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrDescription];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Default data for keychain item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // The assumption is that this method will be called with a properly populated dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // containing all the right key/value pairs for a SecItem.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create a dictionary to return populated with the attributes and data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Add the Generic Password keychain item class attribute.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Convert the NSString to NSData to meet the requirements for the value type kSecValueData.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // This is where to store sensitive data that should be encrypted.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *passwordString = [dictionaryToConvert objectForKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:[passwordString dataUsingEncoding:NSUTF8StringEncoding] forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return returnDictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // The assumption is that this method will be called with a properly populated dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // containing all the right key/value pairs for the UI element.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create a dictionary to return populated with the attributes and data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Add the proper search key and class attribute.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Acquire the password data from the attributes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *passwordData = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (SecItemCopyMatching((CFDictionaryRef)returnDictionary, (CFTypeRef *)&amp;amp;passwordData) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Remove the search, class, and identifier key/value, we don&amp;apos;t need them anymore.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [returnDictionary removeObjectForKey:(id)kSecReturnData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Add the password to the dictionary, converting from NSData to NSString.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *password = [[[NSString alloc] initWithBytes:[passwordData bytes] length:[passwordData length] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                     encoding:NSUTF8StringEncoding] autorelease];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [returnDictionary setObject:password forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Don&amp;apos;t do anything if nothing is found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert(NO, @&amp;quot;Serious error, no matching item found in the keychain.\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [passwordData release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return returnDictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)writeToKeychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSDictionary *attributes = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *updateItem = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OSStatus result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (SecItemCopyMatching((CFDictionaryRef)genericPasswordQuery, (CFTypeRef *)&amp;amp;attributes) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // First we need the attributes from the Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateItem = [NSMutableDictionary dictionaryWithDictionary:attributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Second we need to add the appropriate search key/values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [updateItem setObject:[genericPasswordQuery objectForKey:(id)kSecClass] forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Lastly, we need to set up the updated attribute list being careful to remove the class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *tempCheck = [self dictionaryToSecItemFormat:keychainItemData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [tempCheck removeObjectForKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Remove the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The access group attribute will be included in items returned by SecItemCopyMatching,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // which is why we need to remove it before updating the item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [tempCheck removeObjectForKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // An implicit assumption is that you can only update a single item at a time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = SecItemUpdate((CFDictionaryRef)updateItem, (CFDictionaryRef)tempCheck);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( result == noErr, @&amp;quot;Couldn&amp;apos;t update the Keychain Item.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // No previous item found; add the new one.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = SecItemAdd((CFDictionaryRef)[self dictionaryToSecItemFormat:keychainItemData], NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( result == noErr, @&amp;quot;Couldn&amp;apos;t add the Keychain Item.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;我们在写一个工具类用来保存UUID到keychain和从keychain中读取UUID.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AppUntils.m文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*********************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import  &amp;lt;Security/Security.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KeychainItemWrapper.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - 保存和读取UUID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(void)saveUUIDToKeyChain&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *string = [keychainItem objectForKey: (__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if([string isEqualToString:@&amp;quot;&amp;quot;] || !string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [keychainItem setObject:[self getUUIDString] forKey:(__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(NSString *)readUUIDFromKeyChain&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeychainItemWrapper *keychainItemm = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *UUID = [keychainItemm objectForKey: (__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return UUID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (NSString *)getUUIDString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFUUIDRef uuidRef = CFUUIDCreate(kCFAllocatorDefault);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFStringRef strRef = CFUUIDCreateString(kCFAllocatorDefault , uuidRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *uuidString = [(__bridge NSString*)strRef stringByReplacingOccurrencesOfString:@&amp;quot;-&amp;quot; withString:@&amp;quot;&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRelease(strRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRelease(uuidRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return uuidString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取UUID&lt;br&gt;在需要读取的地方直接调用AppUtils的类方法readUUIDFromKeyChain即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;h3 id=&quot;1-设置非ARC编译环境&quot;&gt;&lt;a href=&quot;#1-设置非ARC编译环境&quot; class=&quot;headerlink&quot; title=&quot;1.设置非ARC编译环境&quot;&gt;&lt;/a&gt;1.设置非ARC编译环境&lt;/h3&gt;&lt;p&gt;因为KeychainItemWrapper.m文件是在非ARC环境下运行的，所以需要设置非arc编译环境， 在Build Phases下选在文件，设置compiler flags:-fno-objc-arc&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-让同一开发商的所有APP在同一台设备上获取到UUID相同&quot;&gt;&lt;a href=&quot;#2-让同一开发商的所有APP在同一台设备上获取到UUID相同&quot; class=&quot;headerlink&quot; title=&quot;2. 让同一开发商的所有APP在同一台设备上获取到UUID相同&quot;&gt;&lt;/a&gt;2. 让同一开发商的所有APP在同一台设备上获取到UUID相同&lt;/h3&gt;&lt;p&gt;在每个APP的项目里面做如下设置&lt;/p&gt;
&lt;h4 id=&quot;2-1、设置accessgroup&quot;&gt;&lt;a href=&quot;#2-1、设置accessgroup&quot; class=&quot;headerlink&quot; title=&quot;2.1、设置accessgroup&quot;&gt;&lt;/a&gt;2.1、设置accessgroup&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:@&amp;quot;YOUR_BUNDLE_SEED.com.yourcompany.userinfo&amp;quot;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此处设置accessGroup为YOURBUNDLESEED.com.yourcompany.userinfo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-2、创建plist文件&quot;&gt;&lt;a href=&quot;#2-2、创建plist文件&quot; class=&quot;headerlink&quot; title=&quot;2.2、创建plist文件&quot;&gt;&lt;/a&gt;2.2、创建plist文件&lt;/h4&gt;&lt;p&gt;然后在项目相同的目录下创建KeychainAccessGroups.plist文件。&lt;/p&gt;
&lt;p&gt;该文件的结构是一个字典，其中中最顶层的节点必须是一个键为“keychain-access-groups”的Array，并且该Array中每一项都是一个描述分组的NSString。YOURBUNDLESEED.com.yourcompany.userinfo就是要设置的组名。&lt;/p&gt;
&lt;h4 id=&quot;2-3-设置code-signing&quot;&gt;&lt;a href=&quot;#2-3-设置code-signing&quot; class=&quot;headerlink&quot; title=&quot;2.3 设置code signing&quot;&gt;&lt;/a&gt;2.3 设置code signing&lt;/h4&gt;&lt;p&gt;接着在Target—&amp;gt;Build Settings—-&amp;gt;Code Signing栏下的Code Signing Entitlements右侧添加KeychainAccessGroups.plist&lt;/p&gt;
&lt;p&gt;这样就可以保证每个app都是从keychain中读取出来同一个UUID&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前碰到过获取设备唯一标识的情况，很多方法都已经作废了，转载一篇文章，很好的总结了能用的方法。(自己还未测试)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发通用技巧" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>CALayer</title>
    <link href="http://yoursite.com/2016/07/06/iOS/CALayer/"/>
    <id>http://yoursite.com/2016/07/06/iOS/CALayer/</id>
    <published>2016-07-06T05:49:55.000Z</published>
    <updated>2016-08-04T02:19:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。&lt;br&gt;其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层&lt;br&gt;@property(nonatomic,readonly,retain) CALayer *layer;&lt;br&gt;当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层（CALayer）上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示&lt;br&gt;换句话说，UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。&lt;br&gt;NSObject–&amp;gt;CALayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;UIView之所以能够显示，完全是因为内部的CALayer对象。因此，通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;新建一个项目，在storyboard中添加一个view.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.通过layer设置边框的宽度和颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;YYViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface YYViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (weak, nonatomic) IBOutlet UIView *customView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation YYViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor greenColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.通过layer设置边框为圆角self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.在layer上添加一张图片 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;YYViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface YYViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (weak, nonatomic) IBOutlet UIView *customView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation YYViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：contents是id类型，可以接受内容，上面的实例让layer显示一张图片，仔细观察可以发现四个圆角的部分露了一个角出来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;产生的原因说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那是因为设置的image不是展示在主图层上的，而是显示在子图层上的。可以通过设置一个范围，设置超出主图层的部分把它给剪切掉。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有以下两种方法，建议使用layer中的方法（第二种）self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置超过子图层的部分裁减掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //UI框架中使用的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    self.customView.clipsToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：layer中不能直接接受UI框架中的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.设置阴影&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置阴影，不光需要设置阴影颜色，还应该设置阴影的偏移位和透明度。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为如果不设置偏移位的话，那么阴影和layer完全重叠，且默认透明度为0（即完全透明）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的偏移量，如果为正数，则代表为往右边偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOffset=CGSizeMake(15, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的透明度(0~1之间，0表示完全透明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOpacity=0.6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;补充说明：如果设置了超过主图层的部分减掉，则设置阴影不会有显示效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置超过子图层的部分裁减掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //UI框架中使用的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //self.customView.clipsToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的偏移量，如果为正数，则代表为往右边偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOffset=CGSizeMake(15, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的透明度(0~1之间，0表示完全透明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOpacity=0.6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;把剪切超出主图层部分的代码注释掉之后的显示效果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。&lt;br&gt;其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层&lt;br&gt;@property(nonatomic,readonly,retain) CALayer *layer;&lt;br&gt;当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层（CALayer）上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示&lt;br&gt;换句话说，UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。&lt;br&gt;NSObject–&amp;gt;CALayer&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>布局相关</title>
    <link href="http://yoursite.com/2016/07/04/iOS/%E5%B8%83%E5%B1%80%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2016/07/04/iOS/布局相关/</id>
    <published>2016-07-04T07:08:43.000Z</published>
    <updated>2016-08-11T01:55:43.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iOS &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 以后 View Controller 添加了几个相关的属性来方便我们来做页面布局：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIRectEdge&lt;/span&gt; edgesForExtendedLayout &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;_0); &lt;span class=&quot;comment&quot;&gt;// Defaults to UIRectEdgeAll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; extendedLayoutIncludesOpaqueBars &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;_0); &lt;span class=&quot;comment&quot;&gt;// Defaults to NO, but bars are translucent by default on 7_0.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; automaticallyAdjustsScrollViewInsets &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;_0); &lt;span class=&quot;comment&quot;&gt;// Defaults to YES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* edgesForExtendedLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过 edgesForExtendedLayout 这个属性来设置你的 View Controller 页面的哪一侧会延伸至屏幕边缘。可选值有：&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeNone&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeTop&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeLeft&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeBottom&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeRight&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt;。默认值是 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt;，即 View Controller 的布局是全屏填满。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在有 NavigationBar、TabBar、TooBar 等系统 Bar 的情况下，该属性设置为 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt; 时，View Controller 的页面会被这些 Bar 盖住部分；而当该属性设为 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeNone&lt;/span&gt; 的时候，View Controller 的页面布局会限制在这些 Bar 之间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们可以在 View Controller 的 - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillLayoutSubviews 方法中打印出 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的 frame 来观察这个属性带来的影响。我们以 iPhone &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;s 的 &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;480&lt;/span&gt; 的屏幕尺寸为例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置 edgesForExtendedLayout 为 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt;，不管是有 NavigationBar、TabBar、TooBar 哪一种 Bar，&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的 frame 均为 (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;480&lt;/span&gt;)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置 edgesForExtendedLayout 为 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有 NavigationBar 和 TabBar，&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的 frame 为 (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;367&lt;/span&gt;)。即 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的布局的起点从 NavigationBar 下开始，高度去掉了 StatusBar、NavigationBar 和 TabBar 的高度：&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;49&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有 NavigationBar 和 ToolBar，&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的 frame 为 (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;372&lt;/span&gt;)。即 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的布局的起点从 NavigationBar 下开始，高度去掉了 StatusBar、NavigationBar 和 ToolBar 的高度：&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要注意的是：如果你在 - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad 方法中观察 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的 frame 得到的结果始终是 (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;480&lt;/span&gt;)，可见这个值的不对的，所以当我们需要对页面进行布局时正确的方式是在- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillLayoutSubviews 中处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* extendedLayoutIncludesOpaqueBars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extendedLayoutIncludesOpaqueBars 这个属性是对 edgesForExtendedLayout 的补充。它的意思当 NavigationBar、TabBar、TooBar 这些 Bar 不是半透明时(Bar 的 translucent 属性值为 &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;)，如果设置 extendedLayoutIncludesOpaqueBars 为 &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;，则不会将 View Controller 的页面布局延伸至全屏，如果设置为 &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;，则坚持延伸至全屏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从 iOS &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 开始，NavigationBar、TabBar、TooBar 这些 Bar 默认都是半透明的，这时这个属性不会起到效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* automaticallyAdjustsScrollViewInsets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当我们采用全屏布局设置了 edgesForExtendedLayout 为 &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeAll&lt;/span&gt;，而此时 View Controller 的 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view 的第一个 Subview 是 &lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; 类型或其子类型(如：&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 等)时，automaticallyAdjustsScrollViewInsets 这个属性就会被用来辅助我们对 &lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; 类的视图进行布局。automaticallyAdjustsScrollViewInsets 默认值即为 &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拿 &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 来举例，你希望你的 &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 的内容从 NavigationBar 底部开始展示(因为不这样的话就会被 NavigationBar 遮住一部分)，同时还需要在滑动时，&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 的布局又能填满全屏。这时你只需要设置 automaticallyAdjustsScrollViewInsets 为 &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; 即可，系统会帮你调整 &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 的 contentInset 来实现效果使其中的内容不会被 NavigationBar、TabBar、TooBar 挡住。你可以同样在 - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillLayoutSubviews 观察 &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 的 contentInset 的值。当你设置它为 &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; 时，&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; 的 contentInset 则不会被被设置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iOS &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 以后 View Controlle
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>读如何高效学习</title>
    <link href="http://yoursite.com/2016/07/03/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E8%AF%BB%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/07/03/读书生活/读如何高效学习/</id>
    <published>2016-07-03T01:19:56.000Z</published>
    <updated>2016-08-11T01:58:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这两天粗读了一遍如何高效学习这本书，做个简单的小结。书中提到了很多观点和方法，有很多关于“整体性学习”的阐述，个人在理解上还不算深刻，通过整理书后的小结及日常的应用，希望能对自己的学习生活起到正向作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整体性学习策略强调将信息编织到知识网络中，而不是给自己加上机械记忆的负担，这个策略的基础有以下几个方面。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 结构 --- 关于某个学科的知识之间联系的综合，它将是你大脑中的城市。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 模型 --- 将信息压缩成最基本的单元，模型是结构的种子，形成模型的方法包括比喻法，内在化和图表法，模型是你的知识道路交通图中重要的几个十字路口。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 高速公路 --- 不同结构之间的联系，有助于创造性思考。“跳出盒子之外思考”很好地描述了这种跳出原有结构，从其他结构来观察原有结构的思考方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;整体性学习有5个步骤，但是并非按部就班，知识大体按照此顺序进行，不能拘泥于这种顺序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 获取 --- 通过感官获取信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 理解 --- 明白信息的表面意思&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 拓展 --- 与其他信息联系，拓展有三种主要的方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a 深度拓展 --探究知识背景&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b 横向拓展 --探究知识关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c 纵向拓展 --与其他结构联系后，从其他结构的角度探究知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 纠错 --- 删除错误联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 应用 ---将知识应用到各种情境中去，包括现实生活&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;信息的类型有以下五种：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 随意信息 ： 事实，日期，列表，规则以及某种顺序。信息特点是没有逻辑分类或相互关系不强&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 观点信息 ： 信息的唯一目的就是支持或者反对某种观点。容量在这是最重要的，而不是能记住&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 过程信息 ： 它是指某种技能的信息。需要反复练习，但是容易记住&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 具体信息 ： 容易视觉化的信息，一般是与实际紧密兰溪的信息，容易有自己的经验&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 抽象信息 ： 信息不容易有自己的经验，数学，哲学，物理学都是非常抽象的领域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;技术一览：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;快速阅读&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 指读法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 联系阅读&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 积极阅读，改善边度边学习的效率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;笔记流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 不要呆板，僵硬，貌似层次分明的记笔记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在卸下来的观点之间建立联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比喻法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;寻找历史中的故事，图像或是过程，它与我们现在学习的东西有某种相似性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;内在化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 为你正在学习的东西创造脑海中的图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在这幅图像上加入其它感官和情感&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 寻找图像不适用或不足的地方，防止产生错误的联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;图表法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创造流程图，概念图或图像，将若干观念联系在一起&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;联想法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创造一系列容易视觉化的符号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在条目之间创造联系，这种联系是可以“看得见的奇特场景”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在第一个条目和触发物之间建立联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;挂钩法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;与联想法相似，只不过我们是把每一个条目与事先建立好容易回忆的0-12的视觉符号相联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;信息压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;记忆术-- 压缩若干知识，用一个单词代替&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;图像联系-- 创造一幅能联系若干知识的图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;笔记压缩-- 用寥寥几页纸缩写内容庞大的笔记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实际应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;寻找将知识用于你的日常生活&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;模型纠错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经常性地解决各种问题，以发现整体性知识网络中的潜在错误。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;已项目为基础学习&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;建立一个大约需要1-3个月完成的项目，从而逼迫自己不断的学习，实践和解决各种各样的问题，这对自我教育来说是有用的练习，特别实在没有什么知识结构可以指导时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高效率学生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;管理能量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 保持体形，健康饮食，不要熬夜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 一周休息一天&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 不要“学习”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 绝不拖延&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 建立每周目标和每日目标清单以保持注意力&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 将那些类似的，散在的工作集中起来批量处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 有组织&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 拥有一个日历和做事清单，永远随身携带一个笔记本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两天粗读了一遍如何高效学习这本书，做个简单的小结。书中提到了很多观点和方法，有很多关于“整体性学习”的阐述，个人在理解上还不算深刻，通过整理书后的小结及日常的应用，希望能对自己的学习生活起到正向作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;fig
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
