<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>spike 代码之美</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-09T09:07:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS开发流程</title>
    <link href="http://yoursite.com/2016/08/09/iOS/iOS%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/08/09/iOS/iOS开发流程/</id>
    <published>2016-08-09T07:28:26.000Z</published>
    <updated>2016-08-09T09:07:30.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是证书&quot;&gt;&lt;a href=&quot;#什么是证书&quot; class=&quot;headerlink&quot; title=&quot;什么是证书&quot;&gt;&lt;/a&gt;什么是证书&lt;/h3&gt;&lt;p&gt;由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书&lt;/p&gt;
&lt;h3 id=&quot;什么时候需要证书&quot;&gt;&lt;a href=&quot;#什么时候需要证书&quot; class=&quot;headerlink&quot; title=&quot;什么时候需要证书&quot;&gt;&lt;/a&gt;什么时候需要证书&lt;/h3&gt;&lt;p&gt;只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名&lt;/p&gt;
&lt;h3 id=&quot;证书如何获得&quot;&gt;&lt;a href=&quot;#证书如何获得&quot; class=&quot;headerlink&quot; title=&quot;证书如何获得&quot;&gt;&lt;/a&gt;证书如何获得&lt;/h3&gt;&lt;p&gt;首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 provisioning portal 提交公钥后换取, 后续证书在使用时会验证本地私钥&lt;br&gt;1在Mac系统中进入”钥匙窜访问”,选择“钥匙串访问”-“证书助理”-“从证书颁发机构请求证书”,将相关请求文件保存到桌面。已做后续上传之用。&lt;br&gt;2.在production处点击添加，导入刚才生成的文件，会生成相应的证书，下载到桌面双击安装。重新回到开发者中心Member Center,在“Identifiers”-“App IDs”中创建一个应用对应的App ID，当前使用的是Explicit App ID。&lt;br&gt;3.在Provisioning Profiles中添加一个与刚刚创建的AppID相应的Profile，选择“In House”（此处类型可根据需要选择）创建的Provisioning File选择刚刚创建的App ID:&lt;br&gt;创建并生成Profile后，下载到本地，双击打开，添加到资料库中,然后&lt;br&gt;4.Xcode在Build Phases中找到Code Signing，把Provisioning File设置刚才创建描述文件.在Coding Signing Identity选择Distribution：然后在xcode中选择product –archive进行导出ipa文件，导出以后可进行安装。&lt;/p&gt;
&lt;h3 id=&quot;我生成的私钥如何共享给团队成员&quot;&gt;&lt;a href=&quot;#我生成的私钥如何共享给团队成员&quot; class=&quot;headerlink&quot; title=&quot;我生成的私钥如何共享给团队成员&quot;&gt;&lt;/a&gt;我生成的私钥如何共享给团队成员&lt;/h3&gt;&lt;p&gt;在 Keychain Access 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 p12 证书后就完整包含了证书和私钥&lt;/p&gt;
&lt;h3 id=&quot;各流程中证书的需求情况&quot;&gt;&lt;a href=&quot;#各流程中证书的需求情况&quot; class=&quot;headerlink&quot; title=&quot;各流程中证书的需求情况&quot;&gt;&lt;/a&gt;各流程中证书的需求情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;模拟器调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真机调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;描述文件(Provisioning Profiles)&lt;/p&gt;
&lt;p&gt;开发者证书(ios_development.cer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打包和发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;描述文件(Provisioning Profiles)&lt;/p&gt;
&lt;p&gt;可用于发布的开发者证书(ios_distribution.cer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息推送后端服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;apns 证书&lt;/p&gt;
&lt;h3 id=&quot;开发中常见的证书及相关文件介绍&quot;&gt;&lt;a href=&quot;#开发中常见的证书及相关文件介绍&quot; class=&quot;headerlink&quot; title=&quot;开发中常见的证书及相关文件介绍&quot;&gt;&lt;/a&gt;开发中常见的证书及相关文件介绍&lt;/h3&gt;&lt;p&gt;CSR(certificate request) 文件&lt;br&gt;用于换取证书的公钥文件, 实际是在本地基于 RSA 加密得到配对的密钥, 私钥存于 Keychain Access 用于签名, 公钥作为换取证书的凭证&lt;/p&gt;
&lt;p&gt;开发者证书&lt;br&gt;由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种&lt;br&gt;cer 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 p12 文件&lt;/p&gt;
&lt;p&gt;生成方法&lt;br&gt;在 开发者中心 “certificates” 面板中添加 certificate 并上传刚刚生成的 CSR 文件, 获取 ios_development.cer&lt;/p&gt;
&lt;h3 id=&quot;几种常见的分发途径&quot;&gt;&lt;a href=&quot;#几种常见的分发途径&quot; class=&quot;headerlink&quot; title=&quot;几种常见的分发途径&quot;&gt;&lt;/a&gt;几种常见的分发途径&lt;/h3&gt;&lt;p&gt;ad-hoc&lt;br&gt;打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&amp;amp;url=&lt;a href=&quot;https://example.com/manifest.plist&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://example.com/manifest.plist&lt;/a&gt;) 完成安装&lt;/p&gt;
&lt;p&gt;最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道&lt;/p&gt;
&lt;p&gt;in-house&lt;br&gt;针对企业内部用户进行分发, 相比 ad-hoc 无安装量上限&lt;/p&gt;
&lt;p&gt;iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装 &lt;a href=&quot;https://support.apple.com/en-us/HT204245&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://support.apple.com/en-us/HT204245&lt;/a&gt;&lt;br&gt;TestFlight&lt;br&gt;仅支持 iOS8.0 以上, 不需要对设备 udid 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 TestFlight 客户端&lt;/p&gt;
&lt;p&gt;这种方式非常便于推送应用更新和收集测试信息&lt;/p&gt;
&lt;p&gt;导出 ipa 包, 越狱安装&lt;br&gt;如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 itools 等第三方工具安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/mac/Desktop/Self/myblog/source/_posts/img/bluecycle.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是证书&quot;&gt;&lt;a href=&quot;#什么是证书&quot; class=&quot;headerlink&quot; title=&quot;什么是证书&quot;&gt;&lt;/a&gt;什么是证书&lt;/h3&gt;&lt;p&gt;由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>观呼吸</title>
    <link href="http://yoursite.com/2016/08/09/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E8%A7%82%E5%91%BC%E5%90%B8/"/>
    <id>http://yoursite.com/2016/08/09/读书生活/观呼吸/</id>
    <published>2016-08-09T01:49:08.000Z</published>
    <updated>2016-08-09T03:48:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从现在开始坚持一个月时间，每天练习最少5分钟，你会发现的注意力会有明显的变化。&lt;/p&gt;
&lt;p&gt;自从你开始了你的瑜伽练习之后，你就会知道一点，那就是瑜伽呼吸。很多人都知道，在练习瑜伽时要集中注意力，观察自己的呼吸，都明白呼吸在瑜伽练习中的地位，可是，如何能做到这一点，如何能在练习中集中自己的注意力，观察自己的呼吸呢，这是很多人的难题？&lt;/p&gt;
&lt;p&gt;呼吸是我们人类最基础的本能，没有呼吸就没有生命。然而，现代生活的快节奏和压力，让不正确的呼吸方法影响着我们的健康和身心。&lt;/p&gt;
&lt;p&gt;初学瑜伽的人很难将呼吸和冥想维持在一个小时以上，这就说明要想控制自己的身心是一件非常困难的事。&lt;/p&gt;
&lt;p&gt;很普遍的现象是，多数人在练习冥想和呼吸时，思绪四处飘荡。我在练习瑜伽时将近有一年的时间处于这种状态，练习时很难集中自己的注意力，练习的效果不明显。在这个过程中，我有意思地去练习，坚持到现在，已经逐步地改善，懂得了如何去观察自己的呼吸，让瑜伽呼吸成了一件很自然的调节自己的方式。&lt;/p&gt;
&lt;p&gt;其实方法并不难，首先，在练习之初，你可以在一天24小时中不同的时候去观察自己的呼吸，哪怕1分钟或更短，只要开始去做，你就会发现变化的。你每天去观察，将观察日常化。&lt;/p&gt;
&lt;p&gt;怎样的呼吸是很自然的，知道自己的情绪和精神状态，你会发现，你身心状态的不同，你的呼吸是有变化的，激动紧张的时候，你的呼吸是急促的，首先你只要去注意不同状态下的呼吸，你就会意识到你自己的心理、精神和身体的变化，如果遇上这样的状况，你只需停下来，引导自己放慢呼吸速度，让呼吸开始变得平稳有节奏，自我调节身心，那么，你已经开始学会了观察了，难点在于，你要意思到自己的不良状态，当你意思到以后，你已经大大地进了一步。&lt;/p&gt;
&lt;p&gt;其次，你就可以开始有意思地逐步练习，方法很多：&lt;/p&gt;
&lt;p&gt;1、最简单的方法，你只要找一个舒适的姿势，闭上眼睛，缓慢地呼吸，完全放松，让自己的呼吸自然就好，这个方法是让你养成一个良好的呼吸方法。&lt;/p&gt;
&lt;p&gt;2、数数是最常见的方法之一：以一个呼吸为单位，一呼一吸为一个单位，吸气为5下，那么呼气也为5下，你在心里默数，每天坚持练习，时间不用很长，随着你练习的深入，你可以将呼吸放慢，做到10下，以后逐步做到呼气比吸气稍长点。坚持练习，你会发现美妙的变化的。&lt;/p&gt;
&lt;p&gt;3、开始好奇地观察你的呼吸，去观察你身体的哪些部位能感觉到呼吸（鼻孔？喉咙？胸部，腹部？），感觉气体如何进入到你的身体？感觉呼吸的深度？呼吸流畅吗？感觉腹部的起伏。&lt;/p&gt;
&lt;p&gt;4、可以开始更深的观察，去感觉你的呼吸的质量，是顺畅还是困难？是浅还是深？观察的时候要有耐心，你只要大概的了解就好，不要强迫自己，不要担心自己的方式是否正确，你只要观察，让呼吸自然有节奏就好。&lt;/p&gt;
&lt;p&gt;5、去观察吸气和呼气的不同，吸气是饱满的，呼气是深长的，我还遇到过一种现象，有的学员问我，我怎么在练习瑜伽呼吸以后，腹部变大了，这是因为在练习的时候，只注意了吸气，她的吸气是饱满扩张的，而却忘了呼气的深长，没有达到底端，呼气时收缩腹部，尽量排空体内的气体，要注意观察吸气和呼气的长短。&lt;/p&gt;
&lt;p&gt;6、感觉一吸一呼之间的身体的放松，让自己沉静在缓慢深长的呼吸中，停止了纷乱的思绪。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从现在开始坚持一个月时间，每天练习最少5分钟，你会发现的注意力会有明显的变化。&lt;/p&gt;
&lt;p&gt;自从你开始了你的瑜伽练习之后，你就会知道一点，那就是瑜伽呼吸。很多人都知道，在练习瑜伽时要集中注意力，观察
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS-事件</title>
    <link href="http://yoursite.com/2016/08/08/iOS/iOS-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/08/08/iOS/iOS-事件/</id>
    <published>2016-08-08T11:02:47.000Z</published>
    <updated>2016-08-09T01:03:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;事件分类&quot;&gt;&lt;a href=&quot;#事件分类&quot; class=&quot;headerlink&quot; title=&quot;事件分类&quot;&gt;&lt;/a&gt;事件分类&lt;/h3&gt;&lt;p&gt;对于 iOS 设备用户来说，他们操作设备的方式主要有三种：触摸屏幕、晃动设备、通过遥控设施控制设备。对应的事件类型有以下三种：&lt;/p&gt;
&lt;p&gt;触屏事件（Touch Event）&lt;br&gt;运动事件（Motion Event）&lt;br&gt;远端控制事件（Remote-Control Event）&lt;/p&gt;
&lt;h3 id=&quot;响应者链&quot;&gt;&lt;a href=&quot;#响应者链&quot; class=&quot;headerlink&quot; title=&quot;响应者链&quot;&gt;&lt;/a&gt;响应者链&lt;/h3&gt;&lt;p&gt;当发生事件响应时，必须知道由谁来响应事件。在 iOS 中，由响应者链来对事件进行响应。&lt;/p&gt;
&lt;p&gt;所有事件响应的类都是 UIResponder 的子类，响应者链是一个由不同对象组成的层次结构，其中的每个对象将依次获得响应事件消息的机会。当发生事件时，事件首先被发送给第一响应者，第一响应者往往是事件发生的视图，也就是用户触摸屏幕的地方。事件将沿着响应者链一直向下传递，直到被接受并做出处理。一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件被交由它处理，如果它不处理，事件就会被传递给它的视图控制器对象 ViewController（如果存在），然后是它的父视图（superview）对象（如果存在），以此类推，直到顶层视图。接下来会沿着顶层视图（top view）到窗口（UIWindow 对象）再到程序（UIApplication 对象）。如果整个过程都没有响应这个事件，该事件就被丢弃。一般情况下，在响应者链中只要由对象处理事件，事件就停止传递。&lt;/p&gt;
&lt;p&gt;一个典型的事件响应路线如下：&lt;/p&gt;
&lt;p&gt;First Responser –&amp;gt; The Window –&amp;gt; The Application –&amp;gt; nil（丢弃）&lt;br&gt;我们可以通过 [responder nextResponder] 找到当前 responder 的下一个 responder，持续这个过程到最后会找到 UIApplication 对象。&lt;/p&gt;
&lt;p&gt;通常情况下，我们在 First Responder （一般也就是用户当前触控的 View ）这里就会响应请求，进入下面的事件分发机制。&lt;/p&gt;
&lt;h3 id=&quot;事件分发&quot;&gt;&lt;a href=&quot;#事件分发&quot; class=&quot;headerlink&quot; title=&quot;事件分发&quot;&gt;&lt;/a&gt;事件分发&lt;/h3&gt;&lt;p&gt;第一响应者（First responder）指的是当前接受触摸的响应者对象（通常是一个 UIView 对象），即表示当前该对象正在与用户交互，它是响应者链的开端。响应者链和事件分发的使命都是找出第一响应者。&lt;/p&gt;
&lt;p&gt;iOS 系统检测到手指触摸 (Touch) 操作时会将其打包成一个 UIEvent 对象，并放入当前活动 Application 的事件队列，单例的 UIApplication 会从事件队列中取出触摸事件并传递给单例的 UIWindow 来处理，UIWindow 对象首先会使用 hitTest:withEvent:方法寻找此次 Touch 操作初始点所在的视图(View)，即需要将触摸事件传递给其处理的视图，这个过程称之为 hit-test view。&lt;/p&gt;
&lt;p&gt;hitTest:withEvent:方法的处理流程如下:&lt;/p&gt;
&lt;p&gt;首先调用当前视图的 pointInside:withEvent: 方法判断触摸点是否在当前视图内；&lt;br&gt;若返回 NO, 则 hitTest:withEvent: 返回 nil，若返回 YES, 则向当前视图的所有子视图 (subviews) 发送 hitTest:withEvent: 消息，所有子视图的遍历顺序是从最顶层视图一直到到最底层视图，即从 subviews 数组的末尾向前遍历，直到有子视图返回非空对象或者全部子视图遍历完毕；&lt;br&gt;若第一次有子视图返回非空对象，则 hitTest:withEvent: 方法返回此对象，处理结束；&lt;br&gt;如所有子视图都返回空，则 hitTest:withEvent: 方法返回自身 (self)。&lt;br&gt;一个示例性的代码实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *touchView = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ([self pointInside:point withEvent:event] &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (!self.hidden) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       self.userInteractionEnabled &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (self.alpha &amp;gt;= 0.01f)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (UIView *subView in self.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subview convertPoint:point fromView:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            UIView *subTouchView = [subView hitTest:subPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (subTouchView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                touchView = subTouchView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        touchView = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return touchView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;p&gt;如果最终 hit-test 没有找到第一响应者，或者第一响应者没有处理该事件，则该事件会沿着响应者链向上回溯，如果 UIWindow 实例和 UIApplication 实例都不能处理该事件，则该事件会被丢弃（这个过程即上面提到的响应值链）；&lt;br&gt;hitTest:withEvent: 方法将会忽略隐藏 (hidden=YES) 的视图，禁止用户操作 (userInteractionEnabled=NO) 的视图，以及 alpha 级别小于 0.01(alpha&amp;lt;0.01)的视图。如果一个子视图的区域超过父视图的 bound 区域(父视图的 clipsToBounds 属性为 NO，这样超过父视图 bound 区域的子视图内容也会显示)，那么正常情况下对子视图在父视图之外区域的触摸操作不会被识别, 因为父视图的 pointInside:withEvent: 方法会返回 NO, 这样就不会继续向下遍历子视图了。当然，也可以重写 pointInside:withEvent: 方法来处理这种情况。&lt;br&gt;我们可以重写 hitTest:withEvent: 来达到某些特定的目的。&lt;br&gt;CYLTabBarController是一个支持自定义 Tab 控件的开源项目。在 TabBar 当中，为了支持 TabBar 按钮大小超过 TabBar Frame 范围时也可以响应，它的实现就是重载了 hitTest 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Capturing touches on a subview outside the frame of its superview&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!self.clipsToBounds &amp;amp;&amp;amp; !self.hidden &amp;amp;&amp;amp; self.alpha &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (UIView *subview in self.subviews.reverseObjectEnumerator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CGPoint subPoint = [subview convertPoint:point fromView:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            UIView *result = [subview hitTest:subPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (result != nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到和上面的示例代码的差距，主要就在于取消了 pointInside 函数的检测，让我们可以捕获到当前 Frame 范围以外的子 View 的触控事件。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件分类&quot;&gt;&lt;a href=&quot;#事件分类&quot; class=&quot;headerlink&quot; title=&quot;事件分类&quot;&gt;&lt;/a&gt;事件分类&lt;/h3&gt;&lt;p&gt;对于 iOS 设备用户来说，他们操作设备的方式主要有三种：触摸屏幕、晃动设备、通过遥控设施控制设备。对应的事件类型有以下三种
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>实例方法、类方法、Category、Protocol</title>
    <link href="http://yoursite.com/2016/08/08/iOS/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E3%80%81Category%E3%80%81Protocol/"/>
    <id>http://yoursite.com/2016/08/08/iOS/实例方法、类方法、Category、Protocol/</id>
    <published>2016-08-08T07:57:34.000Z</published>
    <updated>2016-08-08T10:08:58.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;实例方法&quot;&gt;&lt;a href=&quot;#实例方法&quot; class=&quot;headerlink&quot; title=&quot;实例方法&quot;&gt;&lt;/a&gt;实例方法&lt;/h3&gt;&lt;p&gt;以-开头的方法是实例方法。它属于类的某一个或某几个实例对象，即类对象必须实例化后才可以使用的方法.&lt;/p&gt;
&lt;h3 id=&quot;类方法&quot;&gt;&lt;a href=&quot;#类方法&quot; class=&quot;headerlink&quot; title=&quot;类方法&quot;&gt;&lt;/a&gt;类方法&lt;/h3&gt;&lt;p&gt;以+开头的方法是类方法。Objc中的类方法类似Java中的static静态方法，它是属于类本身的方法，不属于类的某一个实例对象，所以不需要实例化类，用类名即可使用.所以我们使用类方法一般有两种情况：&lt;br&gt;创建一些事物，比如特殊格式的字符串等。&lt;br&gt;作为工具方法，比如返回常数等。&lt;br&gt;OC 中的方法只要声明在 @interface里，就可以认为都是公有的。&lt;/p&gt;
&lt;h3 id=&quot;Category&quot;&gt;&lt;a href=&quot;#Category&quot; class=&quot;headerlink&quot; title=&quot;Category&quot;&gt;&lt;/a&gt;Category&lt;/h3&gt;&lt;p&gt;它可以让我们动态的在已经存在的类中添加新的行为，即方法。对类进行扩展时不需要访问其源码，也不需要创建子类。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Deck.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Deck : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)randomDrawCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是类Deck的声明文件，其中包含一个实例方法randomDrawCard，如果我们想在不修改原始类、不增加子类的情况下，为该类增加一个drawCardFromTop方法，只需要定义两个文件Deck+DrawCardFromTop.h和Deck+DrawCardFromTop.m，在声明文件和实现文件中用()把Category的名称括起来即可，声明文件如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Deck+DrawCardFromTop.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Deck.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Deck(DrawCardFromTop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实现文件如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Deck+DrawCardFromTop.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Deck+DrawCardFromTop.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation Deck(DrawCardFromTop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //TODO.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DrawCardFromTop是Category的名称。这里一般使用约定俗成的习惯，将声明文件和实现文件统一采用”原类名+Category名”的方式命名。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用也非常简单，引入Category的声明文件，然后正常调用即可：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// main.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Deck+DrawCardFromTop.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Deck *deck = [[Deck alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card *card = [deck drawCardFromTop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Extension&quot;&gt;&lt;a href=&quot;#Extension&quot; class=&quot;headerlink&quot; title=&quot;Extension&quot;&gt;&lt;/a&gt;Extension&lt;/h3&gt;&lt;p&gt;Extension 可以认为是一种匿名的 Category， Extension 与 Category 有如下几点显著的区别：&lt;br&gt;使用 Extension 必须有原有类的源码&lt;br&gt;Extension 可以在类中添加新的属性和实例变量，Category 不可以（注：在 Category 中实际上可以通过运行时添加新的属性）&lt;br&gt;Extension 里添加的方法必须要有实现（没有实现编译器会给出警告）&lt;br&gt;Extension 很常见的用法，是用来给类添加私有的变量和方法，用于在类的内部使用。例如在 interface 中定义为 readonly 类型的属性，在实现中添加 extension，将其重新定义为 readwrite，这样我们在类的内部就可以直接修改它的值，然而外部依然不能调用 setter 方法来修改。示例代码如下（来自苹果官方文档）:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XYZPerson.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface XYZPerson : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (readonly) NSString *uniqueIdentifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XYZPerson.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface XYZPerson ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (readwrite) NSString *uniqueIdentifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XYZPerson&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Protocol&quot;&gt;&lt;a href=&quot;#Protocol&quot; class=&quot;headerlink&quot; title=&quot;Protocol&quot;&gt;&lt;/a&gt;Protocol&lt;/h3&gt;&lt;p&gt;OC是单继承的，OC中的类可以实现多个 protocol 来实现类似 C++ 中多重继承的效果。&lt;/p&gt;
&lt;p&gt;Protocol 类似 Java 中的 interface，定义了一个方法列表，这个方法列表中的方法可以使用 @required， @optional 标注，以表示该方法是否是客户类必须要实现的方法。 一个 protocol 可以继承其他的 protocol 。&lt;/p&gt;
&lt;p&gt;@protocol TestProtocol&lt;nsobject&gt; // NSObject也是一个 Protocol，这里即继承 NSObject 里的方法&lt;br&gt;-(void)Print;&lt;br&gt;@end&lt;/nsobject&gt;&lt;/p&gt;
&lt;p&gt;@interface B : NSObject&lt;testprotocol&gt;&lt;br&gt;-(void)Print; // 默认方法是@required的，即必须实现&lt;br&gt;@end&lt;br&gt;Delegate（委托）是 Cocoa 中常见的一种设计模式，其实现依赖于 protocol 这个语言特性。&lt;/testprotocol&gt;&lt;/p&gt;
&lt;p&gt;简单来说，Protocol不属于任何一个类，它只是一个方法列表，任何类都可以对其中声明的方法进行实现。这种设计模式一般称为代理模式（delegation）。你可以通过Protocol定义各种行为，在不同的场景采用不同的实现方式。在iOS和OS X开发中，Apple采用了大量的代理模式来实现MVC中View和Controller的解耦。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Protocol有两种声明的方式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在单独的声明文件（.h文件）中声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在某个类的声明的文件中声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上两种方式视具体情况而定，但是在代码规范上都是一致的：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// HandleDeckDelegate.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol HandleDeckDelegate &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)ShuffleDeck;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)CuttingDeck;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上述代码中有两个关键字，@required和@optional，表示如果要实现这个协议，那么ShuffleDeck方法是必须要实现的，CuttingDeck则是可选的，如果不注明，那么方法默认是@required的，必须实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么如何实现这个Protocol呢，很简单，创建一个普通的Objective-C类，如果Protocol使用单独的.h文件声明，那么在该类的.h声明文件中引入包含Protocol的.h文件，如果Protocol是声明在一个相关类中，那么就需要引入该类的.h文件。之后声明采用这个Protocol即可：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Deck.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;HandleDeckDelegate.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Deck : NSObject&amp;lt;HandleDeckDelegate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)randomDrawCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用尖括号（&amp;lt;…&amp;gt;）括起来的HandleDeckDelegate就是我们创建的Protocol。如果要采用多个Protocol，可以在尖括号内引入多个Protocol名称，并用逗号隔开即可。例如&amp;lt;HandleDeckDelegate,xxxDelegate&amp;gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Deck.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Card.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation Deck&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Card *)drawCardFromTop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //TODO.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)ShuffleDeck&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //TODO.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于CuttingDeck方法是可选的，所以我们只实现了ShuffleDeck。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用场景&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objective-C里的Protocol和Java语言中的接口很类似，如果一些类之间没有继承关系，但是又具备某些相同的行为，则可以使用Protocol来描述它们的关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同的类，可以遵守同一个Protocol，在不同的场景下注入不同的实例，实现不同的功能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要注意的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据约定，框架中后缀为Delegate的都是Protocol，例如UIApplicationDelegate，UIWebViewDelegate等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Protocol本身是可以继承的，比如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -(void)methodA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol B &amp;lt;A&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -(void)methodB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你要实现B，那么methodA和methodB都需要实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Protocol是与任何类都无关的，任何类都可以实现定义好的Protocol，如果我们想知道某个类是否实现了某个Protocol，那么我们可以用conformsToProtocol方法进行判断：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[obj conformsToProtocol:@protocol(ProcessDataDelegate)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结&lt;br&gt;Protocol最常用的就是委托代理模式，Cocoa框架中大量采用了这种模式实现数据和UI的分离。例如UIView产生的所有事件，都是通过委托的方式交给Controller完成。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实例方法&quot;&gt;&lt;a href=&quot;#实例方法&quot; class=&quot;headerlink&quot; title=&quot;实例方法&quot;&gt;&lt;/a&gt;实例方法&lt;/h3&gt;&lt;p&gt;以-开头的方法是实例方法。它属于类的某一个或某几个实例对象，即类对象必须实例化后才可以使用的方法.&lt;/p&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
  <entry>
    <title>清醒思考的艺术</title>
    <link href="http://yoursite.com/2016/08/08/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://yoursite.com/2016/08/08/读书生活/清醒思考的艺术/</id>
    <published>2016-08-08T00:57:18.000Z</published>
    <updated>2016-08-09T01:02:00.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.幸存偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于日常生活中更容易看到成功、看不到失败，你会系统性地高估成功的希望。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[每位成功的作家背后都有100个作品卖不出去的作家，每个作品卖不出去的作家背后又有100个找不到出版社的作者，每个找不到出版社的作者背后又有数百个抽屉里沉睡着刚动笔的手稿的写作爱好者。而我们总是听到成功者的故事，认识不到作家的成功概率有多小。摄影师、企业家、艺术家、运动员、建筑师、诺贝尔奖得主、电视制作人和选美冠军的情况也是一样。媒体没兴趣去刨挖失败者的墓地，这事也不归他们负责。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.游泳选手身材错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;游泳选手之所以成为出色的游泳选手，是因为他们拥有这样的身材，他们的身材是一种选择标准，而不是他们运动的结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[模特儿天生丽质，因此才被选来拍化妆品广告，而不是化妆品让人漂亮。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.过度自信效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请对所有预测持怀疑态度，筹划任何事情都从悲观的角度出发。这样你才会真正有机会，更现实一些地判断形势。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.从众心理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.纠缠于沉没成本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你已经投资了什么并不重要，唯一重要的是现在的形势及你对未来的评估。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[电影很糟糕。1小时后我对妻子耳语说：“走吧，我们回家吧。”她回答：“肯定不行，我们不能白花30欧元买电影票。”“这算不上什么理由。”我抗议说，“30欧元已经花掉了，你在纠缠于沉没成本。”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;股市投资人经常成为沉没成本的受害者。他们在决定是否出售股票时常以买入价作为参照。当股价高于买入价时，就卖掉股票；如果股价低于买入价，就抱住不卖。这是不理智的，绝不可以让买入价处处扮演角色。唯一有效的是股市未来的前景（和可选投资未来的行情）。每个人都会出错，特别是在股市里。纠缠于沉没成本的不幸，其关键就是：你投资一只股票亏的钱越多，你越是抱紧它不放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;为什么会有这种荒谬行为呢？因为人类想努力表现得坚韧，坚韧是我们发出的可信信号。我们害怕矛盾。如果我们决定中断一个项目，我们就在制造矛盾：承认从前的想法与今天不同。继续执行一个无意义的项目是在推迟这一疼痛认识。那样我们就显得更坚韧。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.互惠偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我帮你，你帮我。在一开始就该拒绝别人的小恩小惠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[先赠予，再索取，这种温和的敲诈，在经济界广为流行。难怪超市中经常会有人让你免费品尝食物。先让你品尝，你就会感觉亏欠，很快就会购买。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某位美女在夜店不让别人请她喝饮料：“因为我不想要这种跟他上床的潜在义务。”这样做很明智。如果下回在超市里有人主动跟你搭讪，让你品尝葡萄酒、奶酪、火腿或橄榄，你就知道你为什么最好是拒绝他了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.确认偏误之一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;确认偏误是所有思维错误之父——它倾向于这样诠释新信息，让它们与我们现有的理论、世界观和信念相兼容。也就是过滤掉与我们的现有观点相矛盾的新信息。遇到「特殊情况」这个词，要格外小心，有意识地寻找反驳证据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[这里再举几个例子。我们大家都被迫就世界、生活、经济、投资、事业等提出种种理论。没有假设不行，可一种理论越是模糊，确认偏误就越强。谁在生活中抱有“人是善良的”想法，他会找到这一理论的足够证明；谁在生活中抱有“人是邪恶的”想法，他同样也能找到足够证明。慈善家和愤世嫉俗者，双方都将过滤掉反驳证据（相反的证据），得到支撑他们世界观的大量证明。 占星学家和经济学家的行事原则也是一样。他们的说法如此含糊，它们像磁铁一样吸引证明，例如“接下来的几星期你会经历悲伤的瞬间”、“中期看，美元存在贬值压力”。什么叫作中期？什么是贬值压力？与什么比会贬值——黄金、日元、比索、小麦、柏林克罗伊兹贝格区的房产还是咖喱烤肠的价格？ 宗教信念和哲学信念因其含糊性更是确认偏误的杰出温床，它在这里疯狂地滋生。信徒们一步步看到神存在的证明。神不直接现身——除了向沙漠里和偏僻山村里的文盲现身，从不出现在法兰克福或纽约这样的都市里——这表明确认偏误是多么强大，就连最有力的异议也被过滤掉了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.确认偏误之二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请你与确认偏误作斗争。请你写下你的信条——有关世界观、投资、婚姻、健康预防措施、节食、成功策略的，然后寻找反驳证据。干掉自己最心爱的理论，这是一桩艰苦的工作，但作为聪明人士，你不会躲避的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[很多写文章的作者（或记者）为了支持其观点，就会去找出几个“确认证据”，而他不会努力去挖掘反驳证据，所以说很多成功指南的书籍也是这样写出来的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;确认偏误是所有思维错误之父——它倾向于这样诠释新信息，让它们与我们现有的理论、世界观和信念相兼容。换句话说：我们过滤掉与我们的现有观点相矛盾（因此被称作反驳证据，不过它缺少合适的德语表达）的新信息。这是危险的。赫胥黎说过：“事实不因为被忽视而消失。”但我们恰恰是这么做的。投资大师沃伦·巴菲特也知道这一点，“人类最擅长这样过滤新信息，使现有解释仍然成立”。很可能，巴菲特之所以这么成功，就是因为他了解确认偏误的危险，于是强迫自己换位思考。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9.权威偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对权威的批判性越强，你就越自由，就越相信自己有更多的能力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[不管什么时候遇到一位专家，我都会设法向他挑战。请你也这么做。你对权威的批判性越强，你就越自由，就越相信自己有更多的能力。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.对比效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事物的价值该是怎么样就是怎么样，不因为和其他事物对比而改变。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[你在学生时代可能做过以下实验：你拿来两只桶，在第一只桶里倒进温水，在第二只桶里倒进冰水。你先将右手插进冰水里一分钟，然后将两只手同时插进温水里。你有什么感觉？左手感觉水是温的，右手却感觉水是烫的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;希德和哈利的故事与水的试验都是建立在对比效应的基础上：当我们同时面对某种难看、便宜、小的东西时，我们就会判断出另一种东西更漂亮、更贵、更大。我们很难作出绝对的判断。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对比效应是常见的思维错误之一。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;没有对比效应，就完全无法想象打折生意。一种从100欧元降到70欧元的产品，会显得比一直就卖70欧元的产品更便宜。而事实上最初的价格根本无关紧要。不久前一位投资者对我说：“这只股票便宜，因为它只有最高价的50%。”我轻轻摇摇头。股票价格永远不会“低”或“高”。它是怎么样就是怎么样，唯一值得考虑的是它从这一刻起是会涨还是会跌。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们就像鸟儿听到枪声一样会对对比做出反应。我们扑翅飞起，很快行动起来。不利的一面是，我们发觉不到逐渐发生的小变化。魔术师能够偷走你的表，是因为他对你身体的另一部位使劲用力，让你根本注意不到你手腕上的轻微接触。我们同样不会注意我们的钱是如何消失的。它的价值不断下跌，但我们发觉不到，因为通货膨胀是逐渐发生的。假如它以无情的税收形式让我们承担——原则上是这样的——我们就会发怒。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11.现成偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们根据现成的例子在想象世界，但外界现实的某种东西不会因为我们更容易想到而出现得更频繁。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[由于现成偏误，我们的脑子里总有一张错误的风险卡。于是我们系统性地高估了因飞机坠毁、汽车事故或谋杀而遇难的风险。我们低估了因为糖尿病或胃癌这样不太能引起轰动的方式死亡的风险。炸弹袭击要比我们认为的少得多，抑郁症则要常见得多。壮观、华丽或大声的一切，我们都高估了它们出现的概率。而无声、无形的一切，我们都低估了它们出现的概率。因为我们的大脑更容易接受壮观、华丽或大声的东西。我们的大脑是剧本式思维的，而不是量化思维的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某种东西重复出现，我们的大脑就很容易重新提取它。它并不一定是真的。纳粹领导人不就是经常重复“犹太人问题”，直到大众坚信存在一个严肃的问题吗？你只需要足够经常地重复“不明飞行物”、“生命能量”或“轮回”这些词，人们就会相信它们。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12.「在好转之前会先恶化」的陷阱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是确认偏误的一种变体，真正有效的措施会在短时间内就被看出成效，而不是被人顾左右而言他。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[“在好转之前会先恶化”的陷阱是确认偏误的一种变体。使用这个花招大大有利于一个对专业一窍不通或对事情没有把握的专业人员。如果情况继续走下坡路，就证明了他的预言是正确的。如果情况意外地回升了，客户开心，专业人员则可以将好转归功于他的能力。不管怎样——他总是对的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假设你将成为一名州长，但你对如何领导这个州一窍不通。你会怎么做呢？你预言将有“艰难的几年”，要求你的同胞们“勒紧裤腰带”，你许诺等“清洗”、“除渣”、“改组”的“棘手阶段”结束后形势就会好转。而你有意不涉及：低谷会有多长、多深。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;宗教为这一策略的成功提供了最好的证据。据说，在天堂降临地球之前，世界必须毁灭。灾难、大洪荒、火灾、死亡——它们必然会发生。信徒们会认为情形的任何恶化都是证明了预言，而每一好转都是上天的馈赠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结论：如果有人说：“在好转之前会先恶化”，你脑子里就应该敲响警钟。不过请小心：确实有那样的情形，先是再次下滑然后回升。事业的转换可能会耗费时间，会造成停发工资。一个企业的重组也需要一定的时间。但所有这些情况，人们很快就能看出措施是否有效。里程碑是明确的，是可以检测的。请你望着里程碑，而不是望着天空。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13.故事偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用故事扭曲和简化现实，它们排斥不合适编进故事的一切。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[这也就是为什么在广告中，经常会讲述一则感人的故事，而不是理性地罗列产品优点。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14.事后诸葛亮偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事后回顾时一切都显得是可以理解的、不可避免的。但是世界是不可预测的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15.司机的知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;真正有知识的人知道他们知道什么，也知道他们不知道什么。而「半瓶水」的人却从不会说出「我不知道」四个字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[你为什么不可以把新闻播音员说的话当真,知识有两种：一种是真知识，来自那些投入大量时间和思考以获得知识的人们，这种人如果来到他的“能力范围”之外，他要么什么也不说，要么就说“我不知道”； &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一种就是司机的知识，按芒格故事里的意思，司机是指那些装得好像他们知道的人。他们会模仿别人表演，他们也可能拥有动听的声音或具有说服力的形象。但他们传播的知识是空洞的，他们高谈阔论地挥霍着华丽词汇。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请你不要信任司机的知识。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16.控制错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 你实际控制的少于你以为的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [控制错觉就是相信我们能够控制或影响某种我们客观上无法控制或影响的东西。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在赌博时用左手大力地扔出骰子？真的管用吗？ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在曼哈顿横穿街道时，人们会按一个红绿灯按钮。事实上他们按的是一个不起作用的按钮。事实证明，这样他们就能更好地忍受在红绿灯前的等待。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17.激励过敏倾向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人们是对激励做出反应，而不是对激励背后的目的做出反应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[鼓励捉到死老鼠的政策却让人们养殖老鼠。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一则小笑话：投资大师查理走进一家渔具店，突然在一个支架前停下，拿 起一只一闪一闪、引人注目 的颜料钱包鱼饵，问店主：”请问，鱼类真的会喜欢这种东西吗？“店主笑笑：”查理，这玩意儿我们可不是卖给鱼的。“]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18.回归均值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;极端成绩与不太极端的成绩总是来回交替，有些措施可能并不真实有效，只是自然波动而已。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[医生、顾问、教练及心理治疗师的作用令人怀疑 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;极端成绩与不太极端的成绩总是来回交替，有些措施可能并不真实有效，只是自然波动而已。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;去年业绩不好，请了个顾问，今年业绩恢复正常了，是不是真的起作用了？还是回归均值在起作用？]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19.公地悲剧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;凡好处归个人而成本由集体承担的地方，就潜伏着公地悲剧。一处公共场所，希望通过教育、启蒙等手段来呼吁社会责任感来解决公地问题是不可能的。解决方法是公地私有化或加强管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[凡好处归个人而成本由集体承担的地方，就潜伏着公地悲剧。一处公共场所，希望通过教育、启蒙等手段来呼吁社会责任感来解决公地问题是不可能的。解决方法是公地私有化或加强管理。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20.结果偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们倾向于以结果判断决定——而不是当时作决定的过程。结果差并不一定意味着当时所作的决定不对，反之亦然。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[“成功猴”的故事说明：我们倾向于以结果判断决定——而不是当时作决定的过程。这种错误又叫史学家错误。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21.选择的悖论&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;过多的选择会降低生活质量。选择范围太大会导致无所适从，也导致做出更差的决定以及不满。请寻找适合自己标准的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[在端详面前的众多选项之前，仔细考虑你真正想要什么，请你写下你的标准，并务必遵守它们。永远作不出完美的选择，适合你的才是最好的。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22.讨喜偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;某人越讨喜，我们就越倾向于从这个人那儿买东西或者帮助他。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[所谓的传销（通过朋友销售）之所以管用，靠的就是讨喜偏误。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;复制&amp;quot;是销售的标准技巧，销售者设法复制对方的手势、语言和表情。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你在判断一笔生意时应该坚持不受卖方影响。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.禀赋效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们感觉我们拥有的东西比我们没有拥有的更有价值。不要抱着某种东西不放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[请将你拥有的视作&amp;quot;宇宙&amp;quot;临时留给你的某种东西。要知道你拥有的一切随时又会被拿走。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.奇迹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不可思议的意外事件的发生没什么可吃惊的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25.团体迷思&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一群聪明的人作出愚蠢的决定可能是因为成员错误以为自己的意见是正确的共识。无论何时，都要讲出自己的看法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26.忽视概率偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们是对一件事的预期强度做出反应，而不是对它的概率。我们缺少对概率的直觉理解。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27.零风险偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;风险越大，其中包含的感情成分越多，降低风险对我们的安慰就越小，这也就让我们过高地评价零风险.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[请你告别零风险的想象，学会怀着&amp;quot;没有什么是安全的&amp;quot;想法生活。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28.稀少性谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们对稀少性的典型反应时丧失清晰思考的能力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[因此请你仅按价格和作用来判断一样东西，而不要在乎它是否稀少。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29.忽视基本概率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重视统计规律，也就是基本概率。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30.赌徒谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;独立事件不存在平衡的力量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[赌徒谬误：一架飞机上同时有两枚炸弹的概率几乎为0，所以只要我带一颗，其他人就不可能带了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31.锚定效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;估计评定时，我们会选取某种熟悉的东西作为锚，然后从这开始判断方向。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32.归纳法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过以前的经验理论来估计现在的情形，然而没有什么事物是肯定的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33.规避损失&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;损失要比同样多的收益比我们的影响更大。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果你想说服某人，请不要用可能的收益做论据，而要说他这样做可以规避一种可能的损失。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人们害怕失去某种东西的想法要比获得某种同等价值的东西的想法强烈。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34.社会性懈怠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;团队在一起的时候，每个人的效率会比单独的时候低。尽可能通过彰显个人效率，来缓和团队的弊病。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35.指数增长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们容易理解线性增长却对指数增长没什么感觉，所以不要相信直觉，求助于计算器会是好方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[我们很容易就能理解线性增长，但我们对指数（或按百分比计算的）增长没有感觉。为什么？因为过去的进化没有让我们为此作好准备。我们祖先的经验大多是线性的。谁花费双倍的时间采摘，谁就会带回家双倍的莓果；谁同时将两只猛犸而不是一只驱逐到地渊上方，谁有肉吃的时间就会是双倍。石器时代几乎没有人遇到过指数增长的例子，但今天不同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有一位政治家说：“交通事故的数量每年递增7%。”老实说，我们无法直观地理解这意味着什么。 因此，请你使用一个窍门：计算倍增时间。请用数字70除以增长的百分比。在上述情况下，倍增时间为70÷7=10（年）。于是这位政治家的意思是：“交通事故的数量每10年翻一倍。”这相当令人警惕。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另一个例子：“物价上涨5%。”任何人听到这种说法，心里都会想：“不严重，5%又有什么大不了的。”让我们迅速计算一下倍增时间：70÷5=14（年）。14年后1欧元的价值只剩下了一半——对于所有有储蓄的人来说，这都是一件坏事。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假设你是一位新闻记者，接到一个统计，你所在城市登记在册的狗的数量逐年增长10%。你会给你的文章取个什么样的标题呢？肯定不是“养狗许可证数量每年上升10%”，这没人会理会。而是：“养狗成灾：仅仅7年，狗屎翻倍！”]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36.赢家的诅咒&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拍卖的赢家大多是事实上的输家。拍卖时的最高报价经常是系统性地过高。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37.基本特征谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;系统性地高估人的影响，在解释某些东西时低估情境因素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38.错误的因果关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;相互关系不等于因果关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[相关关系不等于因果关系。错误的因果关系几乎每天都将我们引入歧途。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;德国的出生率下降曲线和仙鹤配偶数量下降曲线惊人的相似，这是一个纯属巧合的相关关系，肯定不是因果关系。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39.光环效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们让某一个方面照花了眼睛，并由此推及全貌。这让我们看不到真实的特征，我们需要排除醒目的特征。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[想想评委转过身来听歌手的声音就是为了避免这种效应]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40.替代途径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有同样可能发生但没有发生的事情，而这些事可能将你拖入毁灭。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41.预测的错觉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;许多预测没有成本且大多是错的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[预言未来的人有两种：一种是一无所知的人，另一种是不知道他们自己一无所知的人。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42.关联谬误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;越有说服力的故事越会误导人。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43.框架效应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视表达方式的不同，我们会对同样的事情做出不同的反应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44.行动偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;即使毫无用处，也要采取行动。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果情况不明，请你不要采取任何行动，直到你能更好地分析形势。你要克制自己。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45.不作为偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;放弃引起的损害主观看起来更无害。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[如果你不是答案的一部分，你就是问题的一部分]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46.自利偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;成功归于自己，失败归于外因。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47.享乐适应症&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们工作、升迁，给自己购买更多漂亮的东西，但我们不会变得更幸福。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[一个人升职后在平均3个月后的幸福感又与先前一样了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（1）避免长期难以适应的负面效应，例如往返交通、噪音、慢性疲累等；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）对物质的东西只期待短期效果，例如汽车、房屋、分红、中彩票、得金奖等；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）持续的正面效应主要与你如何利用你的时间有关，要设法让自己得到尽可能多的自由时间和自主权，做你最爱做的事情。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48.自我选择偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要惊讶有你存在。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[一家公司想查明每个家庭平均有多少部电话（包括座机和手机）。在分析调查结果时，他们居然对没有一个家庭声称没有电话而感到吃惊。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49.联想偏误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经验有时让人变蠢。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[被烫过的猫永远不会再坐到热灶台上去——这是对的；但它也永远不会再坐到冷灶台上去了。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50.新手的运气&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假如开始时一切顺利，请务必多加小心。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51.认知失调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事后做出别的解释，让自己感觉好一点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[关于狐狸的&amp;quot;酸葡萄&amp;quot;的故事。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我买的股票虽然眼下有点弱，但极具潜力，这是一种极不理性的自欺欺人，只能用认知失调来解释。]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52.双曲贴现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个决定离现在越近，我们的「情感利息」就越多。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.幸存偏误&lt;/span&gt;&lt;br&gt;&lt;span cla
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>@property</title>
    <link href="http://yoursite.com/2016/08/06/iOS/property/"/>
    <id>http://yoursite.com/2016/08/06/iOS/property/</id>
    <published>2016-08-06T00:14:10.000Z</published>
    <updated>2016-08-08T01:33:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;gt;&lt;br&gt;@Property是声明属性的语法，它可以快速方便的为实例变量创建存取器，并允许我们通过点语法使用存取器。&lt;br&gt;存取器（accessor）：指用于获取和设置实例变量的方法。用于获取实例变量值的存取器是getter，用于设置实例变量值的存取器是setter。&lt;/p&gt;
&lt;h3 id=&quot;修饰词&quot;&gt;&lt;a href=&quot;#修饰词&quot; class=&quot;headerlink&quot; title=&quot;修饰词&quot;&gt;&lt;/a&gt;修饰词&lt;/h3&gt;&lt;p&gt;assign、weak、strong、retain、copy、nonatomic、atomic、readonly、readwrite&lt;/p&gt;
&lt;h4 id=&quot;assign&quot;&gt;&lt;a href=&quot;#assign&quot; class=&quot;headerlink&quot; title=&quot;assign&quot;&gt;&lt;/a&gt;assign&lt;/h4&gt;&lt;p&gt;1.这个修饰词是直接赋值的意思 , 整型/浮点型等数据类型都用这个词修饰 .&lt;br&gt;2.如果没有使用 weak strong retain copy 修饰 , 那么默认就是使用 assign 了. ( 它们之间是有你没我的关系 )&lt;br&gt;3.当然其实对象也可以用 assign 修饰 , 只是对象的计数器不会+1 . ( 与 strong 的区别 )&lt;br&gt;4.如果用来修饰对象属性 , 那么当对象被销毁后指针是不会指向 nil 的 . 所以会出现野指针错误 . ( 与weak的区别 )&lt;br&gt;assign（默认）：assign用于值类型，如int、float、double和NSInteger，CGFloat等表示单纯的复制。还包括不存在所有权关系的对象，比如常见的delegate。&lt;/p&gt;
&lt;h4 id=&quot;weak-ARC-对象&quot;&gt;&lt;a href=&quot;#weak-ARC-对象&quot; class=&quot;headerlink&quot; title=&quot;weak ( ARC )(对象)&quot;&gt;&lt;/a&gt;weak ( ARC )(对象)&lt;/h4&gt;&lt;p&gt;1.弱指针是针对对象的修饰词 , 就是说它不能修饰基本数据类型(int float) .&lt;br&gt;2.weak 修饰的引用计数器不会+1 , 也就是直接赋值 .&lt;br&gt;3.弱引用是为打破循环引用而生的 .&lt;br&gt;4.它最被人所喜欢的原因是 它所指向的对象如果被销毁 , 它会指向 nil . 从而不会出现野指针错误 .&lt;br&gt;在setter方法中，需要对传入的对象不进行引用计数加1的操作。&lt;br&gt;简单来说，就是对传入的对象没有所有权，当该对象引用计数为0时，即该对象被释放后，用weak声明的实例变量指向nil，即实例变量的值为0。weak关键字是IOS5引入的，IOS5之前是不能使用该关键字的。delegate 和 Outlet 一般用weak来声明。&lt;/p&gt;
&lt;h4 id=&quot;strong-ARC-对象&quot;&gt;&lt;a href=&quot;#strong-ARC-对象&quot; class=&quot;headerlink&quot; title=&quot;strong ( ARC )(对象)&quot;&gt;&lt;/a&gt;strong ( ARC )(对象)&lt;/h4&gt;&lt;p&gt;1.直接赋值并且对象的引用计数器 +1 .&lt;br&gt;2.在 ARC 里替代了 retain 的作用 .&lt;br&gt;strong是在IOS引入ARC的时候引入的关键字，是retain的一个可选的替代。表示实例变量对传入的对象要有所有权关系，即强引用。strong跟retain的意思相同并产生相同的代码，但是语意上更好更能体现对象的关系。&lt;/p&gt;
&lt;h4 id=&quot;retain-MRC&quot;&gt;&lt;a href=&quot;#retain-MRC&quot; class=&quot;headerlink&quot; title=&quot;retain ( MRC )&quot;&gt;&lt;/a&gt;retain ( MRC )&lt;/h4&gt;&lt;p&gt;1.release 旧对象( 旧对象计数器 -1 ) , retain 新对象( 新对象计数器 +1 ) , 然后指向新对象 .&lt;br&gt;2.在set方法里面是这样的 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; if (_dog)
{ 
  [_dog release]; 
} 
_dog = [dog retain];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;copy-ARC-MRC&quot;&gt;&lt;a href=&quot;#copy-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;copy ( ARC/MRC )&quot;&gt;&lt;/a&gt;copy ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.copy 在 MRC 时是这样做的 release 旧对象( 旧对象的引用计数器 -1 ) , copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象 .（新对象是指最终指向的那个对象，不管深拷贝还是浅拷贝）&lt;/p&gt;
&lt;p&gt;1.1在set方法里面是这样的 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (_dog) 
{ 
[_dog release]; 
} 
_dog = [dog copy];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.copy 在 ARC 时是这么干的 copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象 .&lt;/p&gt;
&lt;p&gt;2.1在set方法里面是这样的 :&lt;br&gt;_dog = [dog copy];&lt;br&gt;3.使用注意 :&lt;br&gt;3.1 修饰的属性本身要不可变的 . 例如 NSMutableArray 采用 copy 修饰 , 添加元素表面上可以 一到运行就崩溃了 , 因为 copy 过后实际上成了NSArray了 . 那么此时，需要用到mutablecopy。&lt;br&gt;3.2 遵守 NSCopying 协议的对象使用 .&lt;br&gt;与strong类似，但区别在于实例变量是对传入对象的副本拥有所有权，而非对象本身。&lt;/p&gt;
&lt;h4 id=&quot;nonatomic-ARC-MRC&quot;&gt;&lt;a href=&quot;#nonatomic-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;nonatomic ( ARC/MRC )&quot;&gt;&lt;/a&gt;nonatomic ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.不对set方法加锁 .&lt;br&gt;2.性能好&lt;br&gt;3.线程不安全&lt;br&gt;nonatomic跟atomic刚好相反。表示非原子的，可以被多个线程访问。它的效率比atomic快。但不能保证在多线程环境下的安全性，在单线程和明确只有一个线程访问的情况下广泛使用。&lt;/p&gt;
&lt;h4 id=&quot;atomic-ARC-MRC&quot;&gt;&lt;a href=&quot;#atomic-ARC-MRC&quot; class=&quot;headerlink&quot; title=&quot;atomic ( ARC/MRC )&quot;&gt;&lt;/a&gt;atomic ( ARC/MRC )&lt;/h4&gt;&lt;p&gt;1.原子属性就是对生成的 set 方法加互斥锁 @synchronized(锁对象) .&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@synchronized(self) { _delegate = delegate;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.需要消耗系统资源 .&lt;br&gt;3.互斥锁是利用线程同步实现的 , 意在保证同一时间只有一个线程调用 set 方法 .&lt;br&gt;4.其实还有 get 方法 , 要是同时 set 和 get 一起调用还是会有问题的 . 所以即使用了 atomic 修饰 还是不够安全 .&lt;/p&gt;
&lt;p&gt;atomic（默认）：atomic意为操作是原子的，意味着只有一个线程访问实例变量。atomic是线程安全的，至少在当前的存取器上是安全的。它是一个默认的特性，但是很少使用，因为比较影响效率，这跟ARM平台和内部锁机制有关。&lt;/p&gt;
&lt;h4 id=&quot;readonly-只读&quot;&gt;&lt;a href=&quot;#readonly-只读&quot; class=&quot;headerlink&quot; title=&quot;readonly (只读)&quot;&gt;&lt;/a&gt;readonly (只读)&lt;/h4&gt;&lt;p&gt;1.让 Xcode 只生成get方法 .&lt;br&gt;2.不想把暴露的属性被人随便替换时 , 可以使用 .&lt;br&gt;readonly： readonly表示只有getter没有setter。&lt;/p&gt;
&lt;h4 id=&quot;readwrite-读写-默认&quot;&gt;&lt;a href=&quot;#readwrite-读写-默认&quot; class=&quot;headerlink&quot; title=&quot;readwrite (读写)(默认)&quot;&gt;&lt;/a&gt;readwrite (读写)(默认)&lt;/h4&gt;&lt;p&gt;1.让 Xcode 生成get/set方法 .&lt;br&gt;2.不用 readonly 修饰时 , 默认就是 readwrite .&lt;br&gt;readwrite（默认）：readwrite是默认值，表示该属性同时拥有setter和getter。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;gt;&lt;br&gt;@Property是声明属性的语法，它可以快速方便的为实例变量创建存取器，并允许我们通过点语法使用存取器。&lt;br&gt;存取器（accessor）：指用于获取和设置实例变量的方法。用于获取实例变量值的存取器是getter，用于设置实例变量值的存取器是setter。
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="http://yoursite.com/2016/08/05/JavaScript/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/08/05/JavaScript/JavaScript基础/</id>
    <published>2016-08-05T13:10:44.000Z</published>
    <updated>2016-08-06T10:20:23.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基本特性&quot;&gt;&lt;a href=&quot;#基本特性&quot; class=&quot;headerlink&quot; title=&quot;基本特性&quot;&gt;&lt;/a&gt;基本特性&lt;/h3&gt;&lt;p&gt;1、脚本语言&lt;br&gt;JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序的运行过程中进行解释执行。&lt;br&gt;2、基于对象&lt;br&gt;JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。JavaScript 中的几乎所有事务都是对象：字符串、数字、数组、日期、函数，等等。&lt;br&gt;3、简单&lt;br&gt;JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。&lt;br&gt;4、动态性&lt;br&gt;JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。&lt;br&gt;5、跨平台性&lt;br&gt;JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持&lt;/p&gt;
&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt; 通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。&lt;br&gt;1.js变量声明提前&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var scope = &amp;quot;global&amp;quot;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function t()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   alert(scope);//undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var scope = &amp;quot;local&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(scope);//local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上代码说明:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.function作用域里的变量scope遮盖了上层作用域变量scope,javascript是没有块级作用域的,只有函数作用域。JavaScript 变量的生存期,JavaScript 变量的生命期从它们被声明的时间开始。局部变量会在函数运行以后被删除,全局变量会在页面关闭后被删除。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.在function作用域内，变量v的声明被提升了。所以最初的代码相当于：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var v = &amp;quot;global&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function t()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var scope; //declaration hoisting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(scope)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scope = &amp;quot;local&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(scope)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.不用var声明为全局变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function t()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope = &amp;quot;local&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(scope);//local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.JS原型&lt;/p&gt;
&lt;p&gt;(1) 所有的函数都有一个prototype属性，这个属性引用了一个对象，这个对象就是原型对象，也简称原型。&lt;/p&gt;
&lt;p&gt;(2)函数的prototype属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;函数的prototype属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.prototype); //[object Object]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(3)prototype的constructor属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.prototype.constructor); //function Foo()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(4)对象的&lt;strong&gt;proto&lt;/strong&gt;属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype =  &amp;#123;name:&amp;quot;xxx&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = new Foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.__proto__ === Foo.prototype); //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.name); //xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(5)原型链&lt;br&gt;访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着&lt;strong&gt;proto&lt;/strong&gt;这条链向上找，这就是原型链。&lt;br&gt;(6)区分一个属性是不是从原型里找到的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype =  &amp;#123;name:&amp;quot;xxx&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = new Foo(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.age = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj. hasOwnProperty(&amp;quot;name&amp;quot;));//false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj. hasOwnProperty(&amp;quot;age&amp;quot;));//true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(7) 函数对象有隐式原型吗？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.__proto__); //function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(Foo.__proto__.constructor); //function Function() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（8）Fuction创造一切&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/bc254b75gw1f6j9aobtmej20t00oudjf.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;(9)所有对象都有原型链&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&amp;quot;str&amp;quot;.__proto__.constructor);//function String() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(new Number(1).__proto__.constructor);//function Number() &amp;#123; [native code] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(new Date.__proto__.constructor);//function anonymous() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(10)利用原型对象对原生对象进行扩展&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String.prototype.suolve =  function (length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		if(this.length &amp;gt; length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return this.substring(0,length)+&amp;quot;……&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		 &amp;#125;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     		return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&amp;quot;猜猜结果？&amp;quot;.suolve(2)); //猜猜……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.通用写法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var name,age = 10,dept;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(10 == &amp;quot;10&amp;quot;); //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(10 === &amp;quot;10&amp;quot;); //false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var name = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name || &amp;quot;xxx&amp;quot;); //xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name &amp;amp;&amp;amp; &amp;quot;xxx&amp;quot;); //&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.javascript里的反射&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;name:&amp;apos;xxx&amp;apos;,age:10&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(var p in obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 alert(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     alert(obj[p]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// name xxx age 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.使用立即执行函数对代码进行隔离&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;主要是用于隔离作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ... all vars and functions are in this scope only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // still maintains access to all globals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数中的变量并不会影响到外面的作用域中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var currTime = (function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var time = new Date()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var year  = time.getFullYear()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var month = time.getMonth()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var date  = time.getDate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var hour  = time.getHours()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var min   = time.getMinutes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var sec   = time.getSeconds()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return year + &amp;apos;/&amp;apos; + month + &amp;apos;/&amp;apos; + date + &amp;apos; &amp;apos; + hour + &amp;apos;:&amp;apos; + min + &amp;apos;:&amp;apos; + sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(currTime);  //2016/7/6 17:0:27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6.关于闭包和立即执行函数&lt;/p&gt;
&lt;p&gt;匿名函数和闭包没有直接关系。能用匿名函数实现闭包的地方，一定也能用命名函数实现。&lt;br&gt;闭包的本质在于“闭”和“包”，即把一些变量封闭起来，使其它程序访问不到，同时把这个封闭的东西打成包甩出来，让大家可以直接用这个包（函数）。最典型的实现之一是对象（或类）的私有成员，如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function MyClass() {
// 这是一个封闭在 MyClass 中的局部变量
var _name;

// 这是一个甩出来的“包”
this.getName = function() {
    return _name;
};

// 这是另一个甩出来的“包”
this.setName = function(name) {
    // 这保证了 _name 的第一个字母和空格后的第一个字母是大写
    // 而且因为闭包的原因，_name 不可能被 MyCLass() 外的程序访问到
    // 也就保证了上述命名规则的无例外执行
    _name = name.replace(/^.|\s./g, function(s) {
        return s.toUpperCase();
    });
};
}

var p = new MyClass();
p.setName(&amp;quot;james fancy&amp;quot;);
console.log(p.getName());   // James Fancy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匿名函数通常只是用于给成员赋值，比如上例中的 getName 和 setName；也有可能用于立即执行函数，比如你的那段代码，这会将全局变量局部化，避免全局污染。&lt;br&gt;闭包常常会和匿名函数一起使用，但他们之间并没有密不可分的关系。&lt;br&gt;IIFE主要目的是做的一些封装，防止污染，以及保证内部变量的安全&lt;br&gt;闭包严格来说，是一个函数执行之后，返回另外一个函数，返回的函数有前一个函数的内部变量的引用可能会用在IIFE里面，通过返回的函数来提供内部变量的一些操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(){
....
}());
可以拆解为

function a(){
...
}
a();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;闭包是对函数中变量作用域的构成方式的一种表述，具体表现为一个函数中可以访问不在其作用域范围内但在其外层函数作用域中存在的变量，这个外层函数作用域的顶层为全局作用域&lt;/p&gt;
&lt;p&gt;匿名函数从字面理解就是没有命名的函数，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function() {
  //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;立即执行函数是指声明完之后便直接执行的函数，因此通常这类函数也不需要命名，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function() {
  //...
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;闭包通常指在函数内部再定义一个函数，由于作用域的关系，外部函数无法访问内部函数的变量，而内部函数可以访问外部函数的变量，此时如果外部函数将内部函数返回，便形成了闭包，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function outer() {
  var prop = &amp;apos;outer&amp;apos;;
  function inner() {
console.log(prop); // outer
  }
  return inner;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，也可以把任何函数理解为一个闭包，因为每个函数都可以访问外部函数或者全局的变量，但是外部函数或全局无法访问函数内部的变量，也就可以理解为是一个闭包。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本特性&quot;&gt;&lt;a href=&quot;#基本特性&quot; class=&quot;headerlink&quot; title=&quot;基本特性&quot;&gt;&lt;/a&gt;基本特性&lt;/h3&gt;&lt;p&gt;1、脚本语言&lt;br&gt;JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>喵两只</title>
    <link href="http://yoursite.com/2016/07/10/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E5%96%B5%E4%B8%A4%E5%8F%AA/"/>
    <id>http://yoursite.com/2016/07/10/读书生活/喵两只/</id>
    <published>2016-07-10T09:23:06.000Z</published>
    <updated>2016-08-04T07:19:28.000Z</updated>
    
    <content type="html">&lt;p&gt;家里有喵两只，老大名为七喜，老二唤作大白。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;老大型若小虎，老二全身白毛，老大高冷却胆小，老二傻呆还粘人，在不自愿的情况下被迫养之，怎奈随着铲屎量的增加，感情却也日渐深厚。每到夜晚，老大必定嚎之，知其狂思母喵，却怎奈何并无适龄母喵相配，大概过些时日也要阉之，思此不觉伤感，但每逢嚎叫之时，我也必定出手殴之，或以妙鲜包哄之，大抵如此。每逢清晨，老二粘人尤甚，跳上床来，又舔又蹭，嗷嗷声如二三岁的孩童。烦感之时，将其揪起放在地上，二三分钟不到，呼噜声又在耳边响起，媳妇与我都感到无奈却也好笑。转念回想，两个小家伙陪伴我们也已很多时日，也因闹着玩被抓伤，被老二传染了毛癣，也被老大掉的毛弄得不厌其烦。可分别两日心里也不觉会想念。感情的事大都难说，烦感还是喜爱有时候自己也说不清楚。日子继续过，依旧每日喂饭，铲屎，希望两个家伙健康成长。&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw1024/bc254b75gw1f5oz242plcj20ow0ion2u.jpg&quot; alt=&quot;七喜&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw1024/bc254b75jw1f5oyxapm1aj21420qojvj.jpg&quot; alt=&quot;大白&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016-7-10周日下午于家中&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;家里有喵两只，老大名为七喜，老二唤作大白。&lt;br&gt;
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>获取iOS设备唯一标识</title>
    <link href="http://yoursite.com/2016/07/07/iOS/%E8%8E%B7%E5%8F%96iOS%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/"/>
    <id>http://yoursite.com/2016/07/07/iOS/获取iOS设备唯一标识/</id>
    <published>2016-07-07T07:04:26.000Z</published>
    <updated>2016-08-04T07:49:44.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;之前碰到过获取设备唯一标识的情况，很多方法都已经作废了，转载一篇文章，很好的总结了能用的方法。(自己还未测试)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ximu.site/uuid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;IDFA&quot;&gt;&lt;a href=&quot;#IDFA&quot; class=&quot;headerlink&quot; title=&quot;IDFA&quot;&gt;&lt;/a&gt;IDFA&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全名：advertisingIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取代码：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #import &amp;lt;AdSupport/AdSupport.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：iOS6.0及以后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：直译就是广告id， 在同一个设备上的所有App都会取到相同的值，是苹果专门给各广告提供商用来追踪用户而设的，用户可以在 设置|隐私|广告追踪 里重置此id的值，或限制此id的使用，故此id有可能会取不到值，但好在Apple默认是允许追踪的，而且一般用户都不知道有这么个设置，所以基本上用来监测推广效果，是戳戳有余了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：由于idfa会出现取不到的情况，故绝不可以作为业务分析的主id，来识别用户。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;IDFV&quot;&gt;&lt;a href=&quot;#IDFV&quot; class=&quot;headerlink&quot; title=&quot;IDFV&quot;&gt;&lt;/a&gt;IDFV&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全名：identifierForVendor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取代码： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：iOS6.0及以后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：顾名思义，是给Vendor标识用户用的，每个设备在所属同一个Vender的应用里，都有相同的值。其中的Vender是指应用提供商，但准确点说，是通过BundleID的反转的前两部分进行匹配，如果相同就是同一个Vender，例如对于com.taobao.app1, com.taobao.app2 这两个BundleID来说，就属于同一个Vender，共享同一个idfv的值。和idfa不同的是，idfv的值是一定能取到的，所以非常适合于作为内部用户行为分析的主id，来标识用户，替代OpenUDID。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：如果用户将属于此Vender的所有App卸载，则idfv的值会被重置，即再重装此Vender的App，idfv的值和之前不同。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h2&gt;&lt;p&gt;我们可以获取到UUID，然后把UUID保存到KeyChain里面。&lt;/p&gt;
&lt;p&gt;这样以后即使APP删了再装回来，也可以从KeyChain中读取回来。使用group还可以可以保证同一个开发商的所有程序针对同一台设备能够获取到相同的不变的UDID。&lt;/p&gt;
&lt;p&gt;但是刷机或重装系统后uuid还是会改变。&lt;/p&gt;
&lt;h3 id=&quot;把下面两个类文件放到你的项目中&quot;&gt;&lt;a href=&quot;#把下面两个类文件放到你的项目中&quot; class=&quot;headerlink&quot; title=&quot;把下面两个类文件放到你的项目中&quot;&gt;&lt;/a&gt;把下面两个类文件放到你的项目中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KeychainItemWrapper.h文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;********************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface KeychainItemWrapper : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *keychainItemData;        // The actual keychain item data backing store.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *genericPasswordQuery;    // A placeholder for the generic keychain item query used to locate the item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, retain) NSMutableDictionary *keychainItemData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, retain) NSMutableDictionary *genericPasswordQuery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Designated initializer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setObject:(id)inObject forKey:(id)key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)objectForKey:(id)key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Initializes and resets the default generic keychain item data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)resetKeychainItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KeychainItemWrapper.h文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;********************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KeychainItemWrapper.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Security/Security.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;These are the default constants and their respective types,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;available for the kSecClassGenericPassword Keychain Item class:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrAccessGroup            -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrCreationDate        -       CFDateRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrModificationDate    -        CFDateRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrDescription            -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrComment                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrCreator                -       CFNumberRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrType                -        CFNumberRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrLabel                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrIsInvisible            -       CFBooleanRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrIsNegative            -       CFBooleanRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrAccount                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrService                -       CFStringRef  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kSecAttrGeneric                -       CFDataRef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;See the header file Security/SecItem.h for more details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface KeychainItemWrapper (PrivateMethods)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The decision behind the following two methods (secItemFormatToDictionary and dictionaryToSecItemFormat) was  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to encapsulate the transition between what the detail view controller was expecting (NSString *) and what the  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keychain API expects as a validly constructed container class.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Updates the item in the keychain, or adds it if it doesn&amp;apos;t exist.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)writeToKeychain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation KeychainItemWrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@synthesize keychainItemData, genericPasswordQuery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self = [super init])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert(account != nil || service != nil, @&amp;quot;Both account and service are nil.  Must specifiy at least one.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Begin Keychain search setup. The genericPasswordQuery the attributes kSecAttrAccount and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // kSecAttrService are used as unique identifiers differentiating keychain items from one another&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        genericPasswordQuery = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:account forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:service forKey:(id)kSecAttrService];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The keychain access group attribute determines if this item can be shared&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // amongst multiple apps whose code signing entitlements contain the same keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Use the proper search constants, return only the attributes of the first match.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *outDictionary = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;amp;outDictionary) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Stick these default values into keychain item if nothing found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [self resetKeychainItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //Adding the account and service identifiers to the keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:account forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:service forKey:(id)kSecAttrService];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // load the saved data from Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [outDictionary release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self = [super init])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Begin Keychain search setup. The genericPasswordQuery leverages the special user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // defined attribute kSecAttrGeneric to distinguish itself between other generic Keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // items which may be included by the same application.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        genericPasswordQuery = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:identifier forKey:(id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The keychain access group attribute determines if this item can be shared&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // amongst multiple apps whose code signing entitlements contain the same keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Use the proper search constants, return only the attributes of the first match.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *outDictionary = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;amp;outDictionary) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Stick these default values into keychain item if nothing found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [self resetKeychainItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Add the generic attribute and the keychain access group.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [keychainItemData setObject:identifier forKey:(id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (accessGroup != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Ignore the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // load the saved data from Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [outDictionary release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [genericPasswordQuery release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super dealloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setObject:(id)inObject forKey:(id)key &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (inObject == nil) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id currentObject = [keychainItemData objectForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (![currentObject isEqual:inObject])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [keychainItemData setObject:inObject forKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self writeToKeychain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)objectForKey:(id)key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [keychainItemData objectForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)resetKeychainItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OSStatus junk = noErr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!keychainItemData) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.keychainItemData = [[NSMutableDictionary alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else if (keychainItemData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *tempDictionary = [self dictionaryToSecItemFormat:keychainItemData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        junk = SecItemDelete((CFDictionaryRef)tempDictionary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( junk == noErr || junk == errSecItemNotFound, @&amp;quot;Problem deleting current dictionary.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Default attributes for keychain item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrAccount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrLabel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecAttrDescription];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Default data for keychain item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [keychainItemData setObject:@&amp;quot;&amp;quot; forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // The assumption is that this method will be called with a properly populated dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // containing all the right key/value pairs for a SecItem.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create a dictionary to return populated with the attributes and data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Add the Generic Password keychain item class attribute.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Convert the NSString to NSData to meet the requirements for the value type kSecValueData.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // This is where to store sensitive data that should be encrypted.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *passwordString = [dictionaryToConvert objectForKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:[passwordString dataUsingEncoding:NSUTF8StringEncoding] forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return returnDictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // The assumption is that this method will be called with a properly populated dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // containing all the right key/value pairs for the UI element.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create a dictionary to return populated with the attributes and data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Add the proper search key and class attribute.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Acquire the password data from the attributes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *passwordData = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (SecItemCopyMatching((CFDictionaryRef)returnDictionary, (CFTypeRef *)&amp;amp;passwordData) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Remove the search, class, and identifier key/value, we don&amp;apos;t need them anymore.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [returnDictionary removeObjectForKey:(id)kSecReturnData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Add the password to the dictionary, converting from NSData to NSString.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *password = [[[NSString alloc] initWithBytes:[passwordData bytes] length:[passwordData length] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                     encoding:NSUTF8StringEncoding] autorelease];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [returnDictionary setObject:password forKey:(id)kSecValueData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Don&amp;apos;t do anything if nothing is found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert(NO, @&amp;quot;Serious error, no matching item found in the keychain.\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [passwordData release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return returnDictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)writeToKeychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSDictionary *attributes = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *updateItem = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OSStatus result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (SecItemCopyMatching((CFDictionaryRef)genericPasswordQuery, (CFTypeRef *)&amp;amp;attributes) == noErr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // First we need the attributes from the Keychain.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateItem = [NSMutableDictionary dictionaryWithDictionary:attributes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Second we need to add the appropriate search key/values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [updateItem setObject:[genericPasswordQuery objectForKey:(id)kSecClass] forKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Lastly, we need to set up the updated attribute list being careful to remove the class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSMutableDictionary *tempCheck = [self dictionaryToSecItemFormat:keychainItemData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [tempCheck removeObjectForKey:(id)kSecClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Remove the access group if running on the iPhone simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Apps that are built for the simulator aren&amp;apos;t signed, so there&amp;apos;s no keychain access group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // for the simulator to check. This means that all apps can see all keychain items when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // on the simulator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // simulator will return -25243 (errSecNoAccessForItem).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // The access group attribute will be included in items returned by SecItemCopyMatching,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // which is why we need to remove it before updating the item.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [tempCheck removeObjectForKey:(id)kSecAttrAccessGroup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // An implicit assumption is that you can only update a single item at a time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = SecItemUpdate((CFDictionaryRef)updateItem, (CFDictionaryRef)tempCheck);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( result == noErr, @&amp;quot;Couldn&amp;apos;t update the Keychain Item.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // No previous item found; add the new one.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = SecItemAdd((CFDictionaryRef)[self dictionaryToSecItemFormat:keychainItemData], NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSAssert( result == noErr, @&amp;quot;Couldn&amp;apos;t add the Keychain Item.&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;我们在写一个工具类用来保存UUID到keychain和从keychain中读取UUID.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AppUntils.m文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*********************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import  &amp;lt;Security/Security.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KeychainItemWrapper.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - 保存和读取UUID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(void)saveUUIDToKeyChain&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *string = [keychainItem objectForKey: (__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if([string isEqualToString:@&amp;quot;&amp;quot;] || !string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [keychainItem setObject:[self getUUIDString] forKey:(__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(NSString *)readUUIDFromKeyChain&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeychainItemWrapper *keychainItemm = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *UUID = [keychainItemm objectForKey: (__bridge id)kSecAttrGeneric];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return UUID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (NSString *)getUUIDString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFUUIDRef uuidRef = CFUUIDCreate(kCFAllocatorDefault);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFStringRef strRef = CFUUIDCreateString(kCFAllocatorDefault , uuidRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *uuidString = [(__bridge NSString*)strRef stringByReplacingOccurrencesOfString:@&amp;quot;-&amp;quot; withString:@&amp;quot;&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRelease(strRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRelease(uuidRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return uuidString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取UUID&lt;br&gt;在需要读取的地方直接调用AppUtils的类方法readUUIDFromKeyChain即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;h3 id=&quot;1-设置非ARC编译环境&quot;&gt;&lt;a href=&quot;#1-设置非ARC编译环境&quot; class=&quot;headerlink&quot; title=&quot;1.设置非ARC编译环境&quot;&gt;&lt;/a&gt;1.设置非ARC编译环境&lt;/h3&gt;&lt;p&gt;因为KeychainItemWrapper.m文件是在非ARC环境下运行的，所以需要设置非arc编译环境， 在Build Phases下选在文件，设置compiler flags:-fno-objc-arc&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-让同一开发商的所有APP在同一台设备上获取到UUID相同&quot;&gt;&lt;a href=&quot;#2-让同一开发商的所有APP在同一台设备上获取到UUID相同&quot; class=&quot;headerlink&quot; title=&quot;2. 让同一开发商的所有APP在同一台设备上获取到UUID相同&quot;&gt;&lt;/a&gt;2. 让同一开发商的所有APP在同一台设备上获取到UUID相同&lt;/h3&gt;&lt;p&gt;在每个APP的项目里面做如下设置&lt;/p&gt;
&lt;h4 id=&quot;2-1、设置accessgroup&quot;&gt;&lt;a href=&quot;#2-1、设置accessgroup&quot; class=&quot;headerlink&quot; title=&quot;2.1、设置accessgroup&quot;&gt;&lt;/a&gt;2.1、设置accessgroup&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&amp;quot;Identfier&amp;quot; service:@&amp;quot;AppName&amp;quot; accessGroup:@&amp;quot;YOUR_BUNDLE_SEED.com.yourcompany.userinfo&amp;quot;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此处设置accessGroup为YOURBUNDLESEED.com.yourcompany.userinfo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-2、创建plist文件&quot;&gt;&lt;a href=&quot;#2-2、创建plist文件&quot; class=&quot;headerlink&quot; title=&quot;2.2、创建plist文件&quot;&gt;&lt;/a&gt;2.2、创建plist文件&lt;/h4&gt;&lt;p&gt;然后在项目相同的目录下创建KeychainAccessGroups.plist文件。&lt;/p&gt;
&lt;p&gt;该文件的结构是一个字典，其中中最顶层的节点必须是一个键为“keychain-access-groups”的Array，并且该Array中每一项都是一个描述分组的NSString。YOURBUNDLESEED.com.yourcompany.userinfo就是要设置的组名。&lt;/p&gt;
&lt;h4 id=&quot;2-3-设置code-signing&quot;&gt;&lt;a href=&quot;#2-3-设置code-signing&quot; class=&quot;headerlink&quot; title=&quot;2.3 设置code signing&quot;&gt;&lt;/a&gt;2.3 设置code signing&lt;/h4&gt;&lt;p&gt;接着在Target—&amp;gt;Build Settings—-&amp;gt;Code Signing栏下的Code Signing Entitlements右侧添加KeychainAccessGroups.plist&lt;/p&gt;
&lt;p&gt;这样就可以保证每个app都是从keychain中读取出来同一个UUID&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前碰到过获取设备唯一标识的情况，很多方法都已经作废了，转载一篇文章，很好的总结了能用的方法。(自己还未测试)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发通用技巧" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>CALayer</title>
    <link href="http://yoursite.com/2016/07/06/iOS/CALayer/"/>
    <id>http://yoursite.com/2016/07/06/iOS/CALayer/</id>
    <published>2016-07-06T05:49:55.000Z</published>
    <updated>2016-08-04T02:19:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。&lt;br&gt;其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层&lt;br&gt;@property(nonatomic,readonly,retain) CALayer *layer;&lt;br&gt;当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层（CALayer）上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示&lt;br&gt;换句话说，UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。&lt;br&gt;NSObject–&amp;gt;CALayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;UIView之所以能够显示，完全是因为内部的CALayer对象。因此，通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;新建一个项目，在storyboard中添加一个view.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.通过layer设置边框的宽度和颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;YYViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface YYViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (weak, nonatomic) IBOutlet UIView *customView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation YYViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor greenColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.通过layer设置边框为圆角self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.在layer上添加一张图片 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;YYViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface YYViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (weak, nonatomic) IBOutlet UIView *customView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation YYViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：contents是id类型，可以接受内容，上面的实例让layer显示一张图片，仔细观察可以发现四个圆角的部分露了一个角出来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;产生的原因说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那是因为设置的image不是展示在主图层上的，而是显示在子图层上的。可以通过设置一个范围，设置超出主图层的部分把它给剪切掉。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有以下两种方法，建议使用layer中的方法（第二种）self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置超过子图层的部分裁减掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //UI框架中使用的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    self.customView.clipsToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：layer中不能直接接受UI框架中的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.设置阴影&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置阴影，不光需要设置阴影颜色，还应该设置阴影的偏移位和透明度。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为如果不设置偏移位的话，那么阴影和layer完全重叠，且默认透明度为0（即完全透明）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的偏移量，如果为正数，则代表为往右边偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOffset=CGSizeMake(15, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的透明度(0~1之间，0表示完全透明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOpacity=0.6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;补充说明：如果设置了超过主图层的部分减掉，则设置阴影不会有显示效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的宽度为20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderWidth=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置边框的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.borderColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置layer的圆角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.cornerRadius=20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置超过子图层的部分裁减掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //UI框架中使用的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //self.customView.clipsToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.masksToBounds=YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在view的图层上添加一个image，contents表示接受内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.contents=(id)[UIImage imageNamed:@&amp;quot;me&amp;quot;].CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowColor=[UIColor blackColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的偏移量，如果为正数，则代表为往右边偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOffset=CGSizeMake(15, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置阴影的透明度(0~1之间，0表示完全透明)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.customView.layer.shadowOpacity=0.6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;把剪切超出主图层部分的代码注释掉之后的显示效果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。&lt;br&gt;其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层&lt;br&gt;@property(nonatomic,readonly,retain) CALayer *layer;&lt;br&gt;当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层（CALayer）上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示&lt;br&gt;换句话说，UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。&lt;br&gt;NSObject–&amp;gt;CALayer&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>布局相关</title>
    <link href="http://yoursite.com/2016/07/04/iOS/%E5%B8%83%E5%B1%80%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2016/07/04/iOS/布局相关/</id>
    <published>2016-07-04T07:08:43.000Z</published>
    <updated>2016-08-04T01:07:37.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;收录一些关于布局，Masonary，autolayout的相关用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iOS 7 以后 View Controller 添加了几个相关的属性来方便我们来做页面布局：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,assign) UIRectEdge edgesForExtendedLayout NS_AVAILABLE_IOS(7_0); // Defaults to UIRectEdgeAll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,assign) BOOL extendedLayoutIncludesOpaqueBars NS_AVAILABLE_IOS(7_0); // Defaults to NO, but bars are translucent by default on 7_0.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,assign) BOOL automaticallyAdjustsScrollViewInsets NS_AVAILABLE_IOS(7_0); // Defaults to YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* edgesForExtendedLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过 edgesForExtendedLayout 这个属性来设置你的 View Controller 页面的哪一侧会延伸至屏幕边缘。可选值有：UIRectEdgeNone、UIRectEdgeTop、UIRectEdgeLeft、UIRectEdgeBottom、UIRectEdgeRight、UIRectEdgeAll。默认值是 UIRectEdgeAll，即 View Controller 的布局是全屏填满。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在有 NavigationBar、TabBar、TooBar 等系统 Bar 的情况下，该属性设置为 UIRectEdgeAll 时，View Controller 的页面会被这些 Bar 盖住部分；而当该属性设为 UIRectEdgeNone 的时候，View Controller 的页面布局会限制在这些 Bar 之间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们可以在 View Controller 的 - (void)viewWillLayoutSubviews 方法中打印出 self.view 的 frame 来观察这个属性带来的影响。我们以 iPhone 4s 的 320*480 的屏幕尺寸为例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置 edgesForExtendedLayout 为 UIRectEdgeAll，不管是有 NavigationBar、TabBar、TooBar 哪一种 Bar，self.view 的 frame 均为 (0, 0, 320, 480)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置 edgesForExtendedLayout 为 UIRectEdgeAll：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有 NavigationBar 和 TabBar，self.view 的 frame 为 (0, 64, 320, 367)。即 self.view 的布局的起点从 NavigationBar 下开始，高度去掉了 StatusBar、NavigationBar 和 TabBar 的高度：20、44、49。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有 NavigationBar 和 ToolBar，self.view 的 frame 为 (0, 64, 320, 372)。即 self.view 的布局的起点从 NavigationBar 下开始，高度去掉了 StatusBar、NavigationBar 和 ToolBar 的高度：20、44、44。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要注意的是：如果你在 - (void)viewDidLoad 方法中观察 self.view 的 frame 得到的结果始终是 (0, 0, 320, 480)，可见这个值的不对的，所以当我们需要对页面进行布局时正确的方式是在- (void)viewWillLayoutSubviews 中处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* extendedLayoutIncludesOpaqueBars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extendedLayoutIncludesOpaqueBars 这个属性是对 edgesForExtendedLayout 的补充。它的意思当 NavigationBar、TabBar、TooBar 这些 Bar 不是半透明时(Bar 的 translucent 属性值为 NO)，如果设置 extendedLayoutIncludesOpaqueBars 为 NO，则不会将 View Controller 的页面布局延伸至全屏，如果设置为 YES，则坚持延伸至全屏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从 iOS 7 开始，NavigationBar、TabBar、TooBar 这些 Bar 默认都是半透明的，这时这个属性不会起到效果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* automaticallyAdjustsScrollViewInsets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当我们采用全屏布局设置了 edgesForExtendedLayout 为 UIRectEdgeAll，而此时 View Controller 的 self.view 的第一个 Subview 是 UIScrollView 类型或其子类型(如：UITableView 等)时，automaticallyAdjustsScrollViewInsets 这个属性就会被用来辅助我们对 UIScrollView 类的视图进行布局。automaticallyAdjustsScrollViewInsets 默认值即为 YES。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拿 UITableView 来举例，你希望你的 UITableView 的内容从 NavigationBar 底部开始展示(因为不这样的话就会被 NavigationBar 遮住一部分)，同时还需要在滑动时，UITableView 的布局又能填满全屏。这时你只需要设置 automaticallyAdjustsScrollViewInsets 为 YES 即可，系统会帮你调整 UITableView 的 contentInset 来实现效果使其中的内容不会被 NavigationBar、TabBar、TooBar 挡住。你可以同样在 - (void)viewWillLayoutSubviews 观察 UITableView 的 contentInset 的值。当你设置它为 NO 时，UITableView 的 contentInset 则不会被被设置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收录一些关于布局，Masonary，autolayout的相关用法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS-UI" scheme="http://yoursite.com/categories/iOS-UI/"/>
    
    
  </entry>
  
  <entry>
    <title>读如何高效学习</title>
    <link href="http://yoursite.com/2016/07/03/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E8%AF%BB%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/07/03/读书生活/读如何高效学习/</id>
    <published>2016-07-03T01:19:56.000Z</published>
    <updated>2016-08-04T07:19:17.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这两天粗读了一遍如何高效学习这本书，做个简单的小结。书中提到了很多观点和方法，有很多关于“整体性学习”的阐述，个人在理解上还不算深刻，通过整理书后的小结及日常的应用，希望能对自己的学习生活起到正向作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整体性学习策略强调将信息编织到知识网络中，而不是给自己加上机械记忆的负担，这个策略的基础有以下几个方面。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 结构 --- 关于某个学科的知识之间联系的综合，它将是你大脑中的城市。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 模型 --- 将信息压缩成最基本的单元，模型是结构的种子，形成模型的方法包括比喻法，内在化和图表法，模型是你的知识道路交通图中重要的几个十字路口。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 高速公路 --- 不同结构之间的联系，有助于创造性思考。“跳出盒子之外思考”很好地描述了这种跳出原有结构，从其他结构来观察原有结构的思考方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;整体性学习有5个步骤，但是并非按部就班，知识大体按照此顺序进行，不能拘泥于这种顺序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 获取 --- 通过感官获取信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 理解 --- 明白信息的表面意思&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 拓展 --- 与其他信息联系，拓展有三种主要的方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a 深度拓展 --探究知识背景&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b 横向拓展 --探究知识关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c 纵向拓展 --与其他结构联系后，从其他结构的角度探究知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 纠错 --- 删除错误联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 应用 ---将知识应用到各种情境中去，包括现实生活&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;信息的类型有以下五种：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 随意信息 ： 事实，日期，列表，规则以及某种顺序。信息特点是没有逻辑分类或相互关系不强&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 观点信息 ： 信息的唯一目的就是支持或者反对某种观点。容量在这是最重要的，而不是能记住&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 过程信息 ： 它是指某种技能的信息。需要反复练习，但是容易记住&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 具体信息 ： 容易视觉化的信息，一般是与实际紧密兰溪的信息，容易有自己的经验&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 抽象信息 ： 信息不容易有自己的经验，数学，哲学，物理学都是非常抽象的领域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;技术一览：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;快速阅读&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 指读法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 联系阅读&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 积极阅读，改善边度边学习的效率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;笔记流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 不要呆板，僵硬，貌似层次分明的记笔记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在卸下来的观点之间建立联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比喻法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;寻找历史中的故事，图像或是过程，它与我们现在学习的东西有某种相似性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;内在化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 为你正在学习的东西创造脑海中的图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在这幅图像上加入其它感官和情感&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 寻找图像不适用或不足的地方，防止产生错误的联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;图表法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创造流程图，概念图或图像，将若干观念联系在一起&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;联想法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创造一系列容易视觉化的符号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在条目之间创造联系，这种联系是可以“看得见的奇特场景”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在第一个条目和触发物之间建立联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;挂钩法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;与联想法相似，只不过我们是把每一个条目与事先建立好容易回忆的0-12的视觉符号相联系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;信息压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;记忆术-- 压缩若干知识，用一个单词代替&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;图像联系-- 创造一幅能联系若干知识的图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;笔记压缩-- 用寥寥几页纸缩写内容庞大的笔记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实际应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;寻找将知识用于你的日常生活&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;模型纠错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经常性地解决各种问题，以发现整体性知识网络中的潜在错误。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;已项目为基础学习&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;建立一个大约需要1-3个月完成的项目，从而逼迫自己不断的学习，实践和解决各种各样的问题，这对自我教育来说是有用的练习，特别实在没有什么知识结构可以指导时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高效率学生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;管理能量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 保持体形，健康饮食，不要熬夜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 一周休息一天&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 不要“学习”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 绝不拖延&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 建立每周目标和每日目标清单以保持注意力&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 将那些类似的，散在的工作集中起来批量处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 有组织&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 拥有一个日历和做事清单，永远随身携带一个笔记本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两天粗读了一遍如何高效学习这本书，做个简单的小结。书中提到了很多观点和方法，有很多关于“整体性学习”的阐述，个人在理解上还不算深刻，通过整理书后的小结及日常的应用，希望能对自己的学习生活起到正向作用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Git相关操作</title>
    <link href="http://yoursite.com/2016/06/30/iOS/Git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/06/30/iOS/Git相关操作/</id>
    <published>2016-06-30T04:20:39.000Z</published>
    <updated>2016-08-04T07:49:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;git使用记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;创建新项目&quot;&gt;&lt;a href=&quot;#创建新项目&quot; class=&quot;headerlink&quot; title=&quot;创建新项目&quot;&gt;&lt;/a&gt;创建新项目&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1现在git上新建一个项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2记住地址：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 初始化一个readme&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（另外在xcode中创建项目的时候，不要勾选在本地创建git库）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3在系统中新建一个文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4打开xcode中点击导出项目。导出项目到这个空文件夹，导出路径为上边新建项目时的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5将项目中的文件拷贝到此文件夹中，打开项目提交即可。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcode push时时间很久，然后提示错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SecureTransport error: I/O error (bummers) (-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 确定用户名账户正确 git config --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更改命令：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name username&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email email&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 确定xcode中的remote地址正确&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 增加提交量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global http.postBuffer 524288000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global http.postBuffer 1048576000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;git使用记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发通用技巧" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发中的数据持久化</title>
    <link href="http://yoursite.com/2016/06/30/iOS/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2016/06/30/iOS/iOS开发中的数据持久化/</id>
    <published>2016-06-30T03:58:11.000Z</published>
    <updated>2016-08-04T07:54:31.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;详细记录iOS开发中几种常用的持久化方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;NSUserDefaults&lt;/p&gt;
&lt;p&gt;NSUserDefaults只支持： NSString, NSNumber, NSDate, NSArray, NSDictionary.&lt;br&gt;NSUserDefaults适合存储轻量级的本地数据，比如要保存一个登陆界面的数据，用户名、密码之类的，个人觉得使用NSUserDefaults是首选。下次再登陆的时候就可以直接从NSUserDefaults里面读取上次登陆的信息咯。&lt;br&gt;用NSUserDefaults存储的数据下次程序运行的时候依然存在，它把数据存储在什么地方了？如何能够清除？&lt;br&gt;其实它存储在应用程序内置的一个plist文件里。&lt;/p&gt;
&lt;p&gt;iOS中缓存一定量的数据以便下次可以快速执行，那么数据会存储在什么地方，有多少种存储方式？&lt;br&gt;偏好设置(NSUserDefaults)&lt;br&gt;plist文件存储&lt;br&gt;归档&lt;br&gt;SQLite3&lt;br&gt;Core Data&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;详细记录iOS开发中几种常用的持久化方式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="概念讲解" scheme="http://yoursite.com/categories/%E6%A6%82%E5%BF%B5%E8%AE%B2%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>第三方框架使用记录</title>
    <link href="http://yoursite.com/2016/06/27/iOS/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/06/27/iOS/第三方框架使用记录/</id>
    <published>2016-06-27T02:19:21.000Z</published>
    <updated>2016-08-04T07:53:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;项目开发中会用到很多第三方框架，在此做个记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;网络类&quot;&gt;&lt;a href=&quot;#网络类&quot; class=&quot;headerlink&quot; title=&quot;网络类&quot;&gt;&lt;/a&gt;网络类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AFNetworking&lt;br&gt;轻量级的通讯类库，使用非常简单。&lt;br&gt;&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SDWebImage&lt;br&gt;调用网站上的图片，跟本地调用内置在应用包里的图片一样简单。操作也很简单。&lt;br&gt;&lt;a href=&quot;https://github.com/rs/SDWebImage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据类&quot;&gt;&lt;a href=&quot;#数据类&quot; class=&quot;headerlink&quot; title=&quot;数据类&quot;&gt;&lt;/a&gt;数据类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FMDB&lt;br&gt;fmdb是一个数据库管理库，封装了sqlite相关的sql语句，简化数据库操作。&lt;br&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;效果类&quot;&gt;&lt;a href=&quot;#效果类&quot; class=&quot;headerlink&quot; title=&quot;效果类&quot;&gt;&lt;/a&gt;效果类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MBProgressHUD&lt;br&gt;MBProgressHUD就不多说了，加载等待特效框架，伟大的菊花。&lt;br&gt;&lt;a href=&quot;https://github.com/jdg/MBProgressHUD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MJRefresh&lt;br&gt;下拉刷新，上拉加载的库。&lt;br&gt;&lt;a href=&quot;https://github.com/CoderMJLee/MJRefresh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MMPopupView&lt;br&gt;一个封装的弹框组件，效果不错。&lt;br&gt;&lt;a href=&quot;https://github.com/adad184/MMPopupView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PNChart&lt;br&gt;一个封装的图片组件，表现丰富。&lt;br&gt;&lt;a href=&quot;https://github.com/kevinzhow/PNChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HMSegmentedControl&lt;br&gt;HMSegmentedControl 是 UISegmentedControl 的替代品。表现效果不错。&lt;br&gt;&lt;a href=&quot;https://github.com/HeshamMegid/HMSegmentedControl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MMPlaceHolder&lt;br&gt;显示各个UIview的size，用于方便的布局，很好用。&lt;br&gt;&lt;a href=&quot;https://github.com/adad184/MMPlaceHolder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;布局类&quot;&gt;&lt;a href=&quot;#布局类&quot; class=&quot;headerlink&quot; title=&quot;布局类&quot;&gt;&lt;/a&gt;布局类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CYLTabBarController&lt;br&gt;低耦合集成TabBarController，传入几个参数就可以完成主流APP框架的搭建&lt;br&gt;&lt;a href=&quot;https://github.com/ChenYilong/CYLTabBarController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Masonry&lt;br&gt;Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X。&lt;br&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;调试类&quot;&gt;&lt;a href=&quot;#调试类&quot; class=&quot;headerlink&quot; title=&quot;调试类&quot;&gt;&lt;/a&gt;调试类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CocoaLumberjack&lt;br&gt;CocoaLumberjack是Mac和iOS上一个集快捷、简单、强大和灵活于一身的日志框架。&lt;br&gt;&lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目开发中会用到很多第三方框架，在此做个记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发通用技巧" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Objc面试题收录</title>
    <link href="http://yoursite.com/2016/06/24/iOS/Objc%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95/"/>
    <id>http://yoursite.com/2016/06/24/iOS/Objc面试题收录/</id>
    <published>2016-06-24T01:33:55.000Z</published>
    <updated>2016-08-04T07:47:43.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;持续收录一些较经典的面试题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;简单描述一下XIB与Storyboards，说一下他们的优缺点&quot;&gt;&lt;a href=&quot;#简单描述一下XIB与Storyboards，说一下他们的优缺点&quot; class=&quot;headerlink&quot; title=&quot;简单描述一下XIB与Storyboards，说一下他们的优缺点&quot;&gt;&lt;/a&gt;简单描述一下XIB与Storyboards，说一下他们的优缺点&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;优点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XIB：在编译前就提供了可视化界面，可以直接拖控件，也可以直接给控件添加约束，更直观一些，而且类文件中就少了创建控件的代码，确实简化不少，通常每个XIB对应一个类。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Storyboard：在编译前提供了可视化界面，可拖控件，可加约束，在开发时比较直观，而且一个storyboard可以有很多的界面，每个界面对应一个类文件，通过storybard，可以直观地看出整个App的结构(事实上故事板是多个xib文件集合的描述文件，也采用xml格式).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;缺点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XIB：需求变动时，需要修改XIB很大，有时候甚至需要重新添加约束，导致开发周期变长。XIB载入相比纯代码自然要慢一些。对于比较复杂逻辑控制不同状态下显示不同内容时，使用XIB是比较困难的。当多人团队或者多团队开发时，如果XIB文件被发动，极易导致冲突，而且解决冲突相对要困难很多。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Storyboard：需求变动时，需要修改storyboard上对应的界面的约束，与XIB一样可能要重新添加约束，或者添加约束会造成大量的冲突，尤其是多团队开发。对于复杂逻辑控制不同显示内容时，比较困难。当多人团队或者多团队开发时，大家会同时修改一个storyboard，导致大量冲突，解决起来相当困难。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;下面四个修饰指针有什么区别&quot;&gt;&lt;a href=&quot;#下面四个修饰指针有什么区别&quot; class=&quot;headerlink&quot; title=&quot;下面四个修饰指针有什么区别?&quot;&gt;&lt;/a&gt;下面四个修饰指针有什么区别?&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const char *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char const *p;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char * const p;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * const p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参考答案：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• const char *p定义了一个指向不可变的字符串的字符指针，可以这么看：const char *为类型，p是变量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• char const *p与上一个是一样的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• char * const p定义了一个指向字符串的指针，该指针值不可改变，即不可改变指向。这么看：char *是类型，const是修饰变量p，也就是说p是一个常量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * const p定义了一个指向不可变的字符串的字符指针，且该指针也不可改变指向。这一个就很容易看出来了。两个const分别修饰，因此都是不可变的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;请把字符串2015-04-10格式化日期转为NSDate类型&quot;&gt;&lt;a href=&quot;#请把字符串2015-04-10格式化日期转为NSDate类型&quot; class=&quot;headerlink&quot; title=&quot;请把字符串2015-04-10格式化日期转为NSDate类型&quot;&gt;&lt;/a&gt;请把字符串2015-04-10格式化日期转为NSDate类型&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *timeStr = @&amp;quot;2015-04-10&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSDateFormatter *formatter = [[NSDateFormatter alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;formatter.dateFormat = @&amp;quot;yyyy-MM-dd&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;formatter.timeZone = [NSTimeZone defaultTimeZone];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSDate *date = [formatter dateFromString:timeStr];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 2015-04-09 16:00:00 +0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, date);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;描述一下iOS的内存管理，在开发中对于内存的使用和优化包含哪些方面。我们在开发中应该注意哪些问题。&quot;&gt;&lt;a href=&quot;#描述一下iOS的内存管理，在开发中对于内存的使用和优化包含哪些方面。我们在开发中应该注意哪些问题。&quot; class=&quot;headerlink&quot; title=&quot;描述一下iOS的内存管理，在开发中对于内存的使用和优化包含哪些方面。我们在开发中应该注意哪些问题。&quot;&gt;&lt;/a&gt;描述一下iOS的内存管理，在开发中对于内存的使用和优化包含哪些方面。我们在开发中应该注意哪些问题。&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;内存管理准则：谁强引用过，谁就在不再使用时使引用计数减一。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于内存的使用和优化常见的有以下方面：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重用问题：如UITableViewCells、UICollectionViewCells、UITableViewHeaderFooterViews设置正确的reuseIdentifier，充分重用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;尽量把views设置为不透明：当opque为NO的时候，图层的半透明取决于图片和其本身合成的图层为结果，可提高性能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不要使用太复杂的XIB/Storyboard：载入时就会将XIB/storyboard需要的所有资源，包括图片全部载入内存，即使未来很久才会使用。那些相比纯代码写的延迟加载，性能及内存就差了很多。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选择正确的数据结构：学会选择对业务场景最合适的数组结构是写出高效代码的基础。比如，数组: 有序的一组值。使用索引来查询很快，使用值查询很慢，插入/删除很慢。字典: 存储键值对，用键来查找比较快。集合: 无序的一组值，用值来查找很快，插入/删除很快。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gzip/zip压缩：当从服务端下载相关附件时，可以通过gzip/zip压缩后再下载，使得内存更小，下载速度也更快。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;延迟加载：对于不应该使用的数据，使用延迟加载方式。对于不需要马上显示的视图，使用延迟加载方式。比如，网络请求失败时显示的提示界面，可能一直都不会使用到，因此应该使用延迟加载。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数据缓存：对于cell的行高要缓存起来，使得reload数据时，效率也极高。而对于那些网络数据，不需要每次都请求的，应该缓存起来，可以写入数据库，也可以通过plist文件存储。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;处理内存警告：一般在基类统一处理内存警告，将相关不用资源立即释放掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重用大开销对象：一些objects的初始化很慢，比如NSDateFormatter和NSCalendar，但又不可避免地需要使用它们。通常是作为属性存储起来，防止反复创建。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;避免反复处理数据：许多应用需要从服务器加载功能所需的常为JSON或者XML格式的数据。在服务器端和客户端使用相同的数据结构很重要。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用Autorelease Pool：在某些循环创建临时变量处理数据时，自动释放池以保证能及时释放内存。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;深复制和浅复制的区别：&quot;&gt;&lt;a href=&quot;#深复制和浅复制的区别：&quot; class=&quot;headerlink&quot; title=&quot;深复制和浅复制的区别：&quot;&gt;&lt;/a&gt;深复制和浅复制的区别：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;浅复制只复制指向对象的指针，而不复制引用对象的本身。深层复制复制对象的本身。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;意思就是说我有个A对象，复制一份后得到A_copy对象，对于浅复制来说，A和A_copy指向的是同一个内存资源，复制的只不过是一个指针，对象本身的资源还是只有一份，当对A_copy执行修改操作时，我们发现A引用的对象同样被修改，深复制对象中存在了两份独立的对象本身，浅复制好比你和你的影子，你完蛋，影子也完蛋，深复制好比克隆人，你完蛋，克隆人还活着。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===什么情况使用 weak 关键字，相比 assign 有什么不同？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;什么情况使用 weak 关键字？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：《IBOutlet连出来的视图属性为什么可以被设置成weak?》&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assigin 可以用非 OC 对象,而 weak 必须用于 OC 对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;怎么用-copy-关键字？&quot;&gt;&lt;a href=&quot;#怎么用-copy-关键字？&quot; class=&quot;headerlink&quot; title=&quot;怎么用 copy 关键字？&quot;&gt;&lt;/a&gt;怎么用 copy 关键字？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用途：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;block 也经常使用 copy 关键字&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;property-的本质是什么？&quot;&gt;&lt;a href=&quot;#property-的本质是什么？&quot; class=&quot;headerlink&quot; title=&quot;@property 的本质是什么？&quot;&gt;&lt;/a&gt;@property 的本质是什么？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@property = ivar + getter + setter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下面解释下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 Objective-C 2.0 的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。 所以你也可以这么说：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property = getter + setter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如下面这个类：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Person : NSObject@property NSString *firstName;@property NSString *lastName;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上述代码写出来的类与下面这种写法等效：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Person : NSObject- (NSString *)firstName;- (void)setFirstName:(NSString *)firstName;- (NSString *)lastName;- (void)setLastName:(NSString *)lastName;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？&quot;&gt;&lt;a href=&quot;#ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？&quot; class=&quot;headerlink&quot; title=&quot;ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？&quot;&gt;&lt;/a&gt;ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对应基本数据类型默认关键字是atomic,readwrite,assign&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于普通的 Objective-C 对象atomic,readwrite,strong&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;一个objc对象的isa的指针指向什么？有什么作用？&quot;&gt;&lt;a href=&quot;#一个objc对象的isa的指针指向什么？有什么作用？&quot; class=&quot;headerlink&quot; title=&quot;一个objc对象的isa的指针指向什么？有什么作用？&quot;&gt;&lt;/a&gt;一个objc对象的isa的指针指向什么？有什么作用？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;指向他的类对象,从而可以找到对象上的方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;objc中的类方法和实例方法有什么本质区别和联系？&quot;&gt;&lt;a href=&quot;#objc中的类方法和实例方法有什么本质区别和联系？&quot; class=&quot;headerlink&quot; title=&quot;objc中的类方法和实例方法有什么本质区别和联系？&quot;&gt;&lt;/a&gt;objc中的类方法和实例方法有什么本质区别和联系？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;类方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法是属于类对象的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法只能通过类对象调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法中的self是类对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法可以调用其他的类方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法中不能访问成员变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	类方法中不定直接调用对象方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实例方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法是属于实例对象的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法只能通过实例对象调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法中的self是实例对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法中可以访问成员变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法中直接调用实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	实例方法中也可以调用类方法(通过类名)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;iOS-的沙盒目录结构是怎样的？-App-Bundle-里面都有什么？&quot;&gt;&lt;a href=&quot;#iOS-的沙盒目录结构是怎样的？-App-Bundle-里面都有什么？&quot; class=&quot;headerlink&quot; title=&quot;iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&quot;&gt;&lt;/a&gt;iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.沙盒结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Application：存放程序源文件，上架前经过数字签名，上架后不可修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Documents：常用目录，iCloud备份目录，存放数据,这里不能存缓存文件,否则上架不被通过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Library&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caches：存放体积大又不需要备份的数据,SDWebImage缓存路径就是这个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preference：设置目录，iCloud会备份设置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp：存放临时文件，不会被备份，而且这个文件下的数据有可能随时被清除的可能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.App Bundle 里面有什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Info.plist:此文件包含了应用程序的配置信息.系统依赖此文件以获取应用程序的相关信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可执行文件:此文件包含应用程序的入口和通过静态连接到应用程序target的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;资源文件:图片,声音文件一类的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其他:可以嵌入定制的数据资源&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Objective-C-如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？&quot;&gt;&lt;a href=&quot;#Objective-C-如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？&quot; class=&quot;headerlink&quot; title=&quot;Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？&quot;&gt;&lt;/a&gt;Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	这题目主要考察的是runtime如何交换方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	先在分类中添加一个方法,注意不能重写系统方法,会覆盖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	+ (NSString *)myLog&amp;#123;    // 这里写打印行号,什么方法,哪个类调用等等&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	然后交换方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 加载分类到内存的时候调用+ (void)load&amp;#123;    // 获取imageWithName方法地址    Method description = class_getClassMethod(self, @selector(description));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 获取imageWithName方法地址    Method myLog = class_getClassMethod(self, @selector(myLog));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 交换方法地址，相当于交换实现方式    method_exchangeImplementations(description, myLog);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;strong-weak-unsafe-unretained-的区别？&quot;&gt;&lt;a href=&quot;#strong-weak-unsafe-unretained-的区别？&quot; class=&quot;headerlink&quot; title=&quot;strong / weak / unsafe_unretained 的区别？&quot;&gt;&lt;/a&gt;strong / weak / unsafe_unretained 的区别？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;weak只能修饰OC对象,使用weak不会使计数器加1,对象销毁时修饰的对象会指向nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strong等价与retain,能使计数器加1,且不能用来修饰数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unsafe_unretained等价与assign,可以用来修饰数据类型和OC对象,但是不会使计数器加1,且对象销毁时也不会将对象指向nil,容易造成野指针错误&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何为-Class-定义一个对外只读对内可读写的属性&quot;&gt;&lt;a href=&quot;#如何为-Class-定义一个对外只读对内可读写的属性&quot; class=&quot;headerlink&quot; title=&quot;如何为 Class 定义一个对外只读对内可读写的属性?&quot;&gt;&lt;/a&gt;如何为 Class 定义一个对外只读对内可读写的属性?&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在头文件中将属性定义为readonly,在.m文件中将属性重新定义为readwrite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;frame-和-bounds-的区别是什么？&quot;&gt;&lt;a href=&quot;#frame-和-bounds-的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;frame 和 bounds 的区别是什么？&quot;&gt;&lt;/a&gt;frame 和 bounds 的区别是什么？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;frame相对于父视图,是父视图坐标系下的位置和大小。bounds相对于自身,是自身坐标系下的位置和大小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;frame以父控件的左上角为坐标原点，bounds以自身的左上角为坐标原点&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Instancetype&quot;&gt;&lt;a href=&quot;#Instancetype&quot; class=&quot;headerlink&quot; title=&quot;Instancetype:&quot;&gt;&lt;/a&gt;Instancetype:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSArray  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (id)constructAnArray;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当我们使用如下方式初始化NSArray时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSArray constructAnArray];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据Cocoa的方法命名规范，得到的返回类型就和方法声明的返回类型一样，是id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSArray  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)constructAnArray;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当使用相同方式初始化NSArray时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. [NSArray constructAnArray];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;得到的返回类型和方法所在类的类型相同，是NSArray*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instancetype的作用，就是使那些非关联返回类型的方法返回所在类的类型！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;①instancetype可以返回和方法所在类相同类型的对象，id只能返回未知类型的对象；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;②instancetype只能作为返回值，不能像id那样作为参数，比如下面的写法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;请简单描述一下队列和多线程的使用原理&quot;&gt;&lt;a href=&quot;#请简单描述一下队列和多线程的使用原理&quot; class=&quot;headerlink&quot; title=&quot;请简单描述一下队列和多线程的使用原理&quot;&gt;&lt;/a&gt;请简单描述一下队列和多线程的使用原理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在iOS中队列分为以下几种：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 串行队列：队列中的任务只会顺序执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t q = dispatch_queue_create(&amp;quot;...&amp;quot;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 并行队列： 队列中的任务通常会并发执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t q = dispatch_queue_create(&amp;quot;......&amp;quot;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 全局队列：是系统的，直接拿过来（GET）用就可以；与并行队列类似&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t q = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 主队列：每一个应用程序对应唯一一个主队列，直接GET即可；在多线程开发中，使用主队列更新UI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t q = dispatch_get_main_queue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上面这四种是针对GCD来讲的，串行队列中的任务只能一个个地执行，在前一个没有执行完毕之前，下一个只能等待。并行队列可以并发地执行任务，因此多个任务之间执行的顺序不能确定，当添加一个新的任务时，交由GCD来判断是否要创建新的新的线程。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;static的作用&quot;&gt;&lt;a href=&quot;#static的作用&quot; class=&quot;headerlink&quot; title=&quot;static的作用&quot;&gt;&lt;/a&gt;static的作用&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这个关键在实际开发中挺常用的。当我们使用实例成员变量不好处理时，我们将声明为静态变量，因此它有以下特性。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参考答案：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 函数体内static变量的作用范围为该函数体，不同于auto变量，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 在模块内的static全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 在模块内的static函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明它的模块内&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 在类中的static成员变量属于整个类所拥有，对类的所有对象只有一份拷贝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;self-super&quot;&gt;&lt;a href=&quot;#self-super&quot; class=&quot;headerlink&quot; title=&quot;self super&quot;&gt;&lt;/a&gt;self super&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;下面的代码输出什么？ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation Son : Father&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [super init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;%@&amp;quot;, NSStringFromClass([self class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;%@&amp;quot;, NSStringFromClass([super class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSStringFromClass([self class]) = Son&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSStringFromClass([super class]) = Son&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个题目主要是考察关于Objective-C中对self和super的理解。我们都知道：self是类的隐藏参数，指向当前调用方法的这个类的实例。那super呢？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;很多人会想当然的认为“super和self类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super是一个 Magic Keyword，它本质是一个编译器标示符，和self 是指向的同一个消息接受者！他们两个的不同点在于：super会告诉编译器，调用class 这个方法时，要去父类的方法，而不是本类里的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上面的例子不管调用[self class]还是[super class]，接受消息的对象都是当前 Son ＊xxx 这个对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当使用self调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用super时，则从父类的方法列表中开始找。然后调用父类的这个方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过self来调用方法时，会转换成：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id objc_msgSend(id self, SEL op, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;而通过super调用方法时，会转换成：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id objc_msgSendSuper(struct objc_super *super, SEL op, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;而第一个参数是 objc_super 这样一个结构体，其定义如下:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_super &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __unsafe_unretained id receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __unsafe_unretained Class super_class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;什么是单例，如何设计单例？&quot;&gt;&lt;a href=&quot;#什么是单例，如何设计单例？&quot; class=&quot;headerlink&quot; title=&quot;什么是单例，如何设计单例？&quot;&gt;&lt;/a&gt;什么是单例，如何设计单例？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;参考答案：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;单例就是全局都只有一个对象存在，而且是在整个App运行过程中都存在。每个App都会有单例，比如UIApplication。而我们在做用户数据存储时，通常都会用单例存储，因为应用在所有操作中，经常要求先登录。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下面这种写法是最常用的写法，这个是线程安全的。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)shared &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static HYBUserManager *sg_userManager = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static dispatch_once_t onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dispatch_once(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (sg_userManager == nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sg_userManager = [[HYBUserManager alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return sg_userManager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;怎么用copy关键字？&quot;&gt;&lt;a href=&quot;#怎么用copy关键字？&quot; class=&quot;headerlink&quot; title=&quot;怎么用copy关键字？&quot;&gt;&lt;/a&gt;怎么用copy关键字？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;分析：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy关键字只能应用于对象，不能用于基本类型。copy属性会复制一份，并且强引用之，但是对于集合类型，通常并不能达到深拷贝的目的。NSString、NSArray、NSDictionary等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，当然很多时候都使用了strong来声明。block也使用copy关键字来声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参考答案：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• copy关键字只能应用于对象，不能用于基本类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 对于字符串，理应始终使用copy，虽然使用strong一般情况下也没有关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 对于不可变集合类型，有可变和不可变类型，若要防止外部的修改影响所传过来的值，应该使用copy来声明，虽然大多情况下使用strong一定问题都没有。不过，实际开发中，我见到的几乎都是使用strong来声明的，包括笔者在内。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 对于可变集合类型，都应该使用strong来声明，不能使用copy，因为copy会生成一个不可变的类型，而不是可变的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于block，都应该使用copy来声明，原因是block来捕获上下文的信息。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对数组中的元素去重复&quot;&gt;&lt;a href=&quot;#对数组中的元素去重复&quot; class=&quot;headerlink&quot; title=&quot;对数组中的元素去重复&quot;&gt;&lt;/a&gt;对数组中的元素去重复&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *array = @[@&amp;quot;12-11&amp;quot;, @&amp;quot;12-11&amp;quot;, @&amp;quot;12-11&amp;quot;, @&amp;quot;12-12&amp;quot;, @&amp;quot;12-13&amp;quot;, @&amp;quot;12-14&amp;quot;];//推荐的写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有如下几种方案：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 第一种方法：开辟新的内存空间，然后判断是否存在，若不存在则添加到数组中，得到最终结果的顺序不发生变化。效率分析：时间复杂度为O ( n2 )：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:array.count];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 外层一个循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (NSString *item in array) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 调用-containsObject:本质也是要循环去判断，因此本质上是双层遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 时间复杂度为O ( n^2 )而不是O (n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (![resultArray containsObject:item]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [resultArray addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;resultArray: %@&amp;quot;, resultArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原来集合操作可以通过valueForKeyPath来实现的，去重可以一行代码实现： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array = [array valueForKeyPath:@&amp;quot;@distinctUnionOfObjects.self&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是返回的结果是无序的，与原来的顺序不同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 第二种方法：利用NSDictionary去重，字典在设置key-value时，若已存在则更新值，若不存在则插入值，然后获取allValues。若不要求有序，则可以采用此种方法。若要求有序，还得进行排序。效率分析：只需要一个循环就可以完成放入字典，若不要求有序，时间复杂度为O(n)。若要求排序，则效率与排序算法有关：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] initWithCapacity:array.count];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (NSString *item in array) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [resultDict setObject:item forKey:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *resultArray = resultDict.allValues;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, resultArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果需要按照原来的升序排序，可以这样：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resultArray = [resultArray sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *item1 = obj1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *item2 = obj2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return [item1 compare:item2 options:NSLiteralSearch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, resultArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;• 第三种方法：利用集合NSSet的特性(确定性、无序性、互异性)，放入集合就自动去重了。但是它与字典拥有同样的无序性，所得结果顺序不再与原来一样。如果不要求有序，使用此方法与字典的效率应该是差不多的。效率分析：时间复杂度为O (n)：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSSet *set = [NSSet setWithArray:array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *resultArray = [set allObjects];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, resultArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果要求有序，那就得排序，比如这里要升序排序：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resultArray = [resultArray sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *item1 = obj1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSString *item2 = obj2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return [item1 compare:item2 options:NSLiteralSearch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, resultArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;补充：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一直没有使用过有序集合，网友们反馈到可以直接使用有序集合，感谢大家：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSOrderedSet *set = [NSOrderedSet orderedSetWithArray:array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, set.array);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;请写出有多少有方法给UIImageView添加圆角&quot;&gt;&lt;a href=&quot;#请写出有多少有方法给UIImageView添加圆角&quot; class=&quot;headerlink&quot; title=&quot;请写出有多少有方法给UIImageView添加圆角?&quot;&gt;&lt;/a&gt;请写出有多少有方法给UIImageView添加圆角?&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、最直接的方法就是使用如下属性设置：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imgView.layer.cornerRadius = 10;// 这一行代码是很消耗性能的imgView.clipsToBounds = YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;好处是使用简单，操作方便。坏处是离屏渲染（off-screen-rendering）需要消耗性能。对于图片比较多的视图上，不建议使用这种方法来设置圆角。通常来说，计算机系统中CPU、GPU、显示器是协同工作的。CPU计算好显示内容提交到GPU，GPU渲染完成后将渲染结果放入帧缓冲区。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;简单来说，离屏渲染，导致本该GPU干的活，结果交给了CPU来干，而CPU又不擅长GPU干的活，于是拖慢了UI层的FPS（数据帧率），并且离屏需要创建新的缓冲区和上下文切换，因此消耗较大的性能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 给UIImage添加生成圆角图片的扩展API：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIImage *)hyb_imageWithCornerRadius:(CGFloat)radius &amp;#123;  CGRect rect = (CGRect)&amp;#123;0.f, 0.f, self.size&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsBeginImageContextWithOptions(self.size, NO, UIScreen.mainScreen.scale);  CGContextAddPath(UIGraphicsGetCurrentContext(),                   [UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:radius].CGPath);  CGContextClip(UIGraphicsGetCurrentContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self drawInRect:rect];  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsEndImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return image;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后调用时就直接传一个圆角来处理：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imgView.image = [[UIImage imageNamed:@&amp;quot;test&amp;quot;] hyb_imageWithCornerRadius:4];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;持续收录一些较经典的面试题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
  <entry>
    <title>一些有道理的话</title>
    <link href="http://yoursite.com/2016/06/23/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2016/06/23/读书生活/感悟/</id>
    <published>2016-06-23T02:00:45.000Z</published>
    <updated>2016-08-04T07:19:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;收藏转载的一些个人感觉比较有道理的话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;乐观的态度和对事物的专注度能让你解决大部分问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;慢慢来比较快&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在你没有能力改变规则之前，那就遵守规则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;买东西，就买能力范围内买最贵的，永远不会后悔&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不想学东西的时候，人就和死差不多了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这一生，情最难料。也难了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;穷人才留破烂，越留越穷&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人与人之间，在你觉得刚刚好的时候，对方会觉得吃了点亏，所以你得学会吃点亏，对方才会觉得刚刚好。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;梦想从来不是用来实现的，梦想是用来一寸一寸接近的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;阅读永远是一场孤独的旅程，考验的是你有没有决心和耐心走到生命的尽头。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怕拒绝，选择沉默，错过了佳人。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怕背叛，选择孤僻，错过了朋友。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怕丢人，选择退缩，错过了经历。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怕失败，选择安稳，错过了一切。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;专注于过提升自己的生活，而不是量入为出的日子&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;差距就在最简单的地方体现出来，并且决定着后面的发展&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;赢家从不抱怨也从来不做无意义的事情&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有些事情你现在不做以后也不会做&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;抱怨不如去想如何解决，想如何解决不如动手去做&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个人的精力毕竟是有限的，过于重视自己外在行为的优雅与否，必然带来内心世界的空洞与贫乏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总有一些本质上的东西是不会变的，比如认真。而人与人之间的区别，很大程度上也是由认真指数的多少来决定的。尤其对于男生而言，认真这点则显得更为重要。因为对人对事的认真程度，直接决定了你对其投入的时间、精力和感情的多与少；对工作的认真程度，决定了经济与物质；对感情（亲情、友情、爱情）的认真程度，决定了人际关系；对爱好的认真程度，决定了层次和趣味。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这世界最残忍的地方，不是无情，而是根本没有感情，他就这样冷漠的看你出生，看你欢笑，看你痛苦，看你变成一把灰。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们称之为路的 其实不过是彷徨。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;人生苦短，请去探索。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;斗米养恩 担米养仇&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我愿死在前行的路上，不愿死在床上。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一，成王败寇绝对是真理，少时看了不少成功学书籍，比如书里说要有主见要坚持，我常想那坚持的东西是错的呢？岂不是冥顽不灵？后来我想通了，坚持主见也好从善如流也好，这都不重要，关键还在于最后的结果。你成功了，坚持主见就是有魄力，失败了，就是冥顽不灵。没什么好解释的。赵括如果成功了，那就是英雄出少年，天纵奇才，未出茅庐而知天下事。既然失败了，那就是纸上谈兵，那就是白起的背景板。而成功学基本上就是你成功了，你说什么都有人听。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二，每个人都是以自我为中心的，只是这个中心的半径大小不同。仔细观察人际交往的过程，就不难发现人们最感兴趣的话题永远是自己。有句话说的好，你生活中发生的99.9%的事别人根本不关心。所以，很多时候的人际交往都是自说自话。另一个启示就是和人交往时，多聊对方更容易获得信任与亲近感。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三，人远比自己想象得自由，后面，还得加一句，但大多数人害怕自由，逃避自由，因此不自由。前半句貌似是福柯说的，也是《月亮河六便士》和《源泉》的主题，也是我多年来深信不疑的东西。后半句是我从村上的小说中提炼出的，大部分人说喜欢自由不过是说说罢了。君不见有几个人成了洛克，有几个人成了斯克里特兰德？自由意味着责任和勇气。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四，‘我’其实是个第二人称。自我的定义，来源于他人。司汤达说过：“一个离群索居的人可以得到一切，唯独没有个性。‘ 我们通过周围的人对我们行为的反应不停修正着对自己的定义。阿兰德波顿的比喻就是”自我就像个变形虫，它的外壳可以灵活收缩，从而适应环境。’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第五，喜欢独处与否跟性格无关。爱好独处的人完全可能乐观活泼，外向达观。对于某些人，独处是一种内在整合机制，甚至是建立强大内心的必需品。能不能忍受独处其实就是看你有没有自我。没有自我的人，内心极其空虚，需要过上热闹的生活，片刻的独处都会让他们意识到自己的贫乏，因此想方设法逃避，再无聊的消遣也比独处美好。而有些人能用这段独处时间发掘自己，发掘平凡生活中细小的美好，把小日子过得风生水起，跟人相处时又能绽放万丈光芒。这条主要是看叔本华的书时悟出来的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第六，很多人愤怒的不是不公平，而是自己没有分到一杯羹。不妨看看周围整天骂不公平又削尖脑袋想挤进既得利益群体的人吧。有的人痛恨的不是腐败，而是为什么自己不是受益的人。这个区别很微妙但很大。看《妖言水浒》时杨志在开封那段想到的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第七，喜欢古典乐的没资格歧视喜欢口水歌的（举个笠子而已，可以替换成任何东西）。因为大家都是消费者，古典乐和口水歌的确在艺术价值上有区别，生产者的水平也有区别，但消费者终归只是消费者，因为自己消费的东西比别人高就产生优越感就跟拿别人的东西炫耀一般，很可耻也很幼稚。只有你自己产出的东西才可以添加做为自己的价值。这一段话可以回答任何鄙视链的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第八，人生中的重大问题（诸如爱情，理想，信念）是没有标准答案的，甚至可以说没有答案。但绝对有必要思考，因为只有思考了这些问题，你才能拥有一套自己的操作系统（三观），然后在面对人生中的小问题时才能少些疑惑。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第九，我们每个人都不是自己想象得那么与众不同。以前看到个有趣的调查，70%的司机认为自己技术高于平均水平。大家仔细揣摩一下其中的意味吧。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十，强者不一定有罪，弱者不一定无辜。强弱，贫富跟道德不挂钩。当下，不少人一有事发生就把自己打扮成弱者的形态，迅速占领道德制高点。比如碰瓷。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十一，人是由他做的事定义的，而不是他知道的道理定义的。就像我写下了这么多条，也完全说明不了我是什么样的人。这世界根本不在乎我是谁，我知道什么，只在乎我做了什么，我能做什么。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十二条，有些人通过贬低、批评他人来减轻对自己处境的焦虑和不满。不管你说什么，他们都是负能量满满地大发议论。遇到这样的人，一定要尽早远离。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十三条，真正喜欢的事不需要坚持。整天嚷嚷着要努力，要奋斗，其实多半不是真心喜欢眼下自己做的事。你觉得梵高会觉得画画是需要给自己打鸡血告诉自己咬牙坚持的吗？你会告诉自己坚持天天吃饭吗，坚持玩儿吗？这条是看克里希那穆提的书时领悟的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十四条，想做一件事的时候，直接努力去做就行了，不用去听别人说有多难之类的抱怨。他说难是对他自己难，多半也是怕你成功让他难堪。如果你真的想做，那就做，大力出奇迹，够吊才会赢。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第十五条，如果你认为你看了这个问题下的顿悟自己就能顿悟，那你永远顿悟不了了。如果你觉得看了这些就比没看更好，那还是不要看了，知道，做不到，等于不知道。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你想在一年内超越同龄人，每天多工作一小时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你想在十年内超越同龄人，每天多学习一小时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你想在一辈子超越同龄人，每天多运动一小时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;优秀的来源是彻底地自我管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过积累普通人也可以做出不普通的事&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;百善孝为先，论心不论迹，论迹寒门无孝子；万恶淫为首，论迹不论心，论心世上无圣人。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不如意事常八九，可与言者无二三。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;力量就是美&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;想说的话要说出来,不说出来别人不会懂&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;明天再做是傻瓜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;less is more的另一层含义是，既然只关注于核心因素，那么就将核心因素做到极至&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一切社会活动都是基于价值互换。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;小野二郎的事迹深深的激励了我，9岁入行，做了一辈子的寿司，现在90岁，是世界上年纪最大的米其林三星主厨。几十年如一日，每天不停的精进完善自己的技艺，用一辈子做好一件事。这是工匠精神的最好体现，成功就是坚持用一生，去不断提升和完善自己的技艺，使之达到完美的境界。我相信无论做哪一行，做什么事业，这就是成功的不二法则。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在成年人的社交关系中，对方会如何看待你、如何对待你，本质上只是取决于你个人的价值，你对别人的任何讨好行为不仅不会令你和对方的关系变得更好，反而会降低你在对方心目中的价值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;社交关系绝不仅仅是你对别人好，别人也会对你好，你要记住，你对别人的付出能否获得别人的回报，最根本的是取决于你是谁，你是否有足够的价值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你是一个百万富翁，即便是随手将一个小孩从地上扶起来，小孩的父母都会对你感激涕零；你是一个乞丐，你天天跪着给这小孩的父母磕头，给他们掏粪，给他们打扫卫生，他们也不会感激你。因为他们认为你的价值太低，没有必要回报你。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一个道理其实是悖论，就是无论我告诉你什么道理，当你的心智没有达到这个境界或接近的水平时或经历过一些事情的时候，你是不会理解这个道理的。或者你以为你知道这个道理，其实你不知道。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二个很重要的道理是，除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三个道理是与第二个有关联的，就是别人指责你的事情或批评的你的理由，往往最能伤害你的，是那些你也这样认为的事情。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四个道理是其实人跟人之间差别其实不大，所以不要与别人去比较，人生就是一场长跑，你可能不会是第一名，但也不不太会是最后一名，和前面比你会有动力，和后面比你会有幸福。但重要的是享受过程。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第五个道理是永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。人生就是一场游戏，懂得你在玩的游戏的游戏规则，然后玩好它。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;前面五个道理如果你真理解，你会觉得所谓别人的眼光，世俗的看法都不再那么重要，你内心的感觉，你的时间才最重要。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第六个道理是人身体的很多器官的受伤是超过一个界限之后不可逆的，比如眼睛过了假性就是真性近视，牙齿牙龈炎症过长一定会让你牙疼并拔牙的，脂肪肝时间过长就是肝硬化，而这些疾病的初期都是可逆的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第七个的道理是生活其实是一种运营，时间是你最宝贵的资源，还有钱，关系，都是你的一种投入，自己重视什么，事业，友谊，家庭上，就多投入些，种瓜得瓜，好好平衡各个关系是你要做好的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第八个道理是要感恩这个世界。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;巧者多劳 智者多忧 无能者无所求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;精于心 简于形&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收藏转载的一些个人感觉比较有道理的话&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>骑行</title>
    <link href="http://yoursite.com/2016/06/23/%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/%E9%AA%91%E8%A1%8C/"/>
    <id>http://yoursite.com/2016/06/23/读书生活/骑行/</id>
    <published>2016-06-23T02:00:45.000Z</published>
    <updated>2016-08-04T07:19:33.000Z</updated>
    
    <content type="html">&lt;p&gt;骑车出去随手拍的一些照片&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw1024/bc254b75jw1f559ehq6z3j21kw23uqut.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw1024/bc254b75jw1f559em7dhmj21kw23u7wh.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw1024/bc254b75jw1f559end4p3j20qo0zkaph.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw1024/bc254b75jw1f559ev3xehj21kw23u4qp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw1024/bc254b75jw1f559evsa81j20qo0zkai1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;骑车出去随手拍的一些照片&lt;br&gt;
    
    </summary>
    
      <category term="读书-生活" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6-%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>关于CocoaPods的使用总结</title>
    <link href="http://yoursite.com/2016/06/16/iOS/%E5%85%B3%E4%BA%8ECocoaPods%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/06/16/iOS/关于CocoaPods的使用总结/</id>
    <published>2016-06-16T08:27:20.000Z</published>
    <updated>2016-08-04T07:53:46.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;CocoaPods是iOS开发中一个管理第三方包的工具，个人感觉像Java中的Maven.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;参考这里&lt;a href=&quot;http://code4app.com/article/cocoapods-install-usage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;进入项目的根目录(有proj文件的目录)，并在根目录下创建一个名叫Podfile的文件（没有任何后缀，编辑时最好用xcode打开）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ex1: 添加了多个依赖(可能有更规范的书写方式)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &amp;apos;8.4&amp;apos; #手机的系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMap3DMap&amp;apos;  #3D地图SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pod &amp;apos;AMap2DMap&amp;apos; #2D地图SDK (2D和3D不能同时使用)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMapSearch&amp;apos; #搜索服务SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMapLocation&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;CocoaLumberjack&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ex2:项目中使用的示例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &amp;apos;7.0&amp;apos; #手机的系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMap3DMap&amp;apos; #3D地图SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pod &amp;apos;AMap2DMap&amp;apos; #2D地图SDK (2D和3D不能同时使用)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMapSearch&amp;apos; #搜索服务SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pod &amp;apos;AMapLocation&amp;apos;, &amp;apos;~&amp;gt; 1.0.0&amp;apos;#定位SDK      // 导入特定版本（这个写法可能无效了）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AMapLocation&amp;apos;, &amp;apos;1.0.0&amp;apos;  // 这个是正确写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pod &amp;apos;FMDB&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;SVProgressHUD&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;Masonry&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;SDWebImage&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pod &amp;apos;AFNetworking&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;很重要：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当用#号注释掉第三方包以后，再次执行 pod install --no-repo-update 会remove掉这个包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod install --verbose --no-repo-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更换第三方版本时，可以先在配置文件中#号注释掉当前版本，然后用pod install --no-repo-update去除掉相关包，再次执行pod install --no-repo-update导入当前版本的包&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#异常及坑&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;异常：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;出现以下异常为没有CD到项目的最终根目录，这个要加以注意&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bogon:Ratings gwb$ pod install --no-repo-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] Could not automatically select an Xcode project. Specify one in your Podfile like so:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xcodeproj &amp;apos;path/to/Project.xcodeproj&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新系统后CocoaPods无法使用的问题&quot;&gt;&lt;a href=&quot;#更新系统后CocoaPods无法使用的问题&quot; class=&quot;headerlink&quot; title=&quot;更新系统后CocoaPods无法使用的问题&quot;&gt;&lt;/a&gt;更新系统后CocoaPods无法使用的问题&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;系统更新到10.11.5，在mac上下载项目，在本地没法跑，显示pod进来的第三方包很多都红了，想从新Pod进来第三方包，遇到如下数个坑。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装过程如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources --remove https://rubygems.org///等有反应之后再敲入以下命令$ gem sources -a http://ruby.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要想验证是否替换成功了，可以执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正常的输出是：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*** CURRENT SOURCES ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://ruby.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这就不用说了，替换为淘宝源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;同上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo gem sources -a https://ruby.taobao.org/$ sudo gem sources -r https://rubygems.org/$ sudo gem sources -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装 CocoaPods。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo gem update$ sudo gem install -n /usr/local/bin cocoapods -v 0.39$ pod setup$ pod --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在这里碰到的坑，默认安装了1.0.0版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;各种报错不能用，网上提供的解决办法试了很多都不管用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无奈降低版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重新安装 0.39版本能用了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外碰到的几个问题都在下边记录了，怎么和git进行连接测试等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Xocde 导出项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Authentication failed because no authentication credentials were provided.不知道什么原因，将项目路径的https替换成http就可以了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git进行连接测&quot;&gt;&lt;a href=&quot;#git进行连接测&quot; class=&quot;headerlink&quot; title=&quot;git进行连接测&quot;&gt;&lt;/a&gt;git进行连接测&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在cmd或者终端下输入以下命令行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name trigkit4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email 345823102@qq.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当然，这是我的账户信息，你需要将他们换成你自己的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建本地ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是一种传输代码的方法，速度快又安全。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在终端或cmd输入以下命令行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &amp;quot;345823102@qq.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当然，邮箱依然换成你注册github时所用的邮箱。如下图所示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;路径选择 : 使用该命令之后, 会出现提示选择ssh-key生成路径, 这里直接点回车默认即可, 生成的ssh-key在默认路径中;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;密码确认 : 这里我们不使用密码进行登录, 用密码太麻烦;就一路回车下去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;将ssh配置到GitHub中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在mac os X 下前往文件夹，/Users/自己电脑用户名/.ssh。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;windows应该是（C:\Documents and Settings\Administrator\.ssh （或者 C:\Users\自己电脑用户名\.ssh）中）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后用记事本打开id_rsa.pub，将里面的全部代码复制到github的SSH中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id_rsa.pub 文件内容 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDS0qLtpontavr43AQntX4oBOsg2R3QlWubMYvfgJsIDX6NWd5RaIDLBLEMwIFLDcpvpQKvk5S/bTy4vTuWqeY6fkQ/tZBKksQn1WuYDcSfjLF8BuPMfdkboTh9NaKESKnsiWdranEVbmB5vOAHm8T+HFGdzG7Tz4ygzCnTwvdpBYrd/4jgeazws2d7CuMeuyb+FxdDTQy9YmJJm+82ypfR//bLyzRJo3SYadnPO3VdOAZCO1Isky+p/0nNN/obC4t2y2+oHBAqJV9h37f9S8UShgDmZoVLicRi4poni0i70xj+t/hnOsT8fmEc+vM9USyN+ndawz2oWjikKgln1jOB 345823102@qq.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;登陆github网站，点击Settings——SSH keys——点击右侧的Add SSH key ，接下去你懂得。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;验证是否配置成功 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;复制如下代码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后出现如下信息：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Warning: Permanently added the RSA host key for IP address &amp;apos;192.30.252.131&amp;apos; to the list of known hosts.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi hawx1993! You&amp;apos;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;验证时可能让你输入YES，当出现以上信息时，说明配置成功，可以连接上GitHub;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Cocoapods降低版本及卸载&quot;&gt;&lt;a href=&quot;#Cocoapods降低版本及卸载&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods降低版本及卸载&quot;&gt;&lt;/a&gt;Cocoapods降低版本及卸载&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有的时候我们需要降低Cocoapods的版本来解决第三方库的兼容问题.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一. 移除pod组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这条指令会告诉你Cocoapods组件装在哪里 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ which pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以手动移除这个组件 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo rm -rf &amp;lt;path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;二. 移除 RubyGems 中的 Cocoapods程序包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Q: RubyGems是什么?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A: RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的 Ruby 打包系统。 它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看gems中本地程序包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*** LOCAL GEMS ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	activesupport (4.1.8, 3.2.21)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bigdecimal (1.2.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CFPropertyList (2.2.8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	claide (0.7.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods (0.35.0, 0.34.1, 0.34.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods-core (0.35.0, 0.34.1, 0.34.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods-downloader (0.8.0, 0.7.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods-plugins (0.3.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods-trunk (0.4.1, 0.2.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cocoapods-try (0.4.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	colored (1.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	escape (0.0.4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fuzzy_match (2.0.4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i18n (0.6.11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	io-console (0.4.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	json (1.7.7)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	json_pure (1.8.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	libxml-ruby (2.6.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minitest (5.4.3, 4.3.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	molinillo (0.1.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	multi_json (1.10.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nap (0.8.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	netrc (0.7.8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nokogiri (1.5.6)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	open4 (1.3.4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	psych (2.0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rake (0.9.6)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rdoc (4.0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sqlite3 (1.3.7)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	test-unit (2.0.0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	thread_safe (0.3.4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tzinfo (1.2.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xcodeproj (0.20.2, 0.19.4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;发现Cocoapods的程序包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods (0.35.0, 0.34.1, 0.34.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods-core (0.35.0, 0.34.1, 0.34.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods-downloader (0.8.0, 0.7.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods-plugins (0.3.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods-trunk (0.4.1, 0.2.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cocoapods-try (0.4.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;移除程序包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo gem uninstall cocoapods -v 0.35.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully uninstalled cocoapods-0.35.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo gem uninstall cocoapods-core -v 0.35.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully uninstalled cocoapods-core-0.35.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后安装指定版本的Cocoapods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo gem install cocoapods -v 0.34.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装成功后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pod --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.34.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CocoaPods是iOS开发中一个管理第三方包的工具，个人感觉像Java中的Maven.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发通用技巧" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Objc概念知识点学习笔记</title>
    <link href="http://yoursite.com/2016/06/15/iOS/Objc%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/06/15/iOS/Objc概念知识点学习笔记/</id>
    <published>2016-06-15T08:07:24.000Z</published>
    <updated>2016-08-09T08:49:44.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;UIApplication-amp-AppDelegate&quot;&gt;&lt;a href=&quot;#UIApplication-amp-AppDelegate&quot; class=&quot;headerlink&quot; title=&quot;UIApplication&amp;amp;AppDelegate&quot;&gt;&lt;/a&gt;UIApplication&amp;amp;AppDelegate&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）UIApplication对象是应用程序的象征，一个UIApplication对象就代表一个应用程序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）每一个应用都有自己的UIApplication对象，而且是单例的，如果试图在程序中新建一个UIApplication对象，那么将报错提示。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）通过[UIApplication sharedApplication]可以获得这个单例对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（4） 一个iOS程序启动后创建的第一个对象就是UIApplication对象，且只有一个（通过代码获取两个UIApplication对象，打印地址可以看出地址是相同的）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（5）利用UIApplication对象，能进行一些应用级别的操作，如：设置应用程序图标右上角的红色提醒数字、设置联网指示器的可见性、管理状态栏、openURL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下面介绍appdelagate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在main.m的UIApplicationMain函数中，根据@&amp;quot;AppDelegate&amp;quot;这个类，创建一个delegate对象，并将该delegate对象赋值给UIApplication对象中的delegate属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有的移动操作系统都有个致命的缺点：app很容易受到打扰。比如一个来电或者锁屏会导致app进入后台甚至被终止。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;还有很多其它类似的情况会导致app受到干扰，在app受到干扰时，会产生一些系统事件，这时UIApplication会通知它的delegate对象，让delegate代理来处理这些系统事件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;作用：当被打断的时候，通知代理进入到后台。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;响应者链&quot;&gt;&lt;a href=&quot;#响应者链&quot; class=&quot;headerlink&quot; title=&quot;响应者链&quot;&gt;&lt;/a&gt;响应者链&lt;/h4&gt;&lt;p&gt;事件分类&lt;br&gt;对于IOS设备用户来说，他们操作设备的方式主要有三种：触摸屏幕、晃动设备、通过遥控设施控制设备。对应的事件类型有以下三种：&lt;br&gt;1、触屏事件（Touch Event）&lt;br&gt;2、运动事件（Motion Event）&lt;br&gt;3、远端控制事件（Remote-Control Event）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;响应者链（Responder Chain）&lt;br&gt;指的是有响应和处理事件能力的对象。响应者链就是由一系列的响应者对象构成的一个层次结构。&lt;br&gt;什么是事件的响应者&lt;br&gt;只要继承了UIResponder的对象就可以作为事件的响应者&lt;br&gt;其中AppDelegate类是创建一个iOS项目时自动创建的继承UIResponder的应用程序委托类&lt;br&gt;// 接口文件&lt;/p&gt;
&lt;p&gt; #import &lt;uikit uikit.h=&quot;&quot;&gt;&lt;br&gt; @interface AppDelegate : UIResponder &lt;uiapplicationdelegate&gt;&lt;/uiapplicationdelegate&gt;&lt;/uikit&gt;&lt;/p&gt;
&lt;p&gt; 响应者链&lt;br&gt;如果当前响应者无法响应用户事件，它将继续向上传递，直到找到请响应者，这个传递过程形成了一条有规律的链条，组成了响应者链（一个层次结构）如果一直找到AppDelegate类还是无法响应用户事件，那么这个事件将无法被响应，但如果在响应者链上传递的过程中，有某个响应者对该传递的事件有响应，该传递过程将立即停止。&lt;br&gt;    initial view若不能处理事件，则传到其父视图view&lt;br&gt;    view若不能处理，则传到其父视图，因为它还不是最上层视图&lt;br&gt;    这里view的父视图是view controller的view，因为这个view也不能处理事件，因此传给view controller&lt;br&gt;    若view controller也不能处理此事件，则传到window&lt;br&gt;    若window也不能处理此事件，则传到app单例对象Application&lt;br&gt;    若UIApplication单例对象也不能处理，则表示无效事件&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;什么是第一响应者&lt;br&gt;与用户交互的控件就是第一响应者，它将作为响应者链的开始，事件首先发送给第一响应者，然后再依次传递下去，直到该事件被某个响应者处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起始及事件分发&lt;br&gt;当一个触摸事件发生，首先接收到事件的对象是UIApplication&lt;br&gt;将事件放入UIApplication的活动队列中&lt;br&gt;UIApplication的单例对象，再从活动队列取出该事件，并传递给UIWindow&lt;br&gt;UIWindow的对象将调用-(nullable UIView &lt;em&gt;)hitTest:(CGPoint)point withEvent:(nullable UIEvent &lt;/em&gt;)event;方法&lt;br&gt;• 在这个方法中对其下一层的每一个视图调用- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent &lt;em&gt;)event;方法，用于判断当前点击的点是否位于当前视图中&lt;br&gt;（1）若返回NO，则表示不在当前视图中，-(nullable UIView &lt;/em&gt;)hitTest:(CGPoint)point withEvent:(nullable UIEvent &lt;em&gt;)event;方法返回nil;&lt;br&gt;（2）若返回YES，则说明该触摸事件发生在当前视图，然后当前视图再调用 -(nullable UIView &lt;/em&gt;)hitTest:(CGPoint)point withEvent:(nullable UIEvent &lt;em&gt;)event;方法;&lt;br&gt;（3）重复上述过程，直到- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent &lt;/em&gt;)event;方法返回YES，并使用它调用-(nullable UIView &lt;em&gt;)hitTest:(CGPoint)point withEvent:(nullable UIEvent &lt;/em&gt;)event;方法返回nil的时候，表示此视图就是这个触摸事的第一响应者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/652024-2e717ff7875279f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;懒加载&quot;&gt;&lt;a href=&quot;#懒加载&quot; class=&quot;headerlink&quot; title=&quot;懒加载&quot;&gt;&lt;/a&gt;懒加载&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;也称为延迟加载，即在需要的时候才加载（效率低，占用内存小）。所谓懒加载，写的是其get方法.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableArray *)fakeData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (!_fakeData)//判断是否已经有了，若没有，则进行实例化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.fakeData   = [NSMutableArray array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _fakeData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;优点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;防止对象被提前创建（内存优化，如加载plist文件等耗内存的操作）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;防止对象重复创建 （永远只加载一次）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;防止对象使用时,还没被创建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以在懒加载方法里面,进行初始化操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;懒加载代码示例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewDidLoad];&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSArray *)shopData&amp;#123;    if (!_shopData) &amp;#123;        _shopData = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;shop&amp;quot; ofType:@&amp;quot;plist&amp;quot;]];    &amp;#125;    return _shopData;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;iOS开发中需要的图片&quot;&gt;&lt;a href=&quot;#iOS开发中需要的图片&quot; class=&quot;headerlink&quot; title=&quot;iOS开发中需要的图片&quot;&gt;&lt;/a&gt;iOS开发中需要的图片&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、产品设计图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   可以以6的长宽比 750*1134来设计。这些图片用于描述app是什么样子的，这是app开发人员的开发参考。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、产品切图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;将设计师将设计稿切成可以用来开发的图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    颜色值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iOS颜色值取 RGB各颜色的值比如某个色值，给予iOS开发的色值为 R:12 G:34 B:56 给出的值就是 12,34,56(有时也要根据开发的习惯，有时也用十六进制)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    内部设计细节：1、所有能点击的图片不得小于44px（Retina需要88px）2、单独存在的部件必须是双数尺寸 3、两倍图以@2x作为命名后缀&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、图标icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      需要四种尺寸：58*58、80*80、120*120、180*180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、启动图LaunchImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      需要四种尺寸：3.5英寸（640*960），4英寸（640*1136），4.7英寸（750*1134），5.5英寸（1242*2208）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5、引导图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      这是用于用户第一次使用app或者app更新之后展示新特性的图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6、App Store上架图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      这个是用于在App Store上面 介绍app的，需要四种尺寸：3.5英寸（640*960），4英寸（640*1136），4.7英寸（750*1134），5.5英寸（1242*2208）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在-m中的声明-interface&quot;&gt;&lt;a href=&quot;#在-m中的声明-interface&quot; class=&quot;headerlink&quot; title=&quot;在.m中的声明@interface&quot;&gt;&lt;/a&gt;在.m中的声明@interface&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//in Header.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Header&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//in Header.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Header()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是个非常常见的设计,为什么在.m文件里面,也要出现一个接口声明呢?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这很类似于一个分类,但其实它不是一个分类(或者你也可以叫它anonymous Catogary),其实这是一个叫做class extension的东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说说区别:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  首先 extension 可以重声明一个数据成员,比如一个数据成员是只读的,你可以把它变成可读写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  分类根本不同意你扩展数据成员,它只扩展一些方法, 但是在Clang/LLVM 2.0 compiler 以后, extension可以这么做.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  有时候,你如果希望实现一些不公开的方法供自己使用,那你可以把它放入.m的extension里面.那么这些接口都是不公开的了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;h-m属性&quot;&gt;&lt;a href=&quot;#h-m属性&quot; class=&quot;headerlink&quot; title=&quot;.h  .m属性&quot;&gt;&lt;/a&gt;.h  .m属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;属性在.h文件中和在.m中声明是有区别的。区别就是，在.h文件中声明的属性，外部类可以通过“类实例.属性”来调用但在.m中声明的则不可以，获取和设置的方法，只能是通过setValue:forKey和valueForKey来实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;awakeFromNib&quot;&gt;&lt;a href=&quot;#awakeFromNib&quot; class=&quot;headerlink&quot; title=&quot;awakeFromNib&quot;&gt;&lt;/a&gt;awakeFromNib&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当.nib文件被加载的时候，会发送一个awakeFromNib的消息到.nib文件中的每个对象，每个对象都可以定义自己的awakeFromNib函数来响应这个消息，执行一些必要的操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;也就是说只有通过.nib文件创建view对象时才会执行awakeFromNib 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一般的，当IB加载的时候，我们会通过调用自定义对象的awakeFromNib函数，来对界面进行补充。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选择的时机：当你需要写一个UIView的子类并且想在load nib的时候做一些初始化工作的时候很有用。bundle在load nib后会给每个view对象发送一个awakeFromNib消息。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Weak-outlet&quot;&gt;&lt;a href=&quot;#Weak-outlet&quot; class=&quot;headerlink&quot; title=&quot;Weak outlet&quot;&gt;&lt;/a&gt;Weak outlet&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当我们使用Outlet属性的时候，我们是在viewController里面使用，而这个Outlet属性是有view来进行强引用的，我们在viewController里面仅仅是对其使用，并没有必要拥有它，所以是weak的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;interface&quot;&gt;&lt;a href=&quot;#interface&quot; class=&quot;headerlink&quot; title=&quot;@interface&quot;&gt;&lt;/a&gt;@interface&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 继承&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 声明协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 定义实例变量（@interface后面加大括号那种）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 定义@property&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. 声明方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.h里面的@interface，不消说，是典型的头文件，它是供其它Class调用的。它的@property和functions，都能够被其它Class“看到”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;而.m里面的@interface，在OC里叫作Class Extension，是.h文件中@interface的补充。但是.m文件里的@interface，对外是不开放的，只在.m文件里可见。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因此，我们将对外开放的方法、变量放到.h文件中，而将不想要对外开放的变量放到.m文件中（.m文件的方法可以不声明，直接用）。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;a href=&quot;#implementation&quot; class=&quot;headerlink&quot; title=&quot;@implementation&quot;&gt;&lt;/a&gt;@implementation&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 继承&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 定义实例变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 合成属性（@synthesize和@dynamic）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 实现方法（包括协议方法）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;所有类都继承自NSObject，而NSObject里面有init。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以所有类都可以拥有init这个方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以说init是最纯洁的初始化方法。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;IBAction-amp-IBOutlet&quot;&gt;&lt;a href=&quot;#IBAction-amp-IBOutlet&quot; class=&quot;headerlink&quot; title=&quot;IBAction &amp;amp; IBOutlet&quot;&gt;&lt;/a&gt;IBAction &amp;amp; IBOutlet&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;从界面上的一个控件 Control+drag 拖一个方法到代码的实现区，会得到类似：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(IBAction) touchCardButton:(UIButton*)sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里的 IBAction 其实返回的是 void，类似 typedef IBAction void。IBAction 是为了让 Xcode 去区别方法是不是 target action，这样我们可以做到鼠标在上面的时候界面会高亮对应的控件之类的。但是编译器会忽略它，对编译器来说它就是 void。当你要改这个方法名的时候，有点麻烦的是你需要对着对应的控件点右键，然后叉掉方法绑定，然后重新连接。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从界面上的一个控件 Control+drag 拖一个方法到代码的属性区，会得到类似：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (weak, nonatomic) IBOutlet UILabel* flipsLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;的UI属性。这里一定是一个 weak 的属性，因为这个属性是被 View 所 strong 持有的，对 Controller 来说只应该 weak 地指向它。这里的 IBOutlet 跟 IBAction 的意思差不多，主要是方便 Xcode用它，编译器会忽略它。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法多个参数的写法&quot;&gt;&lt;a href=&quot;#方法多个参数的写法&quot; class=&quot;headerlink&quot; title=&quot;方法多个参数的写法:&quot;&gt;&lt;/a&gt;方法多个参数的写法:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(方法的数据类型)函数名:(参数1数据类型)参数1的数值的名字 参数2的名字: (参数2数据类型) 参数2值的名字 …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;举个例子，一个方法的定义：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) setKids: (NSString *)myOldestKidName secondKid: (NSString *) mySecondOldestKidName thirdKid: (NSString *) myThirdOldestKidName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实现这个函数的时候：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) setKids: (NSString *)myOldestKidName secondKid: (NSString *) mySecondOldestKidName thirdKid: (NSString *) myThirdOldestKidName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;大儿子 = myOldestKidName; 二儿子 = mySecondOldestKidName; 三儿子 = myThirdOldestKidName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用的时候：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kids *myKids = [[Kids alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myKids setKids: @”张大力” secondKid: @”张二力” thirdKid: @”张小力”];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Nil-nil-Null-NSNull&quot;&gt;&lt;a href=&quot;#Nil-nil-Null-NSNull&quot; class=&quot;headerlink&quot; title=&quot;Nil nil Null NSNull&quot;&gt;&lt;/a&gt;Nil nil Null NSNull&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil 是 ObjC 对象的字面空值，对应 id 类型的对象，或者使用 @interface 声明的 ObjC 对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *someString = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSURL *someURL = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id someObject = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nil 是 ObjC 类类型的书面空值，对应 Class 类型对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class someClass = Nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class anotherClass = [NSString class];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NULL 是任意的 C 指针空值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int *pointerToInt = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *pointerToChar = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct TreeNode *rootNode = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNull 是一个代表空值的类，是一个 ObjC 对象。实际上它只有一个单例方法：+[NSNull null]，一般用于表示集合中值为空的对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例子说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 因为 nil 被用来用为集合结束的标志，所以 nil 不能存储在 Foundation 集合里。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *array = [NSArray arrayWithObjects:@&amp;quot;one&amp;quot;, @&amp;quot;two&amp;quot;, nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 错误的使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableDictionary *dict = [NSMutableDictionary dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dict setObject:nil forKey:@&amp;quot;someKey&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 正确的使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableDictionary *dict = [NSMutableDictionary dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dict setObject:[NSNull null] forKey:@&amp;quot;someKey&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[判断为空的方式]：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![listi isKindOfClass:[NSNull class]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;self-and&quot;&gt;&lt;a href=&quot;#self-and&quot; class=&quot;headerlink&quot; title=&quot;self and _&quot;&gt;&lt;/a&gt;self and _&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;所有使用self.xxx是更好的选择，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为这样可以兼容懒加载，同时也避免了使用下滑线的时候忽略了self这个指针，后者容易在BLock中造成循环引用。同时，使用 _是获取不到父类的属性，因为它只是对局部变量的访问。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后总结：self方法实际上是用了get和set方法间接调用，下划线方法是直接对变量操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_xxx访问的是xxx的地址。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.xxx访问的是xxx的getter。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这两者并不是完全等价的，self.xxx是用objc_msgSend发消息，_xxx或者self-&amp;gt;xxx则是直接访问内存地址，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一般建议在init里面用_xxx，其他地方用self.xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;UIGestureRecognizerDelegate&quot;&gt;&lt;a href=&quot;#UIGestureRecognizerDelegate&quot; class=&quot;headerlink&quot; title=&quot;UIGestureRecognizerDelegate&quot;&gt;&lt;/a&gt;UIGestureRecognizerDelegate&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;可以定义各种手势的实现，如滑动返回等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;UIResponder&quot;&gt;&lt;a href=&quot;#UIResponder&quot; class=&quot;headerlink&quot; title=&quot;UIResponder&quot;&gt;&lt;/a&gt;UIResponder&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这个类定义了很多用来处理响应和时间处理的类。他的子类有UIApplication，UIView以及UIWindow等。IOS中分为两类事件：触摸事件，和移动事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;处理触摸事件的主要方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.touchesBegan:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.touchesMoved:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.touchesEnded:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.touchesCancelled:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这些方法的参数与触摸它们的事件相关联，开始触摸以及触摸位置的改变都会发生触摸事件。因此iOS允许在多点触摸中响应者分别追踪和处理触摸。只要手指触摸屏幕，滑动，从屏幕离开，都会产生一个UIEvent对象，事件包括UITouch对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;处理移动事件的主要方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.motionBegan:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.motionEnded:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.motionCancelled:withEvent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外，canPerformAction:withSender: 方法允许响应程序来验证用户界面中的命令，而 undoManager 属性返回最近的在响应链中NSUndoManager 对象。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;消息&quot;&gt;&lt;a href=&quot;#消息&quot; class=&quot;headerlink&quot; title=&quot;消息&quot;&gt;&lt;/a&gt;消息&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在C++或Java里，类与类的行为方法之间的关系非常紧密，一个方法必定属于一个类，且于编译时就已经绑定在一起，所以你不可能调用一个类里没有的方法。而在Objective-C中就比较简单了，类和消息之间是松耦合的，方法调用只是向某个类发送一个消息，该类可以在运行时再确定怎么处理接受到的消息。也就是说，一个类不保证一定会响应接收到的消息，如果收到了一个无法处理的消息，那么程序就是简单报一个错而已。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objective-C 是 C 语言的超集，所有的方法在底层都是简单朴素的 C 方法，运行时决定了当传入一个消息时具体哪个方法被调用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;像对象发送一个消息的代码类似于这个：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id returnValue = [someObject messageName:parameter];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最终这个代码会变成类似下面这个C方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id returnValue = objc_msgSend(someObject, @selector(messageName:), parameter);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;copy&quot;&gt;&lt;a href=&quot;#copy&quot; class=&quot;headerlink&quot; title=&quot;copy&quot;&gt;&lt;/a&gt;copy&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;UIApplication-amp-AppDelegate&quot;&gt;&lt;a href=&quot;#UIApplication-amp-AppDelegate&quot; class=&quot;headerlink&quot; title=&quot;UIApplication&amp;amp;AppDelegate&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="iOS-ObjectiveC" scheme="http://yoursite.com/categories/iOS-ObjectiveC/"/>
    
    
  </entry>
  
</feed>
